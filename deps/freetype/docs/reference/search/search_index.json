{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"TOC","text":"<p>FreeType \u00bb Docs \u00bb Table of Contents</p>"},{"location":"index.html#freetype-2133-api-reference","title":"FreeType-2.13.3 API Reference","text":""},{"location":"index.html#table-of-contents","title":"Table of Contents","text":""},{"location":"index.html#general-remarks","title":"General Remarks","text":"Preamble <p>What FreeType is and isn't</p> FreeType's header inclusion scheme <p>How client applications should include FreeType header files.</p> User allocation <p>How client applications should allocate FreeType data structures.</p>"},{"location":"index.html#core-api","title":"Core API","text":"Basic Data Types <p>The basic data types defined by the library.</p> Library Setup <p>Functions to start and end the usage of the FreeType library.</p> Face Creation <p>Functions to manage fonts.</p> Font Testing Macros <p>Macros to test various properties of fonts.</p> Sizing and Scaling <p>Functions to manage font sizes.</p> Glyph Retrieval <p>Functions to manage glyphs.</p> Character Mapping <p>Functions to manage character-to-glyph maps.</p> Information Retrieval <p>Functions to retrieve font and glyph information.</p> Other API Data <p>Other structures, enumerations, and macros.</p>"},{"location":"index.html#extended-api","title":"Extended API","text":"Unicode Variation Sequences <p>The FreeType\u00a02 interface to Unicode Variation Sequences (UVS), using the SFNT cmap format\u00a014.</p> Glyph Color Management <p>Retrieving and manipulating OpenType's \u2018CPAL\u2019 table data.</p> Glyph Layer Management <p>Retrieving and manipulating OpenType's \u2018COLR\u2019 table data.</p> Glyph Management <p>Generic interface to manage individual glyph data.</p> Mac Specific Interface <p>Only available on the Macintosh.</p> Size Management <p>Managing multiple sizes per face.</p> Header File Macros <p>Macro definitions used to <code>#include</code> specific header files.</p>"},{"location":"index.html#format-specific-api","title":"Format-Specific API","text":"Multiple Masters <p>How to manage Multiple Masters fonts.</p> TrueType Tables <p>TrueType-specific table types and functions.</p> Type 1 Tables <p>Type\u00a01-specific font tables.</p> SFNT Names <p>Access the names embedded in TrueType and OpenType files.</p> BDF and PCF Files <p>BDF and PCF specific API.</p> CID Fonts <p>CID-keyed font-specific API.</p> PFR Fonts <p>PFR/TrueDoc-specific API.</p> Window FNT Files <p>Windows FNT-specific API.</p> OpenType SVG Fonts <p>OT-SVG API between FreeType and an external SVG rendering library.</p> Font Formats <p>Getting the font format.</p> Gasp Table <p>Retrieving TrueType \u2018gasp\u2019 table entries.</p>"},{"location":"index.html#controlling-freetype-modules","title":"Controlling FreeType Modules","text":"The auto-hinter <p>Controlling the auto-hinting module.</p> The CFF driver <p>Controlling the CFF driver module.</p> The Type 1 and CID drivers <p>Controlling the Type\u00a01 and CID driver modules.</p> The TrueType driver <p>Controlling the TrueType driver module.</p> The PCF driver <p>Controlling the PCF driver module.</p> The SVG driver <p>Controlling the external rendering of OT-SVG glyphs.</p> Driver properties <p>Controlling driver modules.</p> Parameter Tags <p>Macros for driver property and font loading parameter tags.</p> Subpixel Rendering <p>API to control subpixel rendering.</p>"},{"location":"index.html#cache-sub-system","title":"Cache Sub-System","text":"Cache Sub-System <p>How to cache face, size, and glyph data with FreeType\u00a02.</p>"},{"location":"index.html#support-api","title":"Support API","text":"Computations <p>Crunching fixed numbers and vectors.</p> List Processing <p>Simple management of lists.</p> Outline Processing <p>Functions to create, transform, and render vectorial glyph images.</p> Quick retrieval of advance values <p>Retrieve horizontal and vertical advance values without processing glyph outlines, if possible.</p> Bitmap Handling <p>Handling FT_Bitmap objects.</p> Scanline Converter <p>How vectorial outlines are converted into bitmaps and pixmaps.</p> Glyph Stroker <p>Generating bordered and stroked glyphs.</p> System Interface <p>How FreeType manages memory and i/o.</p> Module Management <p>How to add, upgrade, remove, and control modules from FreeType.</p> GZIP Streams <p>Using gzip-compressed font files.</p> LZW Streams <p>Using LZW-compressed font files.</p> BZIP2 Streams <p>Using bzip2-compressed font files.</p> External Debugging APIs <p>Public APIs to control the <code>FT_DEBUG_LOGGING</code> macro.</p>"},{"location":"index.html#error-codes","title":"Error Codes","text":"Error Enumerations <p>How to handle errors and error strings.</p> Error Code Values <p>All possible error codes returned by FreeType functions.</p>"},{"location":"index.html#miscellaneous","title":"Miscellaneous","text":"TrueTypeGX/AAT Validation <p>An API to validate TrueTypeGX/AAT tables.</p> Incremental Loading <p>Custom Glyph Loading.</p> The TrueType Engine <p>TrueType bytecode support.</p> OpenType Validation <p>An API to validate OpenType tables.</p>"},{"location":"index.html#global-index","title":"Global Index","text":"generated on Mon Aug 12 11:00:44 2024 UTC"},{"location":"ft2-auto_hinter.html","title":"The auto-hinter","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb The auto-hinter</p>"},{"location":"ft2-auto_hinter.html#the-auto-hinter","title":"The auto-hinter","text":""},{"location":"ft2-auto_hinter.html#synopsis","title":"Synopsis","text":"<p>While FreeType's auto-hinter doesn't expose API functions by itself, it is possible to control its behaviour with <code>FT_Property_Set</code> and <code>FT_Property_Get</code>. The following lists the available properties together with the necessary macros and structures.</p> <p>Note that the auto-hinter's module name is \u2018autofitter\u2019 for historical reasons.</p> <p>Available properties are <code>increase-x-height</code>, <code>no-stem-darkening</code> (experimental), <code>darkening-parameters</code> (experimental), <code>glyph-to-script-map</code> (experimental), <code>fallback-script</code> (experimental), and <code>default-script</code> (experimental), as documented in the \u2018Driver properties\u2019 section.</p>"},{"location":"ft2-basic_types.html","title":"Basic Data Types","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Basic Data Types</p>"},{"location":"ft2-basic_types.html#basic-data-types","title":"Basic Data Types","text":""},{"location":"ft2-basic_types.html#synopsis","title":"Synopsis","text":"<p>This section contains the basic data types defined by FreeType\u00a02, ranging from simple scalar types to bitmap descriptors. More font-specific structures are defined in a different section. Note that FreeType does not use floating-point data types. Fractional values are represented by fixed-point integers, with lower bits storing the fractional part.</p>"},{"location":"ft2-basic_types.html#ft_byte","title":"FT_Byte","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef unsigned char  FT_Byte;\n</code></pre> <p>A simple typedef for the unsigned char type.</p>"},{"location":"ft2-basic_types.html#ft_bytes","title":"FT_Bytes","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef const FT_Byte*  FT_Bytes;\n</code></pre> <p>A typedef for constant memory areas.</p>"},{"location":"ft2-basic_types.html#ft_char","title":"FT_Char","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed char  FT_Char;\n</code></pre> <p>A simple typedef for the signed char type.</p>"},{"location":"ft2-basic_types.html#ft_int","title":"FT_Int","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed int  FT_Int;\n</code></pre> <p>A typedef for the int type.</p>"},{"location":"ft2-basic_types.html#ft_uint","title":"FT_UInt","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef unsigned int  FT_UInt;\n</code></pre> <p>A typedef for the unsigned int type.</p>"},{"location":"ft2-basic_types.html#ft_int16","title":"FT_Int16","text":"<pre><code>  typedef signed short  FT_Int16;\n</code></pre> <p>A typedef for a 16bit signed integer type.</p>"},{"location":"ft2-basic_types.html#ft_uint16","title":"FT_UInt16","text":"<pre><code>  typedef unsigned short  FT_UInt16;\n</code></pre> <p>A typedef for a 16bit unsigned integer type.</p>"},{"location":"ft2-basic_types.html#ft_int32","title":"FT_Int32","text":"<pre><code>  typedef signed XXX  FT_Int32;\n</code></pre> <p>A typedef for a 32bit signed integer type. The size depends on the configuration.</p>"},{"location":"ft2-basic_types.html#ft_uint32","title":"FT_UInt32","text":"<pre><code>  typedef unsigned XXX  FT_UInt32;\n</code></pre>"},{"location":"ft2-basic_types.html#ft_int64","title":"FT_Int64","text":"<pre><code>  typedef signed XXX  FT_Int64;\n</code></pre>"},{"location":"ft2-basic_types.html#ft_uint64","title":"FT_UInt64","text":"<pre><code>  typedef unsigned XXX  FT_UInt64;\n</code></pre>"},{"location":"ft2-basic_types.html#ft_short","title":"FT_Short","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed short  FT_Short;\n</code></pre> <p>A typedef for signed short.</p>"},{"location":"ft2-basic_types.html#ft_ushort","title":"FT_UShort","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef unsigned short  FT_UShort;\n</code></pre> <p>A typedef for unsigned short.</p>"},{"location":"ft2-basic_types.html#ft_long","title":"FT_Long","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed long  FT_Long;\n</code></pre> <p>A typedef for signed long.</p>"},{"location":"ft2-basic_types.html#ft_ulong","title":"FT_ULong","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef unsigned long  FT_ULong;\n</code></pre> <p>A typedef for unsigned long.</p>"},{"location":"ft2-basic_types.html#ft_bool","title":"FT_Bool","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef unsigned char  FT_Bool;\n</code></pre> <p>A typedef of unsigned char, used for simple booleans. As usual, values 1 and\u00a00 represent true and false, respectively.</p>"},{"location":"ft2-basic_types.html#ft_offset","title":"FT_Offset","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef size_t  FT_Offset;\n</code></pre> <p>This is equivalent to the ANSI\u00a0C <code>size_t</code> type, i.e., the largest unsigned integer type used to express a file size or position, or a memory block size.</p>"},{"location":"ft2-basic_types.html#ft_ptrdist","title":"FT_PtrDist","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef ft_ptrdiff_t  FT_PtrDist;\n</code></pre> <p>This is equivalent to the ANSI\u00a0C <code>ptrdiff_t</code> type, i.e., the largest signed integer type used to express the distance between two pointers.</p>"},{"location":"ft2-basic_types.html#ft_string","title":"FT_String","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef char  FT_String;\n</code></pre> <p>A simple typedef for the char type, usually used for strings.</p>"},{"location":"ft2-basic_types.html#ft_tag","title":"FT_Tag","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef FT_UInt32  FT_Tag;\n</code></pre> <p>A typedef for 32-bit tags (as used in the SFNT format).</p>"},{"location":"ft2-basic_types.html#ft_error","title":"FT_Error","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef int  FT_Error;\n</code></pre> <p>The FreeType error code type. A value of\u00a00 is always interpreted as a successful operation.</p>"},{"location":"ft2-basic_types.html#ft_fixed","title":"FT_Fixed","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed long  FT_Fixed;\n</code></pre> <p>This type is used to store 16.16 fixed-point values, like scaling values or matrix coefficients.</p>"},{"location":"ft2-basic_types.html#ft_pointer","title":"FT_Pointer","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef void*  FT_Pointer;\n</code></pre> <p>A simple typedef for a typeless pointer.</p>"},{"location":"ft2-basic_types.html#ft_pos","title":"FT_Pos","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef signed long  FT_Pos;\n</code></pre> <p>The type FT_Pos is used to store vectorial coordinates. Depending on the context, these can represent distances in integer font units, or 16.16, or 26.6 fixed-point pixel coordinates.</p>"},{"location":"ft2-basic_types.html#ft_vector","title":"FT_Vector","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_Vector_\n  {\n    FT_Pos  x;\n    FT_Pos  y;\n\n  } FT_Vector;\n</code></pre> <p>A simple structure used to store a 2D vector; coordinates are of the FT_Pos type.</p> fields x <p>The horizontal coordinate.</p> y <p>The vertical coordinate.</p>"},{"location":"ft2-basic_types.html#ft_bbox","title":"FT_BBox","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_BBox_\n  {\n    FT_Pos  xMin, yMin;\n    FT_Pos  xMax, yMax;\n\n  } FT_BBox;\n</code></pre> <p>A structure used to hold an outline's bounding box, i.e., the coordinates of its extrema in the horizontal and vertical directions.</p> fields xMin <p>The horizontal minimum (left-most).</p> yMin <p>The vertical minimum (bottom-most).</p> xMax <p>The horizontal maximum (right-most).</p> yMax <p>The vertical maximum (top-most).</p> note <p>The bounding box is specified with the coordinates of the lower left and the upper right corner. In PostScript, those values are often called (llx,lly) and (urx,ury), respectively.</p> <p>If <code>yMin</code> is negative, this value gives the glyph's descender. Otherwise, the glyph doesn't descend below the baseline. Similarly, if <code>ymax</code> is positive, this value gives the glyph's ascender.</p> <p><code>xMin</code> gives the horizontal distance from the glyph's origin to the left edge of the glyph's bounding box. If <code>xMin</code> is negative, the glyph extends to the left of the origin.</p>"},{"location":"ft2-basic_types.html#ft_matrix","title":"FT_Matrix","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct  FT_Matrix_\n  {\n    FT_Fixed  xx, xy;\n    FT_Fixed  yx, yy;\n\n  } FT_Matrix;\n</code></pre> <p>A simple structure used to store a 2x2 matrix. Coefficients are in 16.16 fixed-point format. The computation performed is: <pre><code>  x' = x*xx + y*xy\n  y' = x*yx + y*yy\n</code></pre></p> fields xx <p>Matrix coefficient.</p> xy <p>Matrix coefficient.</p> yx <p>Matrix coefficient.</p> yy <p>Matrix coefficient.</p>"},{"location":"ft2-basic_types.html#ft_fword","title":"FT_FWord","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed short  FT_FWord;   /* distance in FUnits */\n</code></pre> <p>A signed 16-bit integer used to store a distance in original font units.</p>"},{"location":"ft2-basic_types.html#ft_ufword","title":"FT_UFWord","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef unsigned short  FT_UFWord;  /* unsigned distance */\n</code></pre> <p>An unsigned 16-bit integer used to store a distance in original font units.</p>"},{"location":"ft2-basic_types.html#ft_f2dot14","title":"FT_F2Dot14","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed short  FT_F2Dot14;\n</code></pre> <p>A signed 2.14 fixed-point type used for unit vectors.</p>"},{"location":"ft2-basic_types.html#ft_unitvector","title":"FT_UnitVector","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct  FT_UnitVector_\n  {\n    FT_F2Dot14  x;\n    FT_F2Dot14  y;\n\n  } FT_UnitVector;\n</code></pre> <p>A simple structure used to store a 2D vector unit vector. Uses FT_F2Dot14 types.</p> fields x <p>Horizontal coordinate.</p> y <p>Vertical coordinate.</p>"},{"location":"ft2-basic_types.html#ft_f26dot6","title":"FT_F26Dot6","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef signed long  FT_F26Dot6;\n</code></pre> <p>A signed 26.6 fixed-point type used for vectorial pixel coordinates.</p>"},{"location":"ft2-basic_types.html#ft_data","title":"FT_Data","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct  FT_Data_\n  {\n    const FT_Byte*  pointer;\n    FT_UInt         length;\n\n  } FT_Data;\n</code></pre> <p>Read-only binary data represented as a pointer and a length.</p> fields pointer <p>The data.</p> length <p>The length of the data in bytes.</p>"},{"location":"ft2-basic_types.html#ft_make_tag","title":"FT_MAKE_TAG","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>#define FT_MAKE_TAG( _x1, _x2, _x3, _x4 )                  \\\n          ( ( FT_STATIC_BYTE_CAST( FT_Tag, _x1 ) &lt;&lt; 24 ) | \\\n            ( FT_STATIC_BYTE_CAST( FT_Tag, _x2 ) &lt;&lt; 16 ) | \\\n            ( FT_STATIC_BYTE_CAST( FT_Tag, _x3 ) &lt;&lt;  8 ) | \\\n              FT_STATIC_BYTE_CAST( FT_Tag, _x4 )         )\n</code></pre> <p>This macro converts four-letter tags that are used to label TrueType tables into an <code>FT_Tag</code> type, to be used within FreeType.</p> note <p>The produced values must be 32-bit integers. Don't redefine this macro.</p>"},{"location":"ft2-basic_types.html#ft_generic","title":"FT_Generic","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct  FT_Generic_\n  {\n    void*                 data;\n    FT_Generic_Finalizer  finalizer;\n\n  } FT_Generic;\n</code></pre> <p>Client applications often need to associate their own data to a variety of FreeType core objects. For example, a text layout API might want to associate a glyph cache to a given size object.</p> <p>Some FreeType object contains a <code>generic</code> field, of type <code>FT_Generic</code>, which usage is left to client applications and font servers.</p> <p>It can be used to store a pointer to client-specific data, as well as the address of a \u2018finalizer\u2019 function, which will be called by FreeType when the object is destroyed (for example, the previous client example would put the address of the glyph cache destructor in the <code>finalizer</code> field).</p> fields data <p>A typeless pointer to any client-specified data. This field is completely ignored by the FreeType library.</p> finalizer <p>A pointer to a \u2018generic finalizer\u2019 function, which will be called when the object is destroyed. If this field is set to <code>NULL</code>, no code will be called.</p>"},{"location":"ft2-basic_types.html#ft_generic_finalizer","title":"FT_Generic_Finalizer","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef void  (*FT_Generic_Finalizer)( void*  object );\n</code></pre> <p>Describe a function used to destroy the \u2018client\u2019 data of any FreeType object. See the description of the <code>FT_Generic</code> type for details of usage.</p> input <p>The address of the FreeType object that is under finalization. Its client data is accessed through its <code>generic</code> field.</p>"},{"location":"ft2-basic_types.html#ft_bitmap","title":"FT_Bitmap","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_Bitmap_\n  {\n    unsigned int    rows;\n    unsigned int    width;\n    int             pitch;\n    unsigned char*  buffer;\n    unsigned short  num_grays;\n    unsigned char   pixel_mode;\n    unsigned char   palette_mode;\n    void*           palette;\n\n  } FT_Bitmap;\n</code></pre> <p>A structure used to describe a bitmap or pixmap to the raster. Note that we now manage pixmaps of various depths through the <code>pixel_mode</code> field.</p> fields rows <p>The number of bitmap rows.</p> width <p>The number of pixels in bitmap row.</p> pitch <p>The pitch's absolute value is the number of bytes taken by one bitmap row, including padding. However, the pitch is positive when the bitmap has a \u2018down\u2019 flow, and negative when it has an \u2018up\u2019 flow. In all cases, the pitch is an offset to add to a bitmap pointer in order to go down one row.</p> <p>Note that \u2018padding\u2019 means the alignment of a bitmap to a byte border, and FreeType functions normally align to the smallest possible integer value.</p> <p>For the B/W rasterizer, <code>pitch</code> is always an even number.</p> <p>To change the pitch of a bitmap (say, to make it a multiple of 4), use <code>FT_Bitmap_Convert</code>. Alternatively, you might use callback functions to directly render to the application's surface; see the file <code>example2.cpp</code> in the tutorial for a demonstration.</p> buffer <p>A typeless pointer to the bitmap buffer. This value should be aligned on 32-bit boundaries in most cases.</p> num_grays <p>This field is only used with <code>FT_PIXEL_MODE_GRAY</code>; it gives the number of gray levels used in the bitmap.</p> pixel_mode <p>The pixel mode, i.e., how pixel bits are stored. See <code>FT_Pixel_Mode</code> for possible values.</p> palette_mode <p>This field is intended for paletted pixel modes; it indicates how the palette is stored. Not used currently.</p> palette <p>A typeless pointer to the bitmap palette; this field is intended for paletted pixel modes. Not used currently.</p> note <p><code>width</code> and <code>rows</code> refer to the physical size of the bitmap, not the logical one. For example, if <code>FT_Pixel_Mode</code> is set to <code>FT_PIXEL_MODE_LCD</code>, the logical width is a just a third of the physical one.</p>"},{"location":"ft2-basic_types.html#ft_pixel_mode","title":"FT_Pixel_Mode","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef enum  FT_Pixel_Mode_\n  {\n    FT_PIXEL_MODE_NONE = 0,\n    FT_PIXEL_MODE_MONO,\n    FT_PIXEL_MODE_GRAY,\n    FT_PIXEL_MODE_GRAY2,\n    FT_PIXEL_MODE_GRAY4,\n    FT_PIXEL_MODE_LCD,\n    FT_PIXEL_MODE_LCD_V,\n    FT_PIXEL_MODE_BGRA,\n\n    FT_PIXEL_MODE_MAX      /* do not remove */\n\n  } FT_Pixel_Mode;\n\n\n  /* these constants are deprecated; use the corresponding `FT_Pixel_Mode` */\n  /* values instead.                                                       */\n#define ft_pixel_mode_none   FT_PIXEL_MODE_NONE\n#define ft_pixel_mode_mono   FT_PIXEL_MODE_MONO\n#define ft_pixel_mode_grays  FT_PIXEL_MODE_GRAY\n#define ft_pixel_mode_pal2   FT_PIXEL_MODE_GRAY2\n#define ft_pixel_mode_pal4   FT_PIXEL_MODE_GRAY4\n</code></pre> <p>An enumeration type used to describe the format of pixels in a given bitmap. Note that additional formats may be added in the future.</p> values FT_PIXEL_MODE_NONE <p>Value\u00a00 is reserved.</p> FT_PIXEL_MODE_MONO <p>A monochrome bitmap, using 1\u00a0bit per pixel. Note that pixels are stored in most-significant order (MSB), which means that the left-most pixel in a byte has value 128.</p> FT_PIXEL_MODE_GRAY <p>An 8-bit bitmap, generally used to represent anti-aliased glyph images. Each pixel is stored in one byte. Note that the number of \u2018gray\u2019 levels is stored in the <code>num_grays</code> field of the <code>FT_Bitmap</code> structure (it generally is 256).</p> FT_PIXEL_MODE_GRAY2 <p>A 2-bit per pixel bitmap, used to represent embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.</p> FT_PIXEL_MODE_GRAY4 <p>A 4-bit per pixel bitmap, representing embedded anti-aliased bitmaps in font files according to the OpenType specification. We haven't found a single font using this format, however.</p> FT_PIXEL_MODE_LCD <p>An 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on LCD displays; the bitmap is three times wider than the original glyph image. See also <code>FT_RENDER_MODE_LCD</code>.</p> FT_PIXEL_MODE_LCD_V <p>An 8-bit bitmap, representing RGB or BGR decimated glyph images used for display on rotated LCD displays; the bitmap is three times taller than the original glyph image. See also <code>FT_RENDER_MODE_LCD_V</code>.</p> FT_PIXEL_MODE_BGRA <p>[Since 2.5] An image with four 8-bit channels per pixel, representing a color image (such as emoticons) with alpha channel. For each pixel, the format is BGRA, which means, the blue channel comes first in memory. The color channels are pre-multiplied and in the sRGB colorspace. For example, full red at half-translucent opacity will be represented as \u201800,00,80,80\u2019, not \u201800,00,FF,80\u2019. See also <code>FT_LOAD_COLOR</code>.</p>"},{"location":"ft2-basic_types.html#ft_glyph_format","title":"FT_Glyph_Format","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef enum  FT_Glyph_Format_\n  {\n    FT_IMAGE_TAG( FT_GLYPH_FORMAT_NONE, 0, 0, 0, 0 ),\n\n    FT_IMAGE_TAG( FT_GLYPH_FORMAT_COMPOSITE, 'c', 'o', 'm', 'p' ),\n    FT_IMAGE_TAG( FT_GLYPH_FORMAT_BITMAP,    'b', 'i', 't', 's' ),\n    FT_IMAGE_TAG( FT_GLYPH_FORMAT_OUTLINE,   'o', 'u', 't', 'l' ),\n    FT_IMAGE_TAG( FT_GLYPH_FORMAT_PLOTTER,   'p', 'l', 'o', 't' ),\n    FT_IMAGE_TAG( FT_GLYPH_FORMAT_SVG,       'S', 'V', 'G', ' ' )\n\n  } FT_Glyph_Format;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `FT_Glyph_Format` values instead.                     */\n#define ft_glyph_format_none       FT_GLYPH_FORMAT_NONE\n#define ft_glyph_format_composite  FT_GLYPH_FORMAT_COMPOSITE\n#define ft_glyph_format_bitmap     FT_GLYPH_FORMAT_BITMAP\n#define ft_glyph_format_outline    FT_GLYPH_FORMAT_OUTLINE\n#define ft_glyph_format_plotter    FT_GLYPH_FORMAT_PLOTTER\n</code></pre> <p>An enumeration type used to describe the format of a given glyph image. Note that this version of FreeType only supports two image formats, even though future font drivers will be able to register their own format.</p> values FT_GLYPH_FORMAT_NONE <p>The value\u00a00 is reserved.</p> FT_GLYPH_FORMAT_COMPOSITE <p>The glyph image is a composite of several other images. This format is only used with <code>FT_LOAD_NO_RECURSE</code>, and is used to report compound glyphs (like accented characters).</p> FT_GLYPH_FORMAT_BITMAP <p>The glyph image is a bitmap, and can be described as an <code>FT_Bitmap</code>. You generally need to access the <code>bitmap</code> field of the <code>FT_GlyphSlotRec</code> structure to read it.</p> FT_GLYPH_FORMAT_OUTLINE <p>The glyph image is a vectorial outline made of line segments and Bezier arcs; it can be described as an <code>FT_Outline</code>; you generally want to access the <code>outline</code> field of the <code>FT_GlyphSlotRec</code> structure to read it.</p> FT_GLYPH_FORMAT_PLOTTER <p>The glyph image is a vectorial path with no inside and outside contours. Some Type\u00a01 fonts, like those in the Hershey family, contain glyphs in this format. These are described as <code>FT_Outline</code>, but FreeType isn't currently capable of rendering them correctly.</p> FT_GLYPH_FORMAT_SVG <p>[Since 2.12] The glyph is represented by an SVG document in the \u2018SVG\u00a0\u2019 table.</p>"},{"location":"ft2-basic_types.html#ft_image_tag","title":"FT_IMAGE_TAG","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>#ifndef FT_IMAGE_TAG\n\n#define FT_IMAGE_TAG( value, _x1, _x2, _x3, _x4 )                         \\\n          value = ( ( FT_STATIC_BYTE_CAST( unsigned long, _x1 ) &lt;&lt; 24 ) | \\\n                    ( FT_STATIC_BYTE_CAST( unsigned long, _x2 ) &lt;&lt; 16 ) | \\\n                    ( FT_STATIC_BYTE_CAST( unsigned long, _x3 ) &lt;&lt; 8  ) | \\\n                      FT_STATIC_BYTE_CAST( unsigned long, _x4 )         )\n\n#endif /* FT_IMAGE_TAG */\n</code></pre> <p>This macro converts four-letter tags to an unsigned long type.</p> note <p>Since many 16-bit compilers don't like 32-bit enumerations, you should redefine this macro in case of problems to something like this: <pre><code>  #define FT_IMAGE_TAG( value, _x1, _x2, _x3, _x4 )  value\n</code></pre></p> <p>to get a simple enumeration without assigning special numbers.</p>"},{"location":"ft2-bdf_fonts.html","title":"BDF and PCF Files","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb BDF and PCF Files</p>"},{"location":"ft2-bdf_fonts.html#bdf-and-pcf-files","title":"BDF and PCF Files","text":""},{"location":"ft2-bdf_fonts.html#synopsis","title":"Synopsis","text":"<p>This section contains the declaration of functions specific to BDF and PCF fonts.</p>"},{"location":"ft2-bdf_fonts.html#bdf_propertytype","title":"BDF_PropertyType","text":"<p>Defined in FT_BDF_H (freetype/ftbdf.h).</p> <pre><code>  typedef enum  BDF_PropertyType_\n  {\n    BDF_PROPERTY_TYPE_NONE     = 0,\n    BDF_PROPERTY_TYPE_ATOM     = 1,\n    BDF_PROPERTY_TYPE_INTEGER  = 2,\n    BDF_PROPERTY_TYPE_CARDINAL = 3\n\n  } BDF_PropertyType;\n</code></pre> <p>A list of BDF property types.</p> values BDF_PROPERTY_TYPE_NONE <p>Value\u00a00 is used to indicate a missing property.</p> BDF_PROPERTY_TYPE_ATOM <p>Property is a string atom.</p> BDF_PROPERTY_TYPE_INTEGER <p>Property is a 32-bit signed integer.</p> BDF_PROPERTY_TYPE_CARDINAL <p>Property is a 32-bit unsigned integer.</p>"},{"location":"ft2-bdf_fonts.html#bdf_property","title":"BDF_Property","text":"<p>Defined in FT_BDF_H (freetype/ftbdf.h).</p> <pre><code>  typedef struct BDF_PropertyRec_*  BDF_Property;\n</code></pre> <p>A handle to a <code>BDF_PropertyRec</code> structure to model a given BDF/PCF property.</p>"},{"location":"ft2-bdf_fonts.html#bdf_propertyrec","title":"BDF_PropertyRec","text":"<p>Defined in FT_BDF_H (freetype/ftbdf.h).</p> <pre><code>  typedef struct  BDF_PropertyRec_\n  {\n    BDF_PropertyType  type;\n    union {\n      const char*     atom;\n      FT_Int32        integer;\n      FT_UInt32       cardinal;\n\n    } u;\n\n  } BDF_PropertyRec;\n</code></pre> <p>This structure models a given BDF/PCF property.</p> fields type <p>The property type.</p> u.atom <p>The atom string, if type is <code>BDF_PROPERTY_TYPE_ATOM</code>. May be <code>NULL</code>, indicating an empty string.</p> u.integer <p>A signed integer, if type is <code>BDF_PROPERTY_TYPE_INTEGER</code>.</p> u.cardinal <p>An unsigned integer, if type is <code>BDF_PROPERTY_TYPE_CARDINAL</code>.</p>"},{"location":"ft2-bdf_fonts.html#ft_get_bdf_charset_id","title":"FT_Get_BDF_Charset_ID","text":"<p>Defined in FT_BDF_H (freetype/ftbdf.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_BDF_Charset_ID( FT_Face       face,\n                         const char*  *acharset_encoding,\n                         const char*  *acharset_registry );\n</code></pre> <p>Retrieve a BDF font character set identity, according to the BDF specification.</p> input face <p>A handle to the input face.</p> output acharset_encoding <p>Charset encoding, as a C\u00a0string, owned by the face.</p> acharset_registry <p>Charset registry, as a C\u00a0string, owned by the face.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function only works with BDF faces, returning an error otherwise.</p>"},{"location":"ft2-bdf_fonts.html#ft_get_bdf_property","title":"FT_Get_BDF_Property","text":"<p>Defined in FT_BDF_H (freetype/ftbdf.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_BDF_Property( FT_Face           face,\n                       const char*       prop_name,\n                       BDF_PropertyRec  *aproperty );\n</code></pre> <p>Retrieve a BDF property from a BDF or PCF font file.</p> input face <p>A handle to the input face.</p> name <p>The property name.</p> output aproperty <p>The property.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function works with BDF and PCF fonts. It returns an error otherwise. It also returns an error if the property is not in the font.</p> <p>A \u2018property\u2019 is a either key-value pair within the STARTPROPERTIES \u2026 ENDPROPERTIES block of a BDF font or a key-value pair from the <code>info-&gt;props</code> array within a <code>FontRec</code> structure of a PCF font.</p> <p>Integer properties are always stored as \u2018signed\u2019 within PCF fonts; consequently, <code>BDF_PROPERTY_TYPE_CARDINAL</code> is a possible return value for BDF fonts only.</p> <p>In case of error, <code>aproperty-&gt;type</code> is always set to <code>BDF_PROPERTY_TYPE_NONE</code>.</p>"},{"location":"ft2-bitmap_handling.html","title":"Bitmap Handling","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb Bitmap Handling</p>"},{"location":"ft2-bitmap_handling.html#bitmap-handling","title":"Bitmap Handling","text":""},{"location":"ft2-bitmap_handling.html#synopsis","title":"Synopsis","text":"<p>This section contains functions for handling <code>FT_Bitmap</code> objects, automatically adjusting the target's bitmap buffer size as needed.</p> <p>Note that none of the functions changes the bitmap's \u2018flow\u2019 (as indicated by the sign of the <code>pitch</code> field in <code>FT_Bitmap</code>).</p> <p>To set the flow, assign an appropriate positive or negative value to the <code>pitch</code> field of the target <code>FT_Bitmap</code> object after calling <code>FT_Bitmap_Init</code> but before calling any of the other functions described here.</p>"},{"location":"ft2-bitmap_handling.html#ft_bitmap_init","title":"FT_Bitmap_Init","text":"<p>Defined in FT_BITMAP_H (freetype/ftbitmap.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Bitmap_Init( FT_Bitmap  *abitmap );\n\n\n  /* deprecated */\n  FT_EXPORT( void )\n  FT_Bitmap_New( FT_Bitmap  *abitmap );\n</code></pre> <p>Initialize a pointer to an <code>FT_Bitmap</code> structure.</p> inout abitmap <p>A pointer to the bitmap structure.</p> note <p>A deprecated name for the same function is <code>FT_Bitmap_New</code>.</p>"},{"location":"ft2-bitmap_handling.html#ft_bitmap_copy","title":"FT_Bitmap_Copy","text":"<p>Defined in FT_BITMAP_H (freetype/ftbitmap.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Bitmap_Copy( FT_Library        library,\n                  const FT_Bitmap  *source,\n                  FT_Bitmap        *target );\n</code></pre> <p>Copy a bitmap into another one.</p> input library <p>A handle to a library object.</p> source <p>A handle to the source bitmap.</p> output target <p>A handle to the target bitmap.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p><code>source-&gt;buffer</code> and <code>target-&gt;buffer</code> must neither be equal nor overlap.</p>"},{"location":"ft2-bitmap_handling.html#ft_bitmap_embolden","title":"FT_Bitmap_Embolden","text":"<p>Defined in FT_BITMAP_H (freetype/ftbitmap.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Bitmap_Embolden( FT_Library  library,\n                      FT_Bitmap*  bitmap,\n                      FT_Pos      xStrength,\n                      FT_Pos      yStrength );\n</code></pre> <p>Embolden a bitmap. The new bitmap will be about <code>xStrength</code> pixels wider and <code>yStrength</code> pixels higher. The left and bottom borders are kept unchanged.</p> input library <p>A handle to a library object.</p> xStrength <p>How strong the glyph is emboldened horizontally. Expressed in 26.6 pixel format.</p> yStrength <p>How strong the glyph is emboldened vertically. Expressed in 26.6 pixel format.</p> inout bitmap <p>A handle to the target bitmap.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The current implementation restricts <code>xStrength</code> to be less than or equal to\u00a08 if bitmap is of pixel_mode <code>FT_PIXEL_MODE_MONO</code>.</p> <p>If you want to embolden the bitmap owned by a <code>FT_GlyphSlotRec</code>, you should call <code>FT_GlyphSlot_Own_Bitmap</code> on the slot first.</p> <p>Bitmaps in <code>FT_PIXEL_MODE_GRAY2</code> and <code>FT_PIXEL_MODE_GRAY</code>@ format are converted to <code>FT_PIXEL_MODE_GRAY</code> format (i.e., 8bpp).</p>"},{"location":"ft2-bitmap_handling.html#ft_bitmap_convert","title":"FT_Bitmap_Convert","text":"<p>Defined in FT_BITMAP_H (freetype/ftbitmap.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Bitmap_Convert( FT_Library        library,\n                     const FT_Bitmap  *source,\n                     FT_Bitmap        *target,\n                     FT_Int            alignment );\n</code></pre> <p>Convert a bitmap object with depth 1bpp, 2bpp, 4bpp, 8bpp or 32bpp to a bitmap object with depth 8bpp, making the number of used bytes per line (a.k.a. the \u2018pitch\u2019) a multiple of <code>alignment</code>.</p> input library <p>A handle to a library object.</p> source <p>The source bitmap.</p> alignment <p>The pitch of the bitmap is a multiple of this argument. Common values are 1, 2, or 4.</p> output target <p>The target bitmap.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>It is possible to call <code>FT_Bitmap_Convert</code> multiple times without calling <code>FT_Bitmap_Done</code> (the memory is simply reallocated).</p> <p>Use <code>FT_Bitmap_Done</code> to finally remove the bitmap object.</p> <p>The <code>library</code> argument is taken to have access to FreeType's memory handling functions.</p> <p><code>source-&gt;buffer</code> and <code>target-&gt;buffer</code> must neither be equal nor overlap.</p>"},{"location":"ft2-bitmap_handling.html#ft_bitmap_blend","title":"FT_Bitmap_Blend","text":"<p>Defined in FT_BITMAP_H (freetype/ftbitmap.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Bitmap_Blend( FT_Library         library,\n                   const FT_Bitmap*   source,\n                   const FT_Vector    source_offset,\n                   FT_Bitmap*         target,\n                   FT_Vector         *atarget_offset,\n                   FT_Color           color );\n</code></pre> <p>Blend a bitmap onto another bitmap, using a given color.</p> input library <p>A handle to a library object.</p> source <p>The source bitmap, which can have any <code>FT_Pixel_Mode</code> format.</p> source_offset <p>The offset vector to the upper left corner of the source bitmap in 26.6 pixel format. It should represent an integer offset; the function will set the lowest six bits to zero to enforce that.</p> color <p>The color used to draw <code>source</code> onto <code>target</code>.</p> inout target <p>A handle to an <code>FT_Bitmap</code> object. It should be either initialized as empty with a call to <code>FT_Bitmap_Init</code>, or it should be of type <code>FT_PIXEL_MODE_BGRA</code>.</p> atarget_offset <p>The offset vector to the upper left corner of the target bitmap in 26.6 pixel format. It should represent an integer offset; the function will set the lowest six bits to zero to enforce that.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function doesn't perform clipping.</p> <p>The bitmap in <code>target</code> gets allocated or reallocated as needed; the vector <code>atarget_offset</code> is updated accordingly.</p> <p>In case of allocation or reallocation, the bitmap's pitch is set to <code>4 * width</code>. Both <code>source</code> and <code>target</code> must have the same bitmap flow (as indicated by the sign of the <code>pitch</code> field).</p> <p><code>source-&gt;buffer</code> and <code>target-&gt;buffer</code> must neither be equal nor overlap.</p> since <p>2.10</p>"},{"location":"ft2-bitmap_handling.html#ft_glyphslot_own_bitmap","title":"FT_GlyphSlot_Own_Bitmap","text":"<p>Defined in FT_BITMAP_H (freetype/ftbitmap.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_GlyphSlot_Own_Bitmap( FT_GlyphSlot  slot );\n</code></pre> <p>Make sure that a glyph slot owns <code>slot-&gt;bitmap</code>.</p> input slot <p>The glyph slot.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function is to be used in combination with <code>FT_Bitmap_Embolden</code>.</p>"},{"location":"ft2-bitmap_handling.html#ft_bitmap_done","title":"FT_Bitmap_Done","text":"<p>Defined in FT_BITMAP_H (freetype/ftbitmap.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Bitmap_Done( FT_Library  library,\n                  FT_Bitmap  *bitmap );\n</code></pre> <p>Destroy a bitmap object initialized with <code>FT_Bitmap_Init</code>.</p> input library <p>A handle to a library object.</p> bitmap <p>The bitmap object to be freed.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The <code>library</code> argument is taken to have access to FreeType's memory handling functions.</p>"},{"location":"ft2-bzip2.html","title":"BZIP2 Streams","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb BZIP2 Streams</p>"},{"location":"ft2-bzip2.html#bzip2-streams","title":"BZIP2 Streams","text":""},{"location":"ft2-bzip2.html#synopsis","title":"Synopsis","text":"<p>In certain builds of the library, bzip2 compression recognition is automatically handled when calling <code>FT_New_Face</code> or <code>FT_Open_Face</code>. This means that if no font driver is capable of handling the raw compressed file, the library will try to open a bzip2 compressed stream from it and re-open the face with it.</p> <p>The stream implementation is very basic and resets the decompression process each time seeking backwards is needed within the stream, which significantly undermines the performance.</p> <p>This section contains the declaration of Bzip2-specific functions.</p>"},{"location":"ft2-bzip2.html#ft_stream_openbzip2","title":"FT_Stream_OpenBzip2","text":"<p>Defined in FT_BZIP2_H (freetype/ftbzip2.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stream_OpenBzip2( FT_Stream  stream,\n                       FT_Stream  source );\n</code></pre> <p>Open a new stream to parse bzip2-compressed font files. This is mainly used to support the compressed <code>*.pcf.bz2</code> fonts that come with XFree86.</p> input stream <p>The target embedding stream.</p> source <p>The source stream.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The source stream must be opened before calling this function.</p> <p>Calling the internal function <code>FT_Stream_Close</code> on the new stream will not call <code>FT_Stream_Close</code> on the source stream. None of the stream objects will be released to the heap.</p> <p>This function may return <code>FT_Err_Unimplemented_Feature</code> if your build of FreeType was not compiled with bzip2 support.</p>"},{"location":"ft2-cache_subsystem.html","title":"Cache Sub-System","text":"<p>FreeType \u00bb Docs \u00bb Cache Sub-System \u00bb Cache Sub-System</p>"},{"location":"ft2-cache_subsystem.html#cache-sub-system","title":"Cache Sub-System","text":""},{"location":"ft2-cache_subsystem.html#synopsis","title":"Synopsis","text":"<p>This section describes the FreeType\u00a02 cache sub-system, which is used to limit the number of concurrently opened <code>FT_Face</code> and <code>FT_Size</code> objects, as well as caching information like character maps and glyph images while limiting their maximum memory usage.</p> <p>Note that all types and functions begin with the <code>FTC_</code> prefix rather than the usual <code>FT_</code> prefix in the rest of FreeType.</p> <p>The cache is highly portable and, thus, doesn't know anything about the fonts installed on your system, or how to access them. Therefore, it requires the following.</p> <ul> <li> <p><code>FTC_FaceID</code>, an arbitrary non-zero value that uniquely identifies available or installed font faces, has to be provided to the cache by the client. Note that the cache only stores and compares these values and doesn't try to interpret them in any way, but they have to be persistent on the client side.</p> </li> <li> <p><code>FTC_Face_Requester</code>, a method to convert an <code>FTC_FaceID</code> into a new <code>FT_Face</code> object when necessary, has to be provided to the cache by the client. The <code>FT_Face</code> object is completely managed by the cache, including its termination through <code>FT_Done_Face</code>. To monitor termination of face objects, the finalizer callback in the <code>generic</code> field of the <code>FT_Face</code> object can be used, which might also be used to store the <code>FTC_FaceID</code> of the face.</p> </li> </ul> <p>Clients are free to map face IDs to anything useful. The most simple usage is, for example, to associate them to a <code>{pathname,face_index}</code> pair that is then used by <code>FTC_Face_Requester</code> to call <code>FT_New_Face</code>. However, more complex schemes are also possible.</p> <p>Note that for the cache to work correctly, the face ID values must be persistent, which means that the contents they point to should not change at runtime, or that their value should not become invalid. If this is unavoidable (e.g., when a font is uninstalled at runtime), you should call <code>FTC_Manager_RemoveFaceID</code> as soon as possible to let the cache get rid of any references to the old <code>FTC_FaceID</code> it may keep internally. Failure to do so will lead to incorrect behaviour or even crashes in <code>FTC_Face_Requester</code>.</p> <p>To use the cache, start with calling <code>FTC_Manager_New</code> to create a new <code>FTC_Manager</code> object, which models a single cache instance. You can then look up <code>FT_Face</code> and <code>FT_Size</code> objects with <code>FTC_Manager_LookupFace</code> and <code>FTC_Manager_LookupSize</code>, respectively, and use them in any FreeType work stream. You can also cache other FreeType objects as follows.</p> <ul> <li> <p>If you want to use the charmap caching, call <code>FTC_CMapCache_New</code>, then later use <code>FTC_CMapCache_Lookup</code> to perform the equivalent of <code>FT_Get_Char_Index</code>, only much faster.</p> </li> <li> <p>If you want to use the <code>FT_Glyph</code> caching, call <code>FTC_ImageCache_New</code>, then later use <code>FTC_ImageCache_Lookup</code> to retrieve the corresponding <code>FT_Glyph</code> objects from the cache.</p> </li> <li> <p>If you need lots of small bitmaps, it is much more memory-efficient to call <code>FTC_SBitCache_New</code> followed by <code>FTC_SBitCache_Lookup</code>. This returns <code>FTC_SBitRec</code> structures, which are used to store small bitmaps directly. (A small bitmap is one whose metrics and dimensions all fit into 8-bit integers).</p> </li> </ul>"},{"location":"ft2-cache_subsystem.html#ftc_manager","title":"FTC_Manager","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_ManagerRec_*  FTC_Manager;\n</code></pre> <p>This object corresponds to one instance of the cache-subsystem. It is used to cache one or more <code>FT_Face</code> objects, along with corresponding <code>FT_Size</code> objects.</p> <p>The manager intentionally limits the total number of opened <code>FT_Face</code> and <code>FT_Size</code> objects to control memory usage. See the <code>max_faces</code> and <code>max_sizes</code> parameters of <code>FTC_Manager_New</code>.</p> <p>The manager is also used to cache \u2018nodes\u2019 of various types while limiting their total memory usage.</p> <p>All limitations are enforced by keeping lists of managed objects in most-recently-used order, and flushing old nodes to make room for new ones.</p>"},{"location":"ft2-cache_subsystem.html#ftc_faceid","title":"FTC_FaceID","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef FT_Pointer  FTC_FaceID;\n</code></pre> <p>An opaque pointer type that is used to identity face objects. The contents of such objects is application-dependent.</p> <p>These pointers are typically used to point to a user-defined structure containing a font file path, and face index.</p> note <p>Never use <code>NULL</code> as a valid <code>FTC_FaceID</code>.</p> <p>Face IDs are passed by the client to the cache manager that calls, when needed, the <code>FTC_Face_Requester</code> to translate them into new <code>FT_Face</code> objects.</p> <p>If the content of a given face ID changes at runtime, or if the value becomes invalid (e.g., when uninstalling a font), you should immediately call <code>FTC_Manager_RemoveFaceID</code> before any other cache function.</p> <p>Failure to do so will result in incorrect behaviour or even memory leaks and crashes.</p>"},{"location":"ft2-cache_subsystem.html#ftc_face_requester","title":"FTC_Face_Requester","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef FT_Error\n  (*FTC_Face_Requester)( FTC_FaceID  face_id,\n                         FT_Library  library,\n                         FT_Pointer  req_data,\n                         FT_Face*    aface );\n</code></pre> <p>A callback function provided by client applications. It is used by the cache manager to translate a given <code>FTC_FaceID</code> into a new valid <code>FT_Face</code> object, on demand.</p> input face_id <p>The face ID to resolve.</p> library <p>A handle to a FreeType library object.</p> req_data <p>Application-provided request data (see note below).</p> output aface <p>A new <code>FT_Face</code> handle.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The third parameter <code>req_data</code> is the same as the one passed by the client when <code>FTC_Manager_New</code> is called.</p> <p>The face requester should not perform funny things on the returned face object, like creating a new <code>FT_Size</code> for it, or setting a transformation through <code>FT_Set_Transform</code>!</p>"},{"location":"ft2-cache_subsystem.html#ftc_manager_new","title":"FTC_Manager_New","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_Manager_New( FT_Library          library,\n                   FT_UInt             max_faces,\n                   FT_UInt             max_sizes,\n                   FT_ULong            max_bytes,\n                   FTC_Face_Requester  requester,\n                   FT_Pointer          req_data,\n                   FTC_Manager        *amanager );\n</code></pre> <p>Create a new cache manager.</p> input library <p>The parent FreeType library handle to use.</p> max_faces <p>Maximum number of opened <code>FT_Face</code> objects managed by this cache instance. Use\u00a00 for defaults.</p> max_sizes <p>Maximum number of opened <code>FT_Size</code> objects managed by this cache instance. Use\u00a00 for defaults.</p> max_bytes <p>Maximum number of bytes to use for cached data nodes. Use\u00a00 for defaults. Note that this value does not account for managed <code>FT_Face</code> and <code>FT_Size</code> objects.</p> requester <p>An application-provided callback used to translate face IDs into real <code>FT_Face</code> objects.</p> req_data <p>A generic pointer that is passed to the requester each time it is called (see <code>FTC_Face_Requester</code>).</p> output amanager <p>A handle to a new manager object. 0\u00a0in case of failure.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-cache_subsystem.html#ftc_manager_reset","title":"FTC_Manager_Reset","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( void )\n  FTC_Manager_Reset( FTC_Manager  manager );\n</code></pre> <p>Empty a given cache manager. This simply gets rid of all the currently cached <code>FT_Face</code> and <code>FT_Size</code> objects within the manager.</p> inout manager <p>A handle to the manager.</p>"},{"location":"ft2-cache_subsystem.html#ftc_manager_done","title":"FTC_Manager_Done","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( void )\n  FTC_Manager_Done( FTC_Manager  manager );\n</code></pre> <p>Destroy a given manager after emptying it.</p> input manager <p>A handle to the target cache manager object.</p>"},{"location":"ft2-cache_subsystem.html#ftc_manager_lookupface","title":"FTC_Manager_LookupFace","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_Manager_LookupFace( FTC_Manager  manager,\n                          FTC_FaceID   face_id,\n                          FT_Face     *aface );\n</code></pre> <p>Retrieve the <code>FT_Face</code> object that corresponds to a given face ID through a cache manager.</p> input manager <p>A handle to the cache manager.</p> face_id <p>The ID of the face object.</p> output aface <p>A handle to the face object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The returned <code>FT_Face</code> object is always owned by the manager. You should never try to discard it yourself.</p> <p>The <code>FT_Face</code> object doesn't necessarily have a current size object (i.e., face-&gt;size can be\u00a00). If you need a specific \u2018font size\u2019, use <code>FTC_Manager_LookupSize</code> instead.</p> <p>Never change the face's transformation matrix (i.e., never call the <code>FT_Set_Transform</code> function) on a returned face! If you need to transform glyphs, do it yourself after glyph loading.</p> <p>When you perform a lookup, out-of-memory errors are detected within the lookup and force incremental flushes of the cache until enough memory is released for the lookup to succeed.</p> <p>If a lookup fails with <code>FT_Err_Out_Of_Memory</code> the cache has already been completely flushed, and still no memory was available for the operation.</p>"},{"location":"ft2-cache_subsystem.html#ftc_manager_lookupsize","title":"FTC_Manager_LookupSize","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_Manager_LookupSize( FTC_Manager  manager,\n                          FTC_Scaler   scaler,\n                          FT_Size     *asize );\n</code></pre> <p>Retrieve the <code>FT_Size</code> object that corresponds to a given <code>FTC_ScalerRec</code> pointer through a cache manager.</p> input manager <p>A handle to the cache manager.</p> scaler <p>A scaler handle.</p> output asize <p>A handle to the size object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The returned <code>FT_Size</code> object is always owned by the manager. You should never try to discard it by yourself.</p> <p>You can access the parent <code>FT_Face</code> object simply as <code>size-&gt;face</code> if you need it. Note that this object is also owned by the manager.</p> note <p>When you perform a lookup, out-of-memory errors are detected within the lookup and force incremental flushes of the cache until enough memory is released for the lookup to succeed.</p> <p>If a lookup fails with <code>FT_Err_Out_Of_Memory</code> the cache has already been completely flushed, and still no memory is available for the operation.</p>"},{"location":"ft2-cache_subsystem.html#ftc_manager_removefaceid","title":"FTC_Manager_RemoveFaceID","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( void )\n  FTC_Manager_RemoveFaceID( FTC_Manager  manager,\n                            FTC_FaceID   face_id );\n</code></pre> <p>A special function used to indicate to the cache manager that a given <code>FTC_FaceID</code> is no longer valid, either because its content changed, or because it was deallocated or uninstalled.</p> input manager <p>The cache manager handle.</p> face_id <p>The <code>FTC_FaceID</code> to be removed.</p> note <p>This function flushes all nodes from the cache corresponding to this <code>face_id</code>, with the exception of nodes with a non-null reference count.</p> <p>Such nodes are however modified internally so as to never appear in later lookups with the same <code>face_id</code> value, and to be immediately destroyed when released by all their users.</p>"},{"location":"ft2-cache_subsystem.html#ftc_node","title":"FTC_Node","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_NodeRec_*  FTC_Node;\n</code></pre> <p>An opaque handle to a cache node object. Each cache node is reference-counted. A node with a count of\u00a00 might be flushed out of a full cache whenever a lookup request is performed.</p> <p>If you look up nodes, you have the ability to \u2018acquire\u2019 them, i.e., to increment their reference count. This will prevent the node from being flushed out of the cache until you explicitly \u2018release\u2019 it (see <code>FTC_Node_Unref</code>).</p> <p>See also <code>FTC_SBitCache_Lookup</code> and <code>FTC_ImageCache_Lookup</code>.</p>"},{"location":"ft2-cache_subsystem.html#ftc_node_unref","title":"FTC_Node_Unref","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( void )\n  FTC_Node_Unref( FTC_Node     node,\n                  FTC_Manager  manager );\n</code></pre> <p>Decrement a cache node's internal reference count. When the count reaches 0, it is not destroyed but becomes eligible for subsequent cache flushes.</p> input node <p>The cache node handle.</p> manager <p>The cache manager handle.</p>"},{"location":"ft2-cache_subsystem.html#ftc_imagecache","title":"FTC_ImageCache","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_ImageCacheRec_*  FTC_ImageCache;\n</code></pre> <p>A handle to a glyph image cache object. They are designed to hold many distinct glyph images while not exceeding a certain memory threshold.</p>"},{"location":"ft2-cache_subsystem.html#ftc_imagecache_new","title":"FTC_ImageCache_New","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_ImageCache_New( FTC_Manager      manager,\n                      FTC_ImageCache  *acache );\n</code></pre> <p>Create a new glyph image cache.</p> input manager <p>The parent manager for the image cache.</p> output acache <p>A handle to the new glyph image cache object.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-cache_subsystem.html#ftc_imagecache_lookup","title":"FTC_ImageCache_Lookup","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_ImageCache_Lookup( FTC_ImageCache  cache,\n                         FTC_ImageType   type,\n                         FT_UInt         gindex,\n                         FT_Glyph       *aglyph,\n                         FTC_Node       *anode );\n</code></pre> <p>Retrieve a given glyph image from a glyph image cache.</p> input cache <p>A handle to the source glyph image cache.</p> type <p>A pointer to a glyph image type descriptor.</p> gindex <p>The glyph index to retrieve.</p> output aglyph <p>The corresponding <code>FT_Glyph</code> object. 0\u00a0in case of failure.</p> anode <p>Used to return the address of the corresponding cache node after incrementing its reference count (see note below).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The returned glyph is owned and managed by the glyph image cache. Never try to transform or discard it manually! You can however create a copy with <code>FT_Glyph_Copy</code> and modify the new one.</p> <p>If <code>anode</code> is not <code>NULL</code>, it receives the address of the cache node containing the glyph image, after increasing its reference count. This ensures that the node (as well as the <code>FT_Glyph</code>) will always be kept in the cache until you call <code>FTC_Node_Unref</code> to \u2018release\u2019 it.</p> <p>If <code>anode</code> is <code>NULL</code>, the cache node is left unchanged, which means that the <code>FT_Glyph</code> could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!</p>"},{"location":"ft2-cache_subsystem.html#ftc_sbit","title":"FTC_SBit","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_SBitRec_*  FTC_SBit;\n</code></pre> <p>A handle to a small bitmap descriptor. See the <code>FTC_SBitRec</code> structure for details.</p>"},{"location":"ft2-cache_subsystem.html#ftc_sbitcache","title":"FTC_SBitCache","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_SBitCacheRec_*  FTC_SBitCache;\n</code></pre> <p>A handle to a small bitmap cache. These are special cache objects used to store small glyph bitmaps (and anti-aliased pixmaps) in a much more efficient way than the traditional glyph image cache implemented by <code>FTC_ImageCache</code>.</p>"},{"location":"ft2-cache_subsystem.html#ftc_sbitcache_new","title":"FTC_SBitCache_New","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_SBitCache_New( FTC_Manager     manager,\n                     FTC_SBitCache  *acache );\n</code></pre> <p>Create a new cache to store small glyph bitmaps.</p> input manager <p>A handle to the source cache manager.</p> output acache <p>A handle to the new sbit cache. <code>NULL</code> in case of error.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-cache_subsystem.html#ftc_sbitcache_lookup","title":"FTC_SBitCache_Lookup","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_SBitCache_Lookup( FTC_SBitCache    cache,\n                        FTC_ImageType    type,\n                        FT_UInt          gindex,\n                        FTC_SBit        *sbit,\n                        FTC_Node        *anode );\n</code></pre> <p>Look up a given small glyph bitmap in a given sbit cache and \u2018lock\u2019 it to prevent its flushing from the cache until needed.</p> input cache <p>A handle to the source sbit cache.</p> type <p>A pointer to the glyph image type descriptor.</p> gindex <p>The glyph index.</p> output sbit <p>A handle to a small bitmap descriptor.</p> anode <p>Used to return the address of the corresponding cache node after incrementing its reference count (see note below).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The small bitmap descriptor and its bit buffer are owned by the cache and should never be freed by the application. They might as well disappear from memory on the next cache lookup, so don't treat them as persistent data.</p> <p>The descriptor's <code>buffer</code> field is set to\u00a00 to indicate a missing glyph bitmap.</p> <p>If <code>anode</code> is not <code>NULL</code>, it receives the address of the cache node containing the bitmap, after increasing its reference count. This ensures that the node (as well as the image) will always be kept in the cache until you call <code>FTC_Node_Unref</code> to \u2018release\u2019 it.</p> <p>If <code>anode</code> is <code>NULL</code>, the cache node is left unchanged, which means that the bitmap could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!</p>"},{"location":"ft2-cache_subsystem.html#ftc_cmapcache","title":"FTC_CMapCache","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_CMapCacheRec_*  FTC_CMapCache;\n</code></pre> <p>An opaque handle used to model a charmap cache. This cache is to hold character codes -&gt; glyph indices mappings.</p>"},{"location":"ft2-cache_subsystem.html#ftc_cmapcache_new","title":"FTC_CMapCache_New","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_CMapCache_New( FTC_Manager     manager,\n                     FTC_CMapCache  *acache );\n</code></pre> <p>Create a new charmap cache.</p> input manager <p>A handle to the cache manager.</p> output acache <p>A new cache handle. <code>NULL</code> in case of error.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Like all other caches, this one will be destroyed with the cache manager.</p>"},{"location":"ft2-cache_subsystem.html#ftc_cmapcache_lookup","title":"FTC_CMapCache_Lookup","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_UInt )\n  FTC_CMapCache_Lookup( FTC_CMapCache  cache,\n                        FTC_FaceID     face_id,\n                        FT_Int         cmap_index,\n                        FT_UInt32      char_code );\n</code></pre> <p>Translate a character code into a glyph index, using the charmap cache.</p> input cache <p>A charmap cache handle.</p> face_id <p>The source face ID.</p> cmap_index <p>The index of the charmap in the source face. Any negative value means to use the cache <code>FT_Face</code>'s default charmap.</p> char_code <p>The character code (in the corresponding charmap).</p> return <p>Glyph index. 0\u00a0means \u2018no glyph\u2019.</p>"},{"location":"ft2-cache_subsystem.html#ftc_scalerrec","title":"FTC_ScalerRec","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct  FTC_ScalerRec_\n  {\n    FTC_FaceID  face_id;\n    FT_UInt     width;\n    FT_UInt     height;\n    FT_Int      pixel;\n    FT_UInt     x_res;\n    FT_UInt     y_res;\n\n  } FTC_ScalerRec;\n</code></pre> <p>A structure used to describe a given character size in either pixels or points to the cache manager. See <code>FTC_Manager_LookupSize</code>.</p> fields face_id <p>The source face ID.</p> width <p>The character width.</p> height <p>The character height.</p> pixel <p>A Boolean. If 1, the <code>width</code> and <code>height</code> fields are interpreted as integer pixel character sizes. Otherwise, they are expressed as 1/64 of points.</p> x_res <p>Only used when <code>pixel</code> is value\u00a00 to indicate the horizontal resolution in dpi.</p> y_res <p>Only used when <code>pixel</code> is value\u00a00 to indicate the vertical resolution in dpi.</p> note <p>This type is mainly used to retrieve <code>FT_Size</code> objects through the cache manager.</p>"},{"location":"ft2-cache_subsystem.html#ftc_scaler","title":"FTC_Scaler","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_ScalerRec_*  FTC_Scaler;\n</code></pre> <p>A handle to an <code>FTC_ScalerRec</code> structure.</p>"},{"location":"ft2-cache_subsystem.html#ftc_imagetyperec","title":"FTC_ImageTypeRec","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct  FTC_ImageTypeRec_\n  {\n    FTC_FaceID  face_id;\n    FT_UInt     width;\n    FT_UInt     height;\n    FT_Int32    flags;\n\n  } FTC_ImageTypeRec;\n</code></pre> <p>A structure used to model the type of images in a glyph cache.</p> fields face_id <p>The face ID.</p> width <p>The width in pixels.</p> height <p>The height in pixels.</p> flags <p>The load flags, as in <code>FT_Load_Glyph</code>.</p>"},{"location":"ft2-cache_subsystem.html#ftc_imagetype","title":"FTC_ImageType","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct FTC_ImageTypeRec_*  FTC_ImageType;\n</code></pre> <p>A handle to an <code>FTC_ImageTypeRec</code> structure.</p>"},{"location":"ft2-cache_subsystem.html#ftc_imagecache_lookupscaler","title":"FTC_ImageCache_LookupScaler","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_ImageCache_LookupScaler( FTC_ImageCache  cache,\n                               FTC_Scaler      scaler,\n                               FT_ULong        load_flags,\n                               FT_UInt         gindex,\n                               FT_Glyph       *aglyph,\n                               FTC_Node       *anode );\n</code></pre> <p>A variant of <code>FTC_ImageCache_Lookup</code> that uses an <code>FTC_ScalerRec</code> to specify the face ID and its size.</p> input cache <p>A handle to the source glyph image cache.</p> scaler <p>A pointer to a scaler descriptor.</p> load_flags <p>The corresponding load flags.</p> gindex <p>The glyph index to retrieve.</p> output aglyph <p>The corresponding <code>FT_Glyph</code> object. 0\u00a0in case of failure.</p> anode <p>Used to return the address of the corresponding cache node after incrementing its reference count (see note below).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The returned glyph is owned and managed by the glyph image cache. Never try to transform or discard it manually! You can however create a copy with <code>FT_Glyph_Copy</code> and modify the new one.</p> <p>If <code>anode</code> is not <code>NULL</code>, it receives the address of the cache node containing the glyph image, after increasing its reference count. This ensures that the node (as well as the <code>FT_Glyph</code>) will always be kept in the cache until you call <code>FTC_Node_Unref</code> to \u2018release\u2019 it.</p> <p>If <code>anode</code> is <code>NULL</code>, the cache node is left unchanged, which means that the <code>FT_Glyph</code> could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!</p> <p>Calls to <code>FT_Set_Char_Size</code> and friends have no effect on cached glyphs; you should always use the FreeType cache API instead.</p>"},{"location":"ft2-cache_subsystem.html#ftc_sbitrec","title":"FTC_SBitRec","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  typedef struct  FTC_SBitRec_\n  {\n    FT_Byte   width;\n    FT_Byte   height;\n    FT_Char   left;\n    FT_Char   top;\n\n    FT_Byte   format;\n    FT_Byte   max_grays;\n    FT_Short  pitch;\n    FT_Char   xadvance;\n    FT_Char   yadvance;\n\n    FT_Byte*  buffer;\n\n  } FTC_SBitRec;\n</code></pre> <p>A very compact structure used to describe a small glyph bitmap.</p> fields width <p>The bitmap width in pixels.</p> height <p>The bitmap height in pixels.</p> left <p>The horizontal distance from the pen position to the left bitmap border (a.k.a. \u2018left side bearing\u2019, or \u2018lsb\u2019).</p> top <p>The vertical distance from the pen position (on the baseline) to the upper bitmap border (a.k.a. \u2018top side bearing\u2019). The distance is positive for upwards y\u00a0coordinates.</p> format <p>The format of the glyph bitmap (monochrome or gray).</p> max_grays <p>Maximum gray level value (in the range 1 to\u00a0255).</p> pitch <p>The number of bytes per bitmap line. May be positive or negative.</p> xadvance <p>The horizontal advance width in pixels.</p> yadvance <p>The vertical advance height in pixels.</p> buffer <p>A pointer to the bitmap pixels.</p>"},{"location":"ft2-cache_subsystem.html#ftc_sbitcache_lookupscaler","title":"FTC_SBitCache_LookupScaler","text":"<p>Defined in FT_CACHE_H (freetype/ftcache.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FTC_SBitCache_LookupScaler( FTC_SBitCache  cache,\n                              FTC_Scaler     scaler,\n                              FT_ULong       load_flags,\n                              FT_UInt        gindex,\n                              FTC_SBit      *sbit,\n                              FTC_Node      *anode );\n</code></pre> <p>A variant of <code>FTC_SBitCache_Lookup</code> that uses an <code>FTC_ScalerRec</code> to specify the face ID and its size.</p> input cache <p>A handle to the source sbit cache.</p> scaler <p>A pointer to the scaler descriptor.</p> load_flags <p>The corresponding load flags.</p> gindex <p>The glyph index.</p> output sbit <p>A handle to a small bitmap descriptor.</p> anode <p>Used to return the address of the corresponding cache node after incrementing its reference count (see note below).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The small bitmap descriptor and its bit buffer are owned by the cache and should never be freed by the application. They might as well disappear from memory on the next cache lookup, so don't treat them as persistent data.</p> <p>The descriptor's <code>buffer</code> field is set to\u00a00 to indicate a missing glyph bitmap.</p> <p>If <code>anode</code> is not <code>NULL</code>, it receives the address of the cache node containing the bitmap, after increasing its reference count. This ensures that the node (as well as the image) will always be kept in the cache until you call <code>FTC_Node_Unref</code> to \u2018release\u2019 it.</p> <p>If <code>anode</code> is <code>NULL</code>, the cache node is left unchanged, which means that the bitmap could be flushed out of the cache on the next call to one of the caching sub-system APIs. Don't assume that it is persistent!</p>"},{"location":"ft2-cff_driver.html","title":"The CFF driver","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb The CFF driver</p>"},{"location":"ft2-cff_driver.html#the-cff-driver","title":"The CFF driver","text":""},{"location":"ft2-cff_driver.html#synopsis","title":"Synopsis","text":"<p>While FreeType's CFF driver doesn't expose API functions by itself, it is possible to control its behaviour with <code>FT_Property_Set</code> and <code>FT_Property_Get</code>.</p> <p>The CFF driver's module name is \u2018cff\u2019.</p> <p>Available properties are <code>hinting-engine</code>, <code>no-stem-darkening</code>, <code>darkening-parameters</code>, and <code>random-seed</code>, as documented in the \u2018Driver properties\u2019 section.</p> <p>Hinting and anti-aliasing principles of the new engine</p> <p>The rasterizer is positioning horizontal features (e.g., ascender height &amp; x-height, or crossbars) on the pixel grid and minimizing the amount of anti-aliasing applied to them, while placing vertical features (vertical stems) on the pixel grid without hinting, thus representing the stem position and weight accurately. Sometimes the vertical stems may be only partially black. In this context, \u2018anti-aliasing\u2019 means that stems are not positioned exactly on pixel borders, causing a fuzzy appearance.</p> <p>There are two principles behind this approach.</p> <p>1) No hinting in the horizontal direction: Unlike \u2018superhinted\u2019 TrueType, which changes glyph widths to accommodate regular inter-glyph spacing, Adobe's approach is \u2018faithful to the design\u2019 in representing both the glyph width and the inter-glyph spacing designed for the font. This makes the screen display as close as it can be to the result one would get with infinite resolution, while preserving what is considered the key characteristics of each glyph. Note that the distances between unhinted and grid-fitted positions at small sizes are comparable to kerning values and thus would be noticeable (and distracting) while reading if hinting were applied.</p> <p>One of the reasons to not hint horizontally is anti-aliasing for LCD screens: The pixel geometry of modern displays supplies three vertical subpixels as the eye moves horizontally across each visible pixel. On devices where we can be certain this characteristic is present a rasterizer can take advantage of the subpixels to add increments of weight. In Western writing systems this turns out to be the more critical direction anyway; the weights and spacing of vertical stems (see above) are central to Armenian, Cyrillic, Greek, and Latin type designs. Even when the rasterizer uses greyscale anti-aliasing instead of color (a necessary compromise when one doesn't know the screen characteristics), the unhinted vertical features preserve the design's weight and spacing much better than aliased type would.</p> <p>2) Alignment in the vertical direction: Weights and spacing along the y\u00a0axis are less critical; what is much more important is the visual alignment of related features (like cap-height and x-height). The sense of alignment for these is enhanced by the sharpness of grid-fit edges, while the cruder vertical resolution (full pixels instead of \u2153 pixels) is less of a problem.</p> <p>On the technical side, horizontal alignment zones for ascender, x-height, and other important height values (traditionally called \u2018blue zones\u2019) as defined in the font are positioned independently, each being rounded to the nearest pixel edge, taking care of overshoot suppression at small sizes, stem darkening, and scaling.</p> <p>Hstems (that is, hint values defined in the font to help align horizontal features) that fall within a blue zone are said to be \u2018captured\u2019 and are aligned to that zone. Uncaptured stems are moved in one of four ways, top edge up or down, bottom edge up or down. Unless there are conflicting hstems, the smallest movement is taken to minimize distortion.</p>"},{"location":"ft2-character_mapping.html","title":"Character Mapping","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Character Mapping</p>"},{"location":"ft2-character_mapping.html#character-mapping","title":"Character Mapping","text":""},{"location":"ft2-character_mapping.html#synopsis","title":"Synopsis","text":"<p>This section holds functions and structures that are related to mapping character input codes to glyph indices.</p> <p>Note that for many scripts the simplistic approach used by FreeType of mapping a single character to a single glyph is not valid or possible! In general, a higher-level library like HarfBuzz or ICU should be used for handling text strings.</p>"},{"location":"ft2-character_mapping.html#ft_charmap","title":"FT_CharMap","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_CharMapRec_*  FT_CharMap;\n</code></pre> <p>A handle to a character map (usually abbreviated to \u2018charmap\u2019). A charmap is used to translate character codes in a given encoding into glyph indexes for its parent's face. Some font formats may provide several charmaps per font.</p> <p>Each face object owns zero or more charmaps, but only one of them can be \u2018active\u2019, providing the data used by <code>FT_Get_Char_Index</code> or <code>FT_Load_Char</code>.</p> <p>The list of available charmaps in a face is available through the <code>face-&gt;num_charmaps</code> and <code>face-&gt;charmaps</code> fields of <code>FT_FaceRec</code>.</p> <p>The currently active charmap is available as <code>face-&gt;charmap</code>. You should call <code>FT_Set_Charmap</code> to change it.</p> note <p>When a new face is created (either through <code>FT_New_Face</code> or <code>FT_Open_Face</code>), the library looks for a Unicode charmap within the list and automatically activates it. If there is no Unicode charmap, FreeType doesn't set an \u2018active\u2019 charmap.</p> also <p>See <code>FT_CharMapRec</code> for the publicly accessible fields of a given character map.</p>"},{"location":"ft2-character_mapping.html#ft_charmaprec","title":"FT_CharMapRec","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_CharMapRec_\n  {\n    FT_Face      face;\n    FT_Encoding  encoding;\n    FT_UShort    platform_id;\n    FT_UShort    encoding_id;\n\n  } FT_CharMapRec;\n</code></pre> <p>The base charmap structure.</p> fields face <p>A handle to the parent face object.</p> encoding <p>An <code>FT_Encoding</code> tag identifying the charmap. Use this with <code>FT_Select_Charmap</code>.</p> platform_id <p>An ID number describing the platform for the following encoding ID. This comes directly from the TrueType specification and gets emulated for other formats.</p> encoding_id <p>A platform-specific encoding number. This also comes from the TrueType specification and gets emulated similarly.</p>"},{"location":"ft2-character_mapping.html#ft_encoding","title":"FT_Encoding","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef enum  FT_Encoding_\n  {\n    FT_ENC_TAG( FT_ENCODING_NONE, 0, 0, 0, 0 ),\n\n    FT_ENC_TAG( FT_ENCODING_MS_SYMBOL, 's', 'y', 'm', 'b' ),\n    FT_ENC_TAG( FT_ENCODING_UNICODE,   'u', 'n', 'i', 'c' ),\n\n    FT_ENC_TAG( FT_ENCODING_SJIS,    's', 'j', 'i', 's' ),\n    FT_ENC_TAG( FT_ENCODING_PRC,     'g', 'b', ' ', ' ' ),\n    FT_ENC_TAG( FT_ENCODING_BIG5,    'b', 'i', 'g', '5' ),\n    FT_ENC_TAG( FT_ENCODING_WANSUNG, 'w', 'a', 'n', 's' ),\n    FT_ENC_TAG( FT_ENCODING_JOHAB,   'j', 'o', 'h', 'a' ),\n\n    /* for backward compatibility */\n    FT_ENCODING_GB2312     = FT_ENCODING_PRC,\n    FT_ENCODING_MS_SJIS    = FT_ENCODING_SJIS,\n    FT_ENCODING_MS_GB2312  = FT_ENCODING_PRC,\n    FT_ENCODING_MS_BIG5    = FT_ENCODING_BIG5,\n    FT_ENCODING_MS_WANSUNG = FT_ENCODING_WANSUNG,\n    FT_ENCODING_MS_JOHAB   = FT_ENCODING_JOHAB,\n\n    FT_ENC_TAG( FT_ENCODING_ADOBE_STANDARD, 'A', 'D', 'O', 'B' ),\n    FT_ENC_TAG( FT_ENCODING_ADOBE_EXPERT,   'A', 'D', 'B', 'E' ),\n    FT_ENC_TAG( FT_ENCODING_ADOBE_CUSTOM,   'A', 'D', 'B', 'C' ),\n    FT_ENC_TAG( FT_ENCODING_ADOBE_LATIN_1,  'l', 'a', 't', '1' ),\n\n    FT_ENC_TAG( FT_ENCODING_OLD_LATIN_2, 'l', 'a', 't', '2' ),\n\n    FT_ENC_TAG( FT_ENCODING_APPLE_ROMAN, 'a', 'r', 'm', 'n' )\n\n  } FT_Encoding;\n\n\n  /* these constants are deprecated; use the corresponding `FT_Encoding` */\n  /* values instead                                                      */\n#define ft_encoding_none            FT_ENCODING_NONE\n#define ft_encoding_unicode         FT_ENCODING_UNICODE\n#define ft_encoding_symbol          FT_ENCODING_MS_SYMBOL\n#define ft_encoding_latin_1         FT_ENCODING_ADOBE_LATIN_1\n#define ft_encoding_latin_2         FT_ENCODING_OLD_LATIN_2\n#define ft_encoding_sjis            FT_ENCODING_SJIS\n#define ft_encoding_gb2312          FT_ENCODING_PRC\n#define ft_encoding_big5            FT_ENCODING_BIG5\n#define ft_encoding_wansung         FT_ENCODING_WANSUNG\n#define ft_encoding_johab           FT_ENCODING_JOHAB\n\n#define ft_encoding_adobe_standard  FT_ENCODING_ADOBE_STANDARD\n#define ft_encoding_adobe_expert    FT_ENCODING_ADOBE_EXPERT\n#define ft_encoding_adobe_custom    FT_ENCODING_ADOBE_CUSTOM\n#define ft_encoding_apple_roman     FT_ENCODING_APPLE_ROMAN\n</code></pre> <p>An enumeration to specify character sets supported by charmaps. Used in the <code>FT_Select_Charmap</code> API function.</p> note <p>Despite the name, this enumeration lists specific character repertoires (i.e., charsets), and not text encoding methods (e.g., UTF-8, UTF-16, etc.).</p> <p>Other encodings might be defined in the future.</p> values FT_ENCODING_NONE <p>The encoding value\u00a00 is reserved for all formats except BDF, PCF, and Windows FNT; see below for more information.</p> FT_ENCODING_UNICODE <p>The Unicode character set. This value covers all versions of the Unicode repertoire, including ASCII and Latin-1. Most fonts include a Unicode charmap, but not all of them.</p> <p>For example, if you want to access Unicode value U+1F028 (and the font contains it), use value 0x1F028 as the input value for <code>FT_Get_Char_Index</code>.</p> FT_ENCODING_MS_SYMBOL <p>Microsoft Symbol encoding, used to encode mathematical symbols and wingdings. For more information, see \u2018https://www.microsoft.com/typography/otspec/recom.htm#non-standard-symbol-fonts\u2019, \u2018http://www.kostis.net/charsets/symbol.htm\u2019, and \u2018http://www.kostis.net/charsets/wingding.htm\u2019.</p> <p>This encoding uses character codes from the PUA (Private Unicode Area) in the range U+F020-U+F0FF.</p> FT_ENCODING_SJIS <p>Shift JIS encoding for Japanese. More info at \u2018https://en.wikipedia.org/wiki/Shift_JIS\u2019. See note on multi-byte encodings below.</p> FT_ENCODING_PRC <p>Corresponds to encoding systems mainly for Simplified Chinese as used in People's Republic of China (PRC). The encoding layout is based on GB\u00a02312 and its supersets GBK and GB\u00a018030.</p> FT_ENCODING_BIG5 <p>Corresponds to an encoding system for Traditional Chinese as used in Taiwan and Hong Kong.</p> FT_ENCODING_WANSUNG <p>Corresponds to the Korean encoding system known as Extended Wansung (MS Windows code page 949). For more information see \u2018https://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WindowsBestFit/bestfit949.txt\u2019.</p> FT_ENCODING_JOHAB <p>The Korean standard character set (KS\u00a0C 5601-1992), which corresponds to MS Windows code page 1361. This character set includes all possible Hangul character combinations.</p> FT_ENCODING_ADOBE_LATIN_1 <p>Corresponds to a Latin-1 encoding as defined in a Type\u00a01 PostScript font. It is limited to 256 character codes.</p> FT_ENCODING_ADOBE_STANDARD <p>Adobe Standard encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.</p> FT_ENCODING_ADOBE_EXPERT <p>Adobe Expert encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.</p> FT_ENCODING_ADOBE_CUSTOM <p>Corresponds to a custom encoding, as found in Type\u00a01, CFF, and OpenType/CFF fonts. It is limited to 256 character codes.</p> FT_ENCODING_APPLE_ROMAN <p>Apple roman encoding. Many TrueType and OpenType fonts contain a charmap for this 8-bit encoding, since older versions of Mac OS are able to use it.</p> FT_ENCODING_OLD_LATIN_2 <p>This value is deprecated and was neither used nor reported by FreeType. Don't use or test for it.</p> FT_ENCODING_MS_SJIS <p>Same as FT_ENCODING_SJIS. Deprecated.</p> FT_ENCODING_MS_GB2312 <p>Same as FT_ENCODING_PRC. Deprecated.</p> FT_ENCODING_MS_BIG5 <p>Same as FT_ENCODING_BIG5. Deprecated.</p> FT_ENCODING_MS_WANSUNG <p>Same as FT_ENCODING_WANSUNG. Deprecated.</p> FT_ENCODING_MS_JOHAB <p>Same as FT_ENCODING_JOHAB. Deprecated.</p> note <p>When loading a font, FreeType makes a Unicode charmap active if possible (either if the font provides such a charmap, or if FreeType can synthesize one from PostScript glyph name dictionaries; in either case, the charmap is tagged with <code>FT_ENCODING_UNICODE</code>). If such a charmap is synthesized, it is placed at the first position of the charmap array.</p> <p>All other encodings are considered legacy and tagged only if explicitly defined in the font file. Otherwise, <code>FT_ENCODING_NONE</code> is used.</p> <p><code>FT_ENCODING_NONE</code> is set by the BDF and PCF drivers if the charmap is neither Unicode nor ISO-8859-1 (otherwise it is set to <code>FT_ENCODING_UNICODE</code>). Use <code>FT_Get_BDF_Charset_ID</code> to find out which encoding is really present. If, for example, the <code>cs_registry</code> field is \u2018KOI8\u2019 and the <code>cs_encoding</code> field is \u2018R\u2019, the font is encoded in KOI8-R.</p> <p><code>FT_ENCODING_NONE</code> is always set (with a single exception) by the winfonts driver. Use <code>FT_Get_WinFNT_Header</code> and examine the <code>charset</code> field of the <code>FT_WinFNT_HeaderRec</code> structure to find out which encoding is really present. For example, <code>FT_WinFNT_ID_CP1251</code> (204) means Windows code page 1251 (for Russian).</p> <p><code>FT_ENCODING_NONE</code> is set if <code>platform_id</code> is <code>TT_PLATFORM_MACINTOSH</code> and <code>encoding_id</code> is not <code>TT_MAC_ID_ROMAN</code> (otherwise it is set to <code>FT_ENCODING_APPLE_ROMAN</code>).</p> <p>If <code>platform_id</code> is <code>TT_PLATFORM_MACINTOSH</code>, use the function <code>FT_Get_CMap_Language_ID</code> to query the Mac language ID that may be needed to be able to distinguish Apple encoding variants. See</p> <p>https://www.unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt</p> <p>to get an idea how to do that. Basically, if the language ID is\u00a00, don't use it, otherwise subtract 1 from the language ID. Then examine <code>encoding_id</code>. If, for example, <code>encoding_id</code> is <code>TT_MAC_ID_ROMAN</code> and the language ID (minus\u00a01) is <code>TT_MAC_LANGID_GREEK</code>, it is the Greek encoding, not Roman. <code>TT_MAC_ID_ARABIC</code> with <code>TT_MAC_LANGID_FARSI</code> means the Farsi variant of the Arabic encoding.</p>"},{"location":"ft2-character_mapping.html#ft_enc_tag","title":"FT_ENC_TAG","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#ifndef FT_ENC_TAG\n\n#define FT_ENC_TAG( value, a, b, c, d )                             \\\n          value = ( ( FT_STATIC_BYTE_CAST( FT_UInt32, a ) &lt;&lt; 24 ) | \\\n                    ( FT_STATIC_BYTE_CAST( FT_UInt32, b ) &lt;&lt; 16 ) | \\\n                    ( FT_STATIC_BYTE_CAST( FT_UInt32, c ) &lt;&lt;  8 ) | \\\n                      FT_STATIC_BYTE_CAST( FT_UInt32, d )         )\n\n#endif /* FT_ENC_TAG */\n</code></pre> <p>This macro converts four-letter tags into an unsigned long. It is used to define \u2018encoding\u2019 identifiers (see <code>FT_Encoding</code>).</p> note <p>Since many 16-bit compilers don't like 32-bit enumerations, you should redefine this macro in case of problems to something like this: <pre><code>  #define FT_ENC_TAG( value, a, b, c, d )  value\n</code></pre></p> <p>to get a simple enumeration without assigning special numbers.</p>"},{"location":"ft2-character_mapping.html#ft_select_charmap","title":"FT_Select_Charmap","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Select_Charmap( FT_Face      face,\n                     FT_Encoding  encoding );\n</code></pre> <p>Select a given charmap by its encoding tag (as listed in <code>freetype.h</code>).</p> inout face <p>A handle to the source face object.</p> input encoding <p>A handle to the selected encoding.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function returns an error if no charmap in the face corresponds to the encoding queried here.</p> <p>Because many fonts contain more than a single cmap for Unicode encoding, this function has some special code to select the one that covers Unicode best (\u2018best\u2019 in the sense that a UCS-4 cmap is preferred to a UCS-2 cmap). It is thus preferable to <code>FT_Set_Charmap</code> in this case.</p>"},{"location":"ft2-character_mapping.html#ft_set_charmap","title":"FT_Set_Charmap","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_Charmap( FT_Face     face,\n                  FT_CharMap  charmap );\n</code></pre> <p>Select a given charmap for character code to glyph index mapping.</p> inout face <p>A handle to the source face object.</p> input charmap <p>A handle to the selected charmap.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function returns an error if the charmap is not part of the face (i.e., if it is not listed in the <code>face-&gt;charmaps</code> table).</p> <p>It also fails if an OpenType type\u00a014 charmap is selected (which doesn't map character codes to glyph indices at all).</p>"},{"location":"ft2-character_mapping.html#ft_get_charmap_index","title":"FT_Get_Charmap_Index","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Int )\n  FT_Get_Charmap_Index( FT_CharMap  charmap );\n</code></pre> <p>Retrieve index of a given charmap.</p> input charmap <p>A handle to a charmap.</p> return <p>The index into the array of character maps within the face to which <code>charmap</code> belongs. If an error occurs, -1 is returned.</p>"},{"location":"ft2-character_mapping.html#ft_get_char_index","title":"FT_Get_Char_Index","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_UInt )\n  FT_Get_Char_Index( FT_Face   face,\n                     FT_ULong  charcode );\n</code></pre> <p>Return the glyph index of a given character code. This function uses the currently selected charmap to do the mapping.</p> input face <p>A handle to the source face object.</p> charcode <p>The character code.</p> return <p>The glyph index. 0\u00a0means \u2018undefined character code\u2019.</p> note <p>If you use FreeType to manipulate the contents of font files directly, be aware that the glyph index returned by this function doesn't always correspond to the internal indices used within the file. This is done to ensure that value\u00a00 always corresponds to the \u2018missing glyph\u2019. If the first glyph is not named \u2018.notdef\u2019, then for Type\u00a01 and Type\u00a042 fonts, \u2018.notdef\u2019 will be moved into the glyph ID\u00a00 position, and whatever was there will be moved to the position \u2018.notdef\u2019 had. For Type\u00a01 fonts, if there is no \u2018.notdef\u2019 glyph at all, then one will be created at index\u00a00 and whatever was there will be moved to the last index \u2013 Type\u00a042 fonts are considered invalid under this condition.</p>"},{"location":"ft2-character_mapping.html#ft_get_first_char","title":"FT_Get_First_Char","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_ULong )\n  FT_Get_First_Char( FT_Face   face,\n                     FT_UInt  *agindex );\n</code></pre> <p>Return the first character code in the current charmap of a given face, together with its corresponding glyph index.</p> input face <p>A handle to the source face object.</p> output agindex <p>Glyph index of first character code. 0\u00a0if charmap is empty.</p> return <p>The charmap's first character code.</p> note <p>You should use this function together with <code>FT_Get_Next_Char</code> to parse all character codes available in a given charmap. The code should look like this: <pre><code>  FT_ULong  charcode;\n  FT_UInt   gindex;\n\n\n  charcode = FT_Get_First_Char( face, &amp;gindex );\n  while ( gindex != 0 )\n  {\n    ... do something with (charcode,gindex) pair ...\n\n    charcode = FT_Get_Next_Char( face, charcode, &amp;gindex );\n  }\n</code></pre></p> <p>Be aware that character codes can have values up to 0xFFFFFFFF; this might happen for non-Unicode or malformed cmaps. However, even with regular Unicode encoding, so-called \u2018last resort fonts\u2019 (using SFNT cmap format 13, see function <code>FT_Get_CMap_Format</code>) normally have entries for all Unicode characters up to 0x1FFFFF, which can cause a lot of iterations.</p> <p>Note that <code>*agindex</code> is set to\u00a00 if the charmap is empty. The result itself can be\u00a00 in two cases: if the charmap is empty or if the value\u00a00 is the first valid character code.</p>"},{"location":"ft2-character_mapping.html#ft_get_next_char","title":"FT_Get_Next_Char","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_ULong )\n  FT_Get_Next_Char( FT_Face    face,\n                    FT_ULong   char_code,\n                    FT_UInt   *agindex );\n</code></pre> <p>Return the next character code in the current charmap of a given face following the value <code>char_code</code>, as well as the corresponding glyph index.</p> input face <p>A handle to the source face object.</p> char_code <p>The starting character code.</p> output agindex <p>Glyph index of next character code. 0\u00a0if charmap is empty.</p> return <p>The charmap's next character code.</p> note <p>You should use this function with <code>FT_Get_First_Char</code> to walk over all character codes available in a given charmap. See the note for that function for a simple code example.</p> <p>Note that <code>*agindex</code> is set to\u00a00 when there are no more codes in the charmap.</p>"},{"location":"ft2-character_mapping.html#ft_load_char","title":"FT_Load_Char","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Load_Char( FT_Face   face,\n                FT_ULong  char_code,\n                FT_Int32  load_flags );\n</code></pre> <p>Load a glyph into the glyph slot of a face object, accessed by its character code.</p> inout face <p>A handle to a target face object where the glyph is loaded.</p> input char_code <p>The glyph's character code, according to the current charmap used in the face.</p> load_flags <p>A flag indicating what to load for this glyph. The <code>FT_LOAD_XXX</code> constants can be used to control the glyph loading process (e.g., whether the outline should be scaled, whether to load bitmaps or not, whether to hint the outline, etc).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function simply calls <code>FT_Get_Char_Index</code> and <code>FT_Load_Glyph</code>.</p> <p>Many fonts contain glyphs that can't be loaded by this function since its glyph indices are not listed in any of the font's charmaps.</p> <p>If no active cmap is set up (i.e., <code>face-&gt;charmap</code> is zero), the call to <code>FT_Get_Char_Index</code> is omitted, and the function behaves identically to <code>FT_Load_Glyph</code>.</p>"},{"location":"ft2-cid_fonts.html","title":"CID Fonts","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb CID Fonts</p>"},{"location":"ft2-cid_fonts.html#cid-fonts","title":"CID Fonts","text":""},{"location":"ft2-cid_fonts.html#synopsis","title":"Synopsis","text":"<p>This section contains the declaration of CID-keyed font-specific functions.</p>"},{"location":"ft2-cid_fonts.html#ft_get_cid_registry_ordering_supplement","title":"FT_Get_CID_Registry_Ordering_Supplement","text":"<p>Defined in FT_CID_H (freetype/ftcid.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_CID_Registry_Ordering_Supplement( FT_Face       face,\n                                           const char*  *registry,\n                                           const char*  *ordering,\n                                           FT_Int       *supplement );\n</code></pre> <p>Retrieve the Registry/Ordering/Supplement triple (also known as the \"R/O/S\") from a CID-keyed font.</p> input face <p>A handle to the input face.</p> output registry <p>The registry, as a C\u00a0string, owned by the face.</p> ordering <p>The ordering, as a C\u00a0string, owned by the face.</p> supplement <p>The supplement.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function only works with CID faces, returning an error otherwise.</p> since <p>2.3.6</p>"},{"location":"ft2-cid_fonts.html#ft_get_cid_is_internally_cid_keyed","title":"FT_Get_CID_Is_Internally_CID_Keyed","text":"<p>Defined in FT_CID_H (freetype/ftcid.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_CID_Is_Internally_CID_Keyed( FT_Face   face,\n                                      FT_Bool  *is_cid );\n</code></pre> <p>Retrieve the type of the input face, CID keyed or not. In contrast to the <code>FT_IS_CID_KEYED</code> macro this function returns successfully also for CID-keyed fonts in an SFNT wrapper.</p> input face <p>A handle to the input face.</p> output is_cid <p>The type of the face as an <code>FT_Bool</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function only works with CID faces and OpenType fonts, returning an error otherwise.</p> since <p>2.3.9</p>"},{"location":"ft2-cid_fonts.html#ft_get_cid_from_glyph_index","title":"FT_Get_CID_From_Glyph_Index","text":"<p>Defined in FT_CID_H (freetype/ftcid.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_CID_From_Glyph_Index( FT_Face   face,\n                               FT_UInt   glyph_index,\n                               FT_UInt  *cid );\n</code></pre> <p>Retrieve the CID of the input glyph index.</p> input face <p>A handle to the input face.</p> glyph_index <p>The input glyph index.</p> output cid <p>The CID as an <code>FT_UInt</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function only works with CID faces and OpenType fonts, returning an error otherwise.</p> since <p>2.3.9</p>"},{"location":"ft2-color_management.html","title":"Glyph Color Management","text":"<p>FreeType \u00bb Docs \u00bb Extended API \u00bb Glyph Color Management</p>"},{"location":"ft2-color_management.html#glyph-color-management","title":"Glyph Color Management","text":""},{"location":"ft2-color_management.html#synopsis","title":"Synopsis","text":"<p>The functions described here allow access and manipulation of color palette entries in OpenType's \u2018CPAL\u2019 tables.</p>"},{"location":"ft2-color_management.html#ft_color","title":"FT_Color","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_Color_\n  {\n    FT_Byte  blue;\n    FT_Byte  green;\n    FT_Byte  red;\n    FT_Byte  alpha;\n\n  } FT_Color;\n</code></pre> <p>This structure models a BGRA color value of a \u2018CPAL\u2019 palette entry.</p> <p>The used color space is sRGB; the colors are not pre-multiplied, and alpha values must be explicitly set.</p> fields blue <p>Blue value.</p> green <p>Green value.</p> red <p>Red value.</p> alpha <p>Alpha value, giving the red, green, and blue color's opacity.</p> since <p>2.10</p>"},{"location":"ft2-color_management.html#ft_palette_xxx","title":"FT_PALETTE_XXX","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>#define FT_PALETTE_FOR_LIGHT_BACKGROUND  0x01\n#define FT_PALETTE_FOR_DARK_BACKGROUND   0x02\n</code></pre> <p>A list of bit field constants used in the <code>palette_flags</code> array of the <code>FT_Palette_Data</code> structure to indicate for which background a palette with a given index is usable.</p> values FT_PALETTE_FOR_LIGHT_BACKGROUND <p>The palette is appropriate to use when displaying the font on a light background such as white.</p> FT_PALETTE_FOR_DARK_BACKGROUND <p>The palette is appropriate to use when displaying the font on a dark background such as black.</p> since <p>2.10</p>"},{"location":"ft2-color_management.html#ft_palette_data","title":"FT_Palette_Data","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_Palette_Data_ {\n    FT_UShort         num_palettes;\n    const FT_UShort*  palette_name_ids;\n    const FT_UShort*  palette_flags;\n\n    FT_UShort         num_palette_entries;\n    const FT_UShort*  palette_entry_name_ids;\n\n  } FT_Palette_Data;\n</code></pre> <p>This structure holds the data of the \u2018CPAL\u2019 table.</p> fields num_palettes <p>The number of palettes.</p> palette_name_ids <p>An optional read-only array of palette name IDs with <code>num_palettes</code> elements, corresponding to entries like \u2018dark\u2019 or \u2018light\u2019 in the font's \u2018name\u2019 table.</p> <p>An empty name ID in the \u2018CPAL\u2019 table gets represented as value 0xFFFF.</p> <p><code>NULL</code> if the font's \u2018CPAL\u2019 table doesn't contain appropriate data.</p> palette_flags <p>An optional read-only array of palette flags with <code>num_palettes</code> elements. Possible values are an ORed combination of <code>FT_PALETTE_FOR_LIGHT_BACKGROUND</code> and <code>FT_PALETTE_FOR_DARK_BACKGROUND</code>.</p> <p><code>NULL</code> if the font's \u2018CPAL\u2019 table doesn't contain appropriate data.</p> num_palette_entries <p>The number of entries in a single palette. All palettes have the same size.</p> palette_entry_name_ids <p>An optional read-only array of palette entry name IDs with <code>num_palette_entries</code>. In each palette, entries with the same index have the same function. For example, index\u00a00 might correspond to string \u2018outline\u2019 in the font's \u2018name\u2019 table to indicate that this palette entry is used for outlines, index\u00a01 might correspond to \u2018fill\u2019 to indicate the filling color palette entry, etc.</p> <p>An empty entry name ID in the \u2018CPAL\u2019 table gets represented as value 0xFFFF.</p> <p><code>NULL</code> if the font's \u2018CPAL\u2019 table doesn't contain appropriate data.</p> note <p>Use function <code>FT_Get_Sfnt_Name</code> to map name IDs and entry name IDs to name strings.</p> <p>Use function <code>FT_Palette_Select</code> to get the colors associated with a palette entry.</p> since <p>2.10</p>"},{"location":"ft2-color_management.html#ft_palette_data_get","title":"FT_Palette_Data_Get","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Palette_Data_Get( FT_Face           face,\n                       FT_Palette_Data  *apalette );\n</code></pre> <p>Retrieve the face's color palette data.</p> input face <p>The source face handle.</p> output apalette <p>A pointer to an <code>FT_Palette_Data</code> structure.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>All arrays in the returned <code>FT_Palette_Data</code> structure are read-only.</p> <p>This function always returns an error if the config macro <code>TT_CONFIG_OPTION_COLOR_LAYERS</code> is not defined in <code>ftoption.h</code>.</p> since <p>2.10</p>"},{"location":"ft2-color_management.html#ft_palette_select","title":"FT_Palette_Select","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Palette_Select( FT_Face     face,\n                     FT_UShort   palette_index,\n                     FT_Color*  *apalette );\n</code></pre> <p>This function has two purposes.</p> <p>(1) It activates a palette for rendering color glyphs, and</p> <p>(2) it retrieves all (unmodified) color entries of this palette. This function returns a read-write array, which means that a calling application can modify the palette entries on demand.</p> <p>A corollary of (2) is that calling the function, then modifying some values, then calling the function again with the same arguments resets all color entries to the original \u2018CPAL\u2019 values; all user modifications are lost.</p> input face <p>The source face handle.</p> palette_index <p>The palette index.</p> output apalette <p>An array of color entries for a palette with index <code>palette_index</code>, having <code>num_palette_entries</code> elements (as found in the <code>FT_Palette_Data</code> structure). If <code>apalette</code> is set to <code>NULL</code>, no array gets returned (and no color entries can be modified).</p> <p>In case the font doesn't support color palettes, <code>NULL</code> is returned.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The array pointed to by <code>apalette_entries</code> is owned and managed by FreeType.</p> <p>This function always returns an error if the config macro <code>TT_CONFIG_OPTION_COLOR_LAYERS</code> is not defined in <code>ftoption.h</code>.</p> since <p>2.10</p>"},{"location":"ft2-color_management.html#ft_palette_set_foreground_color","title":"FT_Palette_Set_Foreground_Color","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Palette_Set_Foreground_Color( FT_Face   face,\n                                   FT_Color  foreground_color );\n</code></pre> <p>\u2018COLR\u2019 uses palette index 0xFFFF to indicate a \u2018text foreground color\u2019. This function sets this value.</p> input face <p>The source face handle.</p> foreground_color <p>An <code>FT_Color</code> structure to define the text foreground color.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If this function isn't called, the text foreground color is set to white opaque (BGRA value 0xFFFFFFFF) if <code>FT_PALETTE_FOR_DARK_BACKGROUND</code> is present for the current palette, and black opaque (BGRA value 0x000000FF) otherwise, including the case that no palette types are available in the \u2018CPAL\u2019 table.</p> <p>This function always returns an error if the config macro <code>TT_CONFIG_OPTION_COLOR_LAYERS</code> is not defined in <code>ftoption.h</code>.</p> since <p>2.10</p>"},{"location":"ft2-computations.html","title":"Computations","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb Computations</p>"},{"location":"ft2-computations.html#computations","title":"Computations","text":""},{"location":"ft2-computations.html#synopsis","title":"Synopsis","text":"<p>This section contains various functions used to perform computations on 16.16 fixed-point numbers or 2D vectors. FreeType does not use floating-point data types.</p> <p>Attention: Most arithmetic functions take <code>FT_Long</code> as arguments. For historical reasons, FreeType was designed under the assumption that <code>FT_Long</code> is a 32-bit integer; results can thus be undefined if the arguments don't fit into 32 bits.</p>"},{"location":"ft2-computations.html#ft_muldiv","title":"FT_MulDiv","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Long )\n  FT_MulDiv( FT_Long  a,\n             FT_Long  b,\n             FT_Long  c );\n</code></pre> <p>Compute <code>(a*b)/c</code> with maximum accuracy, using a 64-bit intermediate integer whenever necessary.</p> <p>This function isn't necessarily as fast as some processor-specific operations, but is at least completely portable.</p> input a <p>The first multiplier.</p> b <p>The second multiplier.</p> c <p>The divisor.</p> return <p>The result of <code>(a*b)/c</code>. This function never traps when trying to divide by zero; it simply returns \u2018MaxInt\u2019 or \u2018MinInt\u2019 depending on the signs of <code>a</code> and <code>b</code>.</p>"},{"location":"ft2-computations.html#ft_mulfix","title":"FT_MulFix","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Long )\n  FT_MulFix( FT_Long  a,\n             FT_Long  b );\n</code></pre> <p>Compute <code>(a*b)/0x10000</code> with maximum accuracy. Its main use is to multiply a given value by a 16.16 fixed-point factor.</p> input a <p>The first multiplier.</p> b <p>The second multiplier. Use a 16.16 factor here whenever possible (see note below).</p> return <p>The result of <code>(a*b)/0x10000</code>.</p> note <p>This function has been optimized for the case where the absolute value of <code>a</code> is less than 2048, and <code>b</code> is a 16.16 scaling factor. As this happens mainly when scaling from notional units to fractional pixels in FreeType, it resulted in noticeable speed improvements between versions 2.x and 1.x.</p> <p>As a conclusion, always try to place a 16.16 factor as the second argument of this function; this can make a great difference.</p>"},{"location":"ft2-computations.html#ft_divfix","title":"FT_DivFix","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Long )\n  FT_DivFix( FT_Long  a,\n             FT_Long  b );\n</code></pre> <p>Compute <code>(a*0x10000)/b</code> with maximum accuracy. Its main use is to divide a given value by a 16.16 fixed-point factor.</p> input a <p>The numerator.</p> b <p>The denominator. Use a 16.16 factor here.</p> return <p>The result of <code>(a*0x10000)/b</code>.</p>"},{"location":"ft2-computations.html#ft_roundfix","title":"FT_RoundFix","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Fixed )\n  FT_RoundFix( FT_Fixed  a );\n</code></pre> <p>Round a 16.16 fixed number.</p> input a <p>The number to be rounded.</p> return <p><code>a</code> rounded to the nearest 16.16 fixed integer, halfway cases away from zero.</p> note <p>The function uses wrap-around arithmetic.</p>"},{"location":"ft2-computations.html#ft_ceilfix","title":"FT_CeilFix","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Fixed )\n  FT_CeilFix( FT_Fixed  a );\n</code></pre> <p>Compute the smallest following integer of a 16.16 fixed number.</p> input a <p>The number for which the ceiling function is to be computed.</p> return <p><code>a</code> rounded towards plus infinity.</p> note <p>The function uses wrap-around arithmetic.</p>"},{"location":"ft2-computations.html#ft_floorfix","title":"FT_FloorFix","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Fixed )\n  FT_FloorFix( FT_Fixed  a );\n</code></pre> <p>Compute the largest previous integer of a 16.16 fixed number.</p> input a <p>The number for which the floor function is to be computed.</p> return <p><code>a</code> rounded towards minus infinity.</p>"},{"location":"ft2-computations.html#ft_vector_transform","title":"FT_Vector_Transform","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Vector_Transform( FT_Vector*        vector,\n                       const FT_Matrix*  matrix );\n</code></pre> <p>Transform a single vector through a 2x2 matrix.</p> inout vector <p>The target vector to transform.</p> input matrix <p>A pointer to the source 2x2 matrix.</p> note <p>The result is undefined if either <code>vector</code> or <code>matrix</code> is invalid.</p>"},{"location":"ft2-computations.html#ft_matrix_multiply","title":"FT_Matrix_Multiply","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Matrix_Multiply( const FT_Matrix*  a,\n                      FT_Matrix*        b );\n</code></pre> <p>Perform the matrix operation <code>b = a*b</code>.</p> input a <p>A pointer to matrix <code>a</code>.</p> inout b <p>A pointer to matrix <code>b</code>.</p> note <p>The result is undefined if either <code>a</code> or <code>b</code> is zero.</p> <p>Since the function uses wrap-around arithmetic, results become meaningless if the arguments are very large.</p>"},{"location":"ft2-computations.html#ft_matrix_invert","title":"FT_Matrix_Invert","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Matrix_Invert( FT_Matrix*  matrix );\n</code></pre> <p>Invert a 2x2 matrix. Return an error if it can't be inverted.</p> inout matrix <p>A pointer to the target matrix. Remains untouched in case of error.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-computations.html#ft_angle","title":"FT_Angle","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  typedef FT_Fixed  FT_Angle;\n</code></pre> <p>This type is used to model angle values in FreeType. Note that the angle is a 16.16 fixed-point value expressed in degrees.</p>"},{"location":"ft2-computations.html#ft_angle_pi","title":"FT_ANGLE_PI","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>#define FT_ANGLE_PI  ( 180L &lt;&lt; 16 )\n</code></pre> <p>The angle pi expressed in <code>FT_Angle</code> units.</p>"},{"location":"ft2-computations.html#ft_angle_2pi","title":"FT_ANGLE_2PI","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>#define FT_ANGLE_2PI  ( FT_ANGLE_PI * 2 )\n</code></pre> <p>The angle 2*pi expressed in <code>FT_Angle</code> units.</p>"},{"location":"ft2-computations.html#ft_angle_pi2","title":"FT_ANGLE_PI2","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>#define FT_ANGLE_PI2  ( FT_ANGLE_PI / 2 )\n</code></pre> <p>The angle pi/2 expressed in <code>FT_Angle</code> units.</p>"},{"location":"ft2-computations.html#ft_angle_pi4","title":"FT_ANGLE_PI4","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>#define FT_ANGLE_PI4  ( FT_ANGLE_PI / 4 )\n</code></pre> <p>The angle pi/4 expressed in <code>FT_Angle</code> units.</p>"},{"location":"ft2-computations.html#ft_sin","title":"FT_Sin","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( FT_Fixed )\n  FT_Sin( FT_Angle  angle );\n</code></pre> <p>Return the sinus of a given angle in fixed-point format.</p> input angle <p>The input angle.</p> return <p>The sinus value.</p> note <p>If you need both the sinus and cosinus for a given angle, use the function <code>FT_Vector_Unit</code>.</p>"},{"location":"ft2-computations.html#ft_cos","title":"FT_Cos","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( FT_Fixed )\n  FT_Cos( FT_Angle  angle );\n</code></pre> <p>Return the cosinus of a given angle in fixed-point format.</p> input angle <p>The input angle.</p> return <p>The cosinus value.</p> note <p>If you need both the sinus and cosinus for a given angle, use the function <code>FT_Vector_Unit</code>.</p>"},{"location":"ft2-computations.html#ft_tan","title":"FT_Tan","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( FT_Fixed )\n  FT_Tan( FT_Angle  angle );\n</code></pre> <p>Return the tangent of a given angle in fixed-point format.</p> input angle <p>The input angle.</p> return <p>The tangent value.</p>"},{"location":"ft2-computations.html#ft_atan2","title":"FT_Atan2","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( FT_Angle )\n  FT_Atan2( FT_Fixed  x,\n            FT_Fixed  y );\n</code></pre> <p>Return the arc-tangent corresponding to a given vector (x,y) in the 2d plane.</p> input x <p>The horizontal vector coordinate.</p> y <p>The vertical vector coordinate.</p> return <p>The arc-tangent value (i.e. angle).</p>"},{"location":"ft2-computations.html#ft_angle_diff","title":"FT_Angle_Diff","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( FT_Angle )\n  FT_Angle_Diff( FT_Angle  angle1,\n                 FT_Angle  angle2 );\n</code></pre> <p>Return the difference between two angles. The result is always constrained to the ]-PI..PI] interval.</p> input angle1 <p>First angle.</p> angle2 <p>Second angle.</p> return <p>Constrained value of <code>angle2-angle1</code>.</p>"},{"location":"ft2-computations.html#ft_vector_unit","title":"FT_Vector_Unit","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Vector_Unit( FT_Vector*  vec,\n                  FT_Angle    angle );\n</code></pre> <p>Return the unit vector corresponding to a given angle. After the call, the value of <code>vec.x</code> will be <code>cos(angle)</code>, and the value of <code>vec.y</code> will be <code>sin(angle)</code>.</p> <p>This function is useful to retrieve both the sinus and cosinus of a given angle quickly.</p> output vec <p>The address of target vector.</p> input angle <p>The input angle.</p>"},{"location":"ft2-computations.html#ft_vector_rotate","title":"FT_Vector_Rotate","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Vector_Rotate( FT_Vector*  vec,\n                    FT_Angle    angle );\n</code></pre> <p>Rotate a vector by a given angle.</p> inout vec <p>The address of target vector.</p> input angle <p>The input angle.</p>"},{"location":"ft2-computations.html#ft_vector_length","title":"FT_Vector_Length","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( FT_Fixed )\n  FT_Vector_Length( FT_Vector*  vec );\n</code></pre> <p>Return the length of a given vector.</p> input vec <p>The address of target vector.</p> return <p>The vector length, expressed in the same units that the original vector coordinates.</p>"},{"location":"ft2-computations.html#ft_vector_polarize","title":"FT_Vector_Polarize","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Vector_Polarize( FT_Vector*  vec,\n                      FT_Fixed   *length,\n                      FT_Angle   *angle );\n</code></pre> <p>Compute both the length and angle of a given vector.</p> input vec <p>The address of source vector.</p> output length <p>The vector length.</p> angle <p>The vector angle.</p>"},{"location":"ft2-computations.html#ft_vector_from_polar","title":"FT_Vector_From_Polar","text":"<p>Defined in FT_TRIGONOMETRY_H (freetype/fttrigon.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Vector_From_Polar( FT_Vector*  vec,\n                        FT_Fixed    length,\n                        FT_Angle    angle );\n</code></pre> <p>Compute vector coordinates from a length and angle.</p> output vec <p>The address of source vector.</p> input length <p>The vector length.</p> angle <p>The vector angle.</p>"},{"location":"ft2-debugging_apis.html","title":"External Debugging APIs","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb External Debugging APIs</p>"},{"location":"ft2-debugging_apis.html#external-debugging-apis","title":"External Debugging APIs","text":""},{"location":"ft2-debugging_apis.html#synopsis","title":"Synopsis","text":"<p>This section contains the declarations of public functions that enables fine control of what the <code>FT_DEBUG_LOGGING</code> macro outputs.</p>"},{"location":"ft2-debugging_apis.html#ft_trace_set_level","title":"FT_Trace_Set_Level","text":"<pre><code>  FT_EXPORT( void )\n  FT_Trace_Set_Level( const char*  tracing_level );\n</code></pre> <p>Change the levels of tracing components of FreeType at run time.</p> input tracing_level <p>New tracing value.</p> example <p>The following call makes FreeType trace everything but the \u2018memory\u2019 component. <pre><code>FT_Trace_Set_Level( \"any:7 memory:0\" );\n</code></pre></p> note <p>This function does nothing if compilation option <code>FT_DEBUG_LOGGING</code> isn't set.</p> since <p>2.11</p>"},{"location":"ft2-debugging_apis.html#ft_trace_set_default_level","title":"FT_Trace_Set_Default_Level","text":"<pre><code>  FT_EXPORT( void )\n  FT_Trace_Set_Default_Level( void );\n</code></pre> <p>Reset tracing value of FreeType's components to the default value (i.e., to the value of the <code>FT2_DEBUG</code> environment value or to NULL if <code>FT2_DEBUG</code> is not set).</p> note <p>This function does nothing if compilation option <code>FT_DEBUG_LOGGING</code> isn't set.</p> since <p>2.11</p>"},{"location":"ft2-debugging_apis.html#ft_custom_log_handler","title":"FT_Custom_Log_Handler","text":"<pre><code>  typedef void\n  (*FT_Custom_Log_Handler)( const char*  ft_component,\n                            const char*  fmt,\n                            va_list      args );\n</code></pre> <p>A function typedef that is used to handle the logging of tracing and debug messages on a file system.</p> input ft_component <p>The name of <code>FT_COMPONENT</code> from which the current debug or error message is produced.</p> fmt <p>Actual debug or tracing message.</p> args <p>Arguments of debug or tracing messages.</p> since <p>2.11</p>"},{"location":"ft2-debugging_apis.html#ft_set_log_handler","title":"FT_Set_Log_Handler","text":"<pre><code>  FT_EXPORT( void )\n  FT_Set_Log_Handler( FT_Custom_Log_Handler  handler );\n</code></pre> <p>A function to set a custom log handler.</p> input handler <p>New logging function.</p> note <p>This function does nothing if compilation option <code>FT_DEBUG_LOGGING</code> isn't set.</p> since <p>2.11</p>"},{"location":"ft2-debugging_apis.html#ft_set_default_log_handler","title":"FT_Set_Default_Log_Handler","text":"<pre><code>  FT_EXPORT( void )\n  FT_Set_Default_Log_Handler( void );\n</code></pre> <p>A function to undo the effect of <code>FT_Set_Log_Handler</code>, resetting the log handler to FreeType's built-in version.</p> note <p>This function does nothing if compilation option <code>FT_DEBUG_LOGGING</code> isn't set.</p> since <p>2.11</p>"},{"location":"ft2-error_code_values.html","title":"Error Code Values","text":"<p>FreeType \u00bb Docs \u00bb Error Codes \u00bb Error Code Values</p>"},{"location":"ft2-error_code_values.html#error-code-values","title":"Error Code Values","text":""},{"location":"ft2-error_code_values.html#synopsis","title":"Synopsis","text":"<p>The list below is taken verbatim from the file <code>fterrdef.h</code> (loaded automatically by including <code>FT_FREETYPE_H</code>). The first argument of the <code>FT_ERROR_DEF_</code> macro is the error label; by default, the prefix <code>FT_Err_</code> gets added so that you get error names like <code>FT_Err_Cannot_Open_Resource</code>. The second argument is the error code, and the last argument an error string, which is not used by FreeType.</p> <p>Within your application you should only use error names and never its numeric values! The latter might (and actually do) change in forthcoming FreeType versions.</p> <p>Macro <code>FT_NOERRORDEF_</code> defines <code>FT_Err_Ok</code>, which is always zero. See the \u2018Error Enumerations\u2019 subsection how to automatically generate a list of error strings.</p>"},{"location":"ft2-error_code_values.html#ft_err_xxx","title":"FT_Err_XXX","text":"<pre><code>  /* generic errors */\n\n  FT_NOERRORDEF_( Ok,                                        0x00,\n                  \"no error\" )\n\n  FT_ERRORDEF_( Cannot_Open_Resource,                        0x01,\n                \"cannot open resource\" )\n  FT_ERRORDEF_( Unknown_File_Format,                         0x02,\n                \"unknown file format\" )\n  FT_ERRORDEF_( Invalid_File_Format,                         0x03,\n                \"broken file\" )\n  FT_ERRORDEF_( Invalid_Version,                             0x04,\n                \"invalid FreeType version\" )\n  FT_ERRORDEF_( Lower_Module_Version,                        0x05,\n                \"module version is too low\" )\n  FT_ERRORDEF_( Invalid_Argument,                            0x06,\n                \"invalid argument\" )\n  FT_ERRORDEF_( Unimplemented_Feature,                       0x07,\n                \"unimplemented feature\" )\n  FT_ERRORDEF_( Invalid_Table,                               0x08,\n                \"broken table\" )\n  FT_ERRORDEF_( Invalid_Offset,                              0x09,\n                \"broken offset within table\" )\n  FT_ERRORDEF_( Array_Too_Large,                             0x0A,\n                \"array allocation size too large\" )\n  FT_ERRORDEF_( Missing_Module,                              0x0B,\n                \"missing module\" )\n  FT_ERRORDEF_( Missing_Property,                            0x0C,\n                \"missing property\" )\n\n  /* glyph/character errors */\n\n  FT_ERRORDEF_( Invalid_Glyph_Index,                         0x10,\n                \"invalid glyph index\" )\n  FT_ERRORDEF_( Invalid_Character_Code,                      0x11,\n                \"invalid character code\" )\n  FT_ERRORDEF_( Invalid_Glyph_Format,                        0x12,\n                \"unsupported glyph image format\" )\n  FT_ERRORDEF_( Cannot_Render_Glyph,                         0x13,\n                \"cannot render this glyph format\" )\n  FT_ERRORDEF_( Invalid_Outline,                             0x14,\n                \"invalid outline\" )\n  FT_ERRORDEF_( Invalid_Composite,                           0x15,\n                \"invalid composite glyph\" )\n  FT_ERRORDEF_( Too_Many_Hints,                              0x16,\n                \"too many hints\" )\n  FT_ERRORDEF_( Invalid_Pixel_Size,                          0x17,\n                \"invalid pixel size\" )\n  FT_ERRORDEF_( Invalid_SVG_Document,                        0x18,\n                \"invalid SVG document\" )\n\n  /* handle errors */\n\n  FT_ERRORDEF_( Invalid_Handle,                              0x20,\n                \"invalid object handle\" )\n  FT_ERRORDEF_( Invalid_Library_Handle,                      0x21,\n                \"invalid library handle\" )\n  FT_ERRORDEF_( Invalid_Driver_Handle,                       0x22,\n                \"invalid module handle\" )\n  FT_ERRORDEF_( Invalid_Face_Handle,                         0x23,\n                \"invalid face handle\" )\n  FT_ERRORDEF_( Invalid_Size_Handle,                         0x24,\n                \"invalid size handle\" )\n  FT_ERRORDEF_( Invalid_Slot_Handle,                         0x25,\n                \"invalid glyph slot handle\" )\n  FT_ERRORDEF_( Invalid_CharMap_Handle,                      0x26,\n                \"invalid charmap handle\" )\n  FT_ERRORDEF_( Invalid_Cache_Handle,                        0x27,\n                \"invalid cache manager handle\" )\n  FT_ERRORDEF_( Invalid_Stream_Handle,                       0x28,\n                \"invalid stream handle\" )\n\n  /* driver errors */\n\n  FT_ERRORDEF_( Too_Many_Drivers,                            0x30,\n                \"too many modules\" )\n  FT_ERRORDEF_( Too_Many_Extensions,                         0x31,\n                \"too many extensions\" )\n\n  /* memory errors */\n\n  FT_ERRORDEF_( Out_Of_Memory,                               0x40,\n                \"out of memory\" )\n  FT_ERRORDEF_( Unlisted_Object,                             0x41,\n                \"unlisted object\" )\n\n  /* stream errors */\n\n  FT_ERRORDEF_( Cannot_Open_Stream,                          0x51,\n                \"cannot open stream\" )\n  FT_ERRORDEF_( Invalid_Stream_Seek,                         0x52,\n                \"invalid stream seek\" )\n  FT_ERRORDEF_( Invalid_Stream_Skip,                         0x53,\n                \"invalid stream skip\" )\n  FT_ERRORDEF_( Invalid_Stream_Read,                         0x54,\n                \"invalid stream read\" )\n  FT_ERRORDEF_( Invalid_Stream_Operation,                    0x55,\n                \"invalid stream operation\" )\n  FT_ERRORDEF_( Invalid_Frame_Operation,                     0x56,\n                \"invalid frame operation\" )\n  FT_ERRORDEF_( Nested_Frame_Access,                         0x57,\n                \"nested frame access\" )\n  FT_ERRORDEF_( Invalid_Frame_Read,                          0x58,\n                \"invalid frame read\" )\n\n  /* raster errors */\n\n  FT_ERRORDEF_( Raster_Uninitialized,                        0x60,\n                \"raster uninitialized\" )\n  FT_ERRORDEF_( Raster_Corrupted,                            0x61,\n                \"raster corrupted\" )\n  FT_ERRORDEF_( Raster_Overflow,                             0x62,\n                \"raster overflow\" )\n  FT_ERRORDEF_( Raster_Negative_Height,                      0x63,\n                \"negative height while rastering\" )\n\n  /* cache errors */\n\n  FT_ERRORDEF_( Too_Many_Caches,                             0x70,\n                \"too many registered caches\" )\n\n  /* TrueType and SFNT errors */\n\n  FT_ERRORDEF_( Invalid_Opcode,                              0x80,\n                \"invalid opcode\" )\n  FT_ERRORDEF_( Too_Few_Arguments,                           0x81,\n                \"too few arguments\" )\n  FT_ERRORDEF_( Stack_Overflow,                              0x82,\n                \"stack overflow\" )\n  FT_ERRORDEF_( Code_Overflow,                               0x83,\n                \"code overflow\" )\n  FT_ERRORDEF_( Bad_Argument,                                0x84,\n                \"bad argument\" )\n  FT_ERRORDEF_( Divide_By_Zero,                              0x85,\n                \"division by zero\" )\n  FT_ERRORDEF_( Invalid_Reference,                           0x86,\n                \"invalid reference\" )\n  FT_ERRORDEF_( Debug_OpCode,                                0x87,\n                \"found debug opcode\" )\n  FT_ERRORDEF_( ENDF_In_Exec_Stream,                         0x88,\n                \"found ENDF opcode in execution stream\" )\n  FT_ERRORDEF_( Nested_DEFS,                                 0x89,\n                \"nested DEFS\" )\n  FT_ERRORDEF_( Invalid_CodeRange,                           0x8A,\n                \"invalid code range\" )\n  FT_ERRORDEF_( Execution_Too_Long,                          0x8B,\n                \"execution context too long\" )\n  FT_ERRORDEF_( Too_Many_Function_Defs,                      0x8C,\n                \"too many function definitions\" )\n  FT_ERRORDEF_( Too_Many_Instruction_Defs,                   0x8D,\n                \"too many instruction definitions\" )\n  FT_ERRORDEF_( Table_Missing,                               0x8E,\n                \"SFNT font table missing\" )\n  FT_ERRORDEF_( Horiz_Header_Missing,                        0x8F,\n                \"horizontal header (hhea) table missing\" )\n  FT_ERRORDEF_( Locations_Missing,                           0x90,\n                \"locations (loca) table missing\" )\n  FT_ERRORDEF_( Name_Table_Missing,                          0x91,\n                \"name table missing\" )\n  FT_ERRORDEF_( CMap_Table_Missing,                          0x92,\n                \"character map (cmap) table missing\" )\n  FT_ERRORDEF_( Hmtx_Table_Missing,                          0x93,\n                \"horizontal metrics (hmtx) table missing\" )\n  FT_ERRORDEF_( Post_Table_Missing,                          0x94,\n                \"PostScript (post) table missing\" )\n  FT_ERRORDEF_( Invalid_Horiz_Metrics,                       0x95,\n                \"invalid horizontal metrics\" )\n  FT_ERRORDEF_( Invalid_CharMap_Format,                      0x96,\n                \"invalid character map (cmap) format\" )\n  FT_ERRORDEF_( Invalid_PPem,                                0x97,\n                \"invalid ppem value\" )\n  FT_ERRORDEF_( Invalid_Vert_Metrics,                        0x98,\n                \"invalid vertical metrics\" )\n  FT_ERRORDEF_( Could_Not_Find_Context,                      0x99,\n                \"could not find context\" )\n  FT_ERRORDEF_( Invalid_Post_Table_Format,                   0x9A,\n                \"invalid PostScript (post) table format\" )\n  FT_ERRORDEF_( Invalid_Post_Table,                          0x9B,\n                \"invalid PostScript (post) table\" )\n  FT_ERRORDEF_( DEF_In_Glyf_Bytecode,                        0x9C,\n                \"found FDEF or IDEF opcode in glyf bytecode\" )\n  FT_ERRORDEF_( Missing_Bitmap,                              0x9D,\n                \"missing bitmap in strike\" )\n  FT_ERRORDEF_( Missing_SVG_Hooks,                           0x9E,\n                \"SVG hooks have not been set\" )\n\n  /* CFF, CID, and Type 1 errors */\n\n  FT_ERRORDEF_( Syntax_Error,                                0xA0,\n                \"opcode syntax error\" )\n  FT_ERRORDEF_( Stack_Underflow,                             0xA1,\n                \"argument stack underflow\" )\n  FT_ERRORDEF_( Ignore,                                      0xA2,\n                \"ignore\" )\n  FT_ERRORDEF_( No_Unicode_Glyph_Name,                       0xA3,\n                \"no Unicode glyph name found\" )\n  FT_ERRORDEF_( Glyph_Too_Big,                               0xA4,\n                \"glyph too big for hinting\" )\n\n  /* BDF errors */\n\n  FT_ERRORDEF_( Missing_Startfont_Field,                     0xB0,\n                \"`STARTFONT' field missing\" )\n  FT_ERRORDEF_( Missing_Font_Field,                          0xB1,\n                \"`FONT' field missing\" )\n  FT_ERRORDEF_( Missing_Size_Field,                          0xB2,\n                \"`SIZE' field missing\" )\n  FT_ERRORDEF_( Missing_Fontboundingbox_Field,               0xB3,\n                \"`FONTBOUNDINGBOX' field missing\" )\n  FT_ERRORDEF_( Missing_Chars_Field,                         0xB4,\n                \"`CHARS' field missing\" )\n  FT_ERRORDEF_( Missing_Startchar_Field,                     0xB5,\n                \"`STARTCHAR' field missing\" )\n  FT_ERRORDEF_( Missing_Encoding_Field,                      0xB6,\n                \"`ENCODING' field missing\" )\n  FT_ERRORDEF_( Missing_Bbx_Field,                           0xB7,\n                \"`BBX' field missing\" )\n  FT_ERRORDEF_( Bbx_Too_Big,                                 0xB8,\n                \"`BBX' too big\" )\n  FT_ERRORDEF_( Corrupted_Font_Header,                       0xB9,\n                \"Font header corrupted or missing fields\" )\n  FT_ERRORDEF_( Corrupted_Font_Glyphs,                       0xBA,\n                \"Font glyphs corrupted or missing fields\" )\n</code></pre>"},{"location":"ft2-error_enumerations.html","title":"Error Enumerations","text":"<p>FreeType \u00bb Docs \u00bb Error Codes \u00bb Error Enumerations</p>"},{"location":"ft2-error_enumerations.html#error-enumerations","title":"Error Enumerations","text":""},{"location":"ft2-error_enumerations.html#synopsis","title":"Synopsis","text":"<p>The header file <code>fterrors.h</code> (which is automatically included by <code>freetype.h</code>) defines the handling of FreeType's enumeration constants. It can also be used to generate error message strings with a small macro trick explained below.</p> <p>Error Formats</p> <p>The configuration macro <code>FT_CONFIG_OPTION_USE_MODULE_ERRORS</code> can be defined in <code>ftoption.h</code> in order to make the higher byte indicate the module where the error has happened (this is not compatible with standard builds of FreeType\u00a02, however). See the file <code>ftmoderr.h</code> for more details.</p> <p>Error Message Strings</p> <p>Error definitions are set up with special macros that allow client applications to build a table of error message strings. The strings are not included in a normal build of FreeType\u00a02 to save space (most client applications do not use them).</p> <p>To do so, you have to define the following macros before including this file. <pre><code>  FT_ERROR_START_LIST\n</code></pre></p> <p>This macro is called before anything else to define the start of the error list. It is followed by several <code>FT_ERROR_DEF</code> calls. <pre><code>  FT_ERROR_DEF( e, v, s )\n</code></pre></p> <p>This macro is called to define one single error. \u2018e\u2019 is the error code identifier (e.g., <code>Invalid_Argument</code>), \u2018v\u2019 is the error's numerical value, and \u2018s\u2019 is the corresponding error string. <pre><code>  FT_ERROR_END_LIST\n</code></pre></p> <p>This macro ends the list.</p> <p>Additionally, you have to undefine <code>FTERRORS_H_</code> before #including this file.</p> <p>Here is a simple example. <pre><code>  #undef FTERRORS_H_\n  #define FT_ERRORDEF( e, v, s )  { e, s },\n  #define FT_ERROR_START_LIST     {\n  #define FT_ERROR_END_LIST       { 0, NULL } };\n\n  const struct\n  {\n    int          err_code;\n    const char*  err_msg;\n  } ft_errors[] =\n\n  #include &lt;freetype/fterrors.h&gt;\n</code></pre></p> <p>An alternative to using an array is a switch statement. <pre><code>  #undef FTERRORS_H_\n  #define FT_ERROR_START_LIST     switch ( error_code ) {\n  #define FT_ERRORDEF( e, v, s )    case v: return s;\n  #define FT_ERROR_END_LIST       }\n</code></pre></p> <p>If you use <code>FT_CONFIG_OPTION_USE_MODULE_ERRORS</code>, <code>error_code</code> should be replaced with <code>FT_ERROR_BASE(error_code)</code> in the last example.</p>"},{"location":"ft2-error_enumerations.html#ft_error_string","title":"FT_Error_String","text":"<p>Defined in FT_ERRORS_H (freetype/fterrors.h).</p> <pre><code>  FT_EXPORT( const char* )\n  FT_Error_String( FT_Error  error_code );\n</code></pre> <p>Retrieve the description of a valid FreeType error code.</p> input error_code <p>A valid FreeType error code.</p> return <p>A C\u00a0string or <code>NULL</code>, if any error occurred.</p> note <p>FreeType has to be compiled with <code>FT_CONFIG_OPTION_ERROR_STRINGS</code> or <code>FT_DEBUG_LEVEL_ERROR</code> to get meaningful descriptions. \u2018error_string\u2019 will be <code>NULL</code> otherwise.</p> <p>Module identification will be ignored: <pre><code>  strcmp( FT_Error_String(  FT_Err_Unknown_File_Format ),\n          FT_Error_String( BDF_Err_Unknown_File_Format ) ) == 0;\n</code></pre></p>"},{"location":"ft2-face_creation.html","title":"Face Creation","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Face Creation</p>"},{"location":"ft2-face_creation.html#face-creation","title":"Face Creation","text":""},{"location":"ft2-face_creation.html#synopsis","title":"Synopsis","text":"<p>The functions and structures collected in this section operate on fonts globally.</p>"},{"location":"ft2-face_creation.html#ft_face","title":"FT_Face","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_FaceRec_*  FT_Face;\n</code></pre> <p>A handle to a typographic face object. A face object models a given typeface, in a given style.</p> note <p>A face object also owns a single <code>FT_GlyphSlot</code> object, as well as one or more <code>FT_Size</code> objects.</p> <p>Use <code>FT_New_Face</code> or <code>FT_Open_Face</code> to create a new face object from a given filepath or a custom input stream.</p> <p>Use <code>FT_Done_Face</code> to destroy it (along with its slot and sizes).</p> <p>An <code>FT_Face</code> object can only be safely used from one thread at a time. Similarly, creation and destruction of <code>FT_Face</code> with the same <code>FT_Library</code> object can only be done from one thread at a time. On the other hand, functions like <code>FT_Load_Glyph</code> and its siblings are thread-safe and do not need the lock to be held as long as the same <code>FT_Face</code> object is not used from multiple threads at the same time.</p> also <p>See <code>FT_FaceRec</code> for the publicly accessible fields of a given face object.</p>"},{"location":"ft2-face_creation.html#ft_facerec","title":"FT_FaceRec","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_FaceRec_\n  {\n    FT_Long           num_faces;\n    FT_Long           face_index;\n\n    FT_Long           face_flags;\n    FT_Long           style_flags;\n\n    FT_Long           num_glyphs;\n\n    FT_String*        family_name;\n    FT_String*        style_name;\n\n    FT_Int            num_fixed_sizes;\n    FT_Bitmap_Size*   available_sizes;\n\n    FT_Int            num_charmaps;\n    FT_CharMap*       charmaps;\n\n    FT_Generic        generic;\n\n    /* The following member variables (down to `underline_thickness`) */\n    /* are only relevant to scalable outlines; cf. @FT_Bitmap_Size    */\n    /* for bitmap fonts.                                              */\n    FT_BBox           bbox;\n\n    FT_UShort         units_per_EM;\n    FT_Short          ascender;\n    FT_Short          descender;\n    FT_Short          height;\n\n    FT_Short          max_advance_width;\n    FT_Short          max_advance_height;\n\n    FT_Short          underline_position;\n    FT_Short          underline_thickness;\n\n    FT_GlyphSlot      glyph;\n    FT_Size           size;\n    FT_CharMap        charmap;\n\n    /* private fields, internal to FreeType */\n\n    FT_Driver         driver;\n    FT_Memory         memory;\n    FT_Stream         stream;\n\n    FT_ListRec        sizes_list;\n\n    FT_Generic        autohint;   /* face-specific auto-hinter data */\n    void*             extensions; /* unused                         */\n\n    FT_Face_Internal  internal;\n\n  } FT_FaceRec;\n</code></pre> <p>FreeType root face class structure. A face object models a typeface in a font file.</p> fields num_faces <p>The number of faces in the font file. Some font formats can have multiple faces in a single font file.</p> face_index <p>This field holds two different values. Bits 0-15 are the index of the face in the font file (starting with value\u00a00). They are set to\u00a00 if there is only one face in the font file.</p> <p>[Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation fonts only, holding the named instance index for the current face index (starting with value\u00a01; value\u00a00 indicates font access without a named instance). For non-variation fonts, bits 16-30 are ignored. If we have the third named instance of face\u00a04, say, <code>face_index</code> is set to 0x00030004.</p> <p>Bit 31 is always zero (that is, <code>face_index</code> is always a positive value).</p> <p>[Since 2.9] Changing the design coordinates with <code>FT_Set_Var_Design_Coordinates</code> or <code>FT_Set_Var_Blend_Coordinates</code> does not influence the named instance index value (only <code>FT_Set_Named_Instance</code> does that).</p> face_flags <p>A set of bit flags that give important information about the face; see <code>FT_FACE_FLAG_XXX</code> for the details.</p> style_flags <p>The lower 16\u00a0bits contain a set of bit flags indicating the style of the face; see <code>FT_STYLE_FLAG_XXX</code> for the details.</p> <p>[Since 2.6.1] Bits 16-30 hold the number of named instances available for the current face if we have a GX or OpenType variation (sub)font. Bit 31 is always zero (that is, <code>style_flags</code> is always a positive value). Note that a variation font has always at least one named instance, namely the default instance.</p> num_glyphs <p>The number of glyphs in the face. If the face is scalable and has sbits (see <code>num_fixed_sizes</code>), it is set to the number of outline glyphs.</p> <p>For CID-keyed fonts (not in an SFNT wrapper) this value gives the highest CID used in the font.</p> family_name <p>The face's family name. This is an ASCII string, usually in English, that describes the typeface's family (like \u2018Times New Roman\u2019, \u2018Bodoni\u2019, \u2018Garamond\u2019, etc). This is a least common denominator used to list fonts. Some formats (TrueType &amp; OpenType) provide localized and Unicode versions of this string. Applications should use the format-specific interface to access them. Can be <code>NULL</code> (e.g., in fonts embedded in a PDF file).</p> <p>In case the font doesn't provide a specific family name entry, FreeType tries to synthesize one, deriving it from other name entries.</p> style_name <p>The face's style name. This is an ASCII string, usually in English, that describes the typeface's style (like \u2018Italic\u2019, \u2018Bold\u2019, \u2018Condensed\u2019, etc). Not all font formats provide a style name, so this field is optional, and can be set to <code>NULL</code>. As for <code>family_name</code>, some formats provide localized and Unicode versions of this string. Applications should use the format-specific interface to access them.</p> num_fixed_sizes <p>The number of bitmap strikes in the face. Even if the face is scalable, there might still be bitmap strikes, which are called \u2018sbits\u2019 in that case.</p> available_sizes <p>An array of <code>FT_Bitmap_Size</code> for all bitmap strikes in the face. It is set to <code>NULL</code> if there is no bitmap strike.</p> <p>Note that FreeType tries to sanitize the strike data since they are sometimes sloppy or incorrect, but this can easily fail.</p> num_charmaps <p>The number of charmaps in the face.</p> charmaps <p>An array of the charmaps of the face.</p> generic <p>A field reserved for client uses. See the <code>FT_Generic</code> type description.</p> bbox <p>The font bounding box. Coordinates are expressed in font units (see <code>units_per_EM</code>). The box is large enough to contain any glyph from the font. Thus, <code>bbox.yMax</code> can be seen as the \u2018maximum ascender\u2019, and <code>bbox.yMin</code> as the \u2018minimum descender\u2019. Only relevant for scalable formats.</p> <p>Note that the bounding box might be off by (at least) one pixel for hinted fonts. See <code>FT_Size_Metrics</code> for further discussion.</p> <p>Note that the bounding box does not vary in OpenType variation fonts and should only be used in relation to the default instance.</p> units_per_EM <p>The number of font units per EM square for this face. This is typically 2048 for TrueType fonts, and 1000 for Type\u00a01 fonts. Only relevant for scalable formats.</p> ascender <p>The typographic ascender of the face, expressed in font units. For font formats not having this information, it is set to <code>bbox.yMax</code>. Only relevant for scalable formats.</p> descender <p>The typographic descender of the face, expressed in font units. For font formats not having this information, it is set to <code>bbox.yMin</code>. Note that this field is negative for values below the baseline. Only relevant for scalable formats.</p> height <p>This value is the vertical distance between two consecutive baselines, expressed in font units. It is always positive. Only relevant for scalable formats.</p> <p>If you want the global glyph height, use <code>ascender - descender</code>.</p> max_advance_width <p>The maximum advance width, in font units, for all glyphs in this face. This can be used to make word wrapping computations faster. Only relevant for scalable formats.</p> max_advance_height <p>The maximum advance height, in font units, for all glyphs in this face. This is only relevant for vertical layouts, and is set to <code>height</code> for fonts that do not provide vertical metrics. Only relevant for scalable formats.</p> underline_position <p>The position, in font units, of the underline line for this face. It is the center of the underlining stem. Only relevant for scalable formats.</p> underline_thickness <p>The thickness, in font units, of the underline for this face. Only relevant for scalable formats.</p> glyph <p>The face's associated glyph slot(s).</p> size <p>The current active size for this face.</p> charmap <p>The current active charmap for this face.</p> note <p>Fields may be changed after a call to <code>FT_Attach_File</code> or <code>FT_Attach_Stream</code>.</p> <p>For an OpenType variation font, the values of the following fields can change after a call to <code>FT_Set_Var_Design_Coordinates</code> (and friends) if the font contains an \u2018MVAR\u2019 table: <code>ascender</code>, <code>descender</code>, <code>height</code>, <code>underline_position</code>, and <code>underline_thickness</code>.</p> <p>Especially for TrueType fonts see also the documentation for <code>FT_Size_Metrics</code>.</p>"},{"location":"ft2-face_creation.html#ft_face_flag_xxx","title":"FT_FACE_FLAG_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_FACE_FLAG_SCALABLE          ( 1L &lt;&lt;  0 )\n#define FT_FACE_FLAG_FIXED_SIZES       ( 1L &lt;&lt;  1 )\n#define FT_FACE_FLAG_FIXED_WIDTH       ( 1L &lt;&lt;  2 )\n#define FT_FACE_FLAG_SFNT              ( 1L &lt;&lt;  3 )\n#define FT_FACE_FLAG_HORIZONTAL        ( 1L &lt;&lt;  4 )\n#define FT_FACE_FLAG_VERTICAL          ( 1L &lt;&lt;  5 )\n#define FT_FACE_FLAG_KERNING           ( 1L &lt;&lt;  6 )\n#define FT_FACE_FLAG_FAST_GLYPHS       ( 1L &lt;&lt;  7 )\n#define FT_FACE_FLAG_MULTIPLE_MASTERS  ( 1L &lt;&lt;  8 )\n#define FT_FACE_FLAG_GLYPH_NAMES       ( 1L &lt;&lt;  9 )\n#define FT_FACE_FLAG_EXTERNAL_STREAM   ( 1L &lt;&lt; 10 )\n#define FT_FACE_FLAG_HINTER            ( 1L &lt;&lt; 11 )\n#define FT_FACE_FLAG_CID_KEYED         ( 1L &lt;&lt; 12 )\n#define FT_FACE_FLAG_TRICKY            ( 1L &lt;&lt; 13 )\n#define FT_FACE_FLAG_COLOR             ( 1L &lt;&lt; 14 )\n#define FT_FACE_FLAG_VARIATION         ( 1L &lt;&lt; 15 )\n#define FT_FACE_FLAG_SVG               ( 1L &lt;&lt; 16 )\n#define FT_FACE_FLAG_SBIX              ( 1L &lt;&lt; 17 )\n#define FT_FACE_FLAG_SBIX_OVERLAY      ( 1L &lt;&lt; 18 )\n</code></pre> <p>A list of bit flags used in the <code>face_flags</code> field of the <code>FT_FaceRec</code> structure. They inform client applications of properties of the corresponding face.</p> values FT_FACE_FLAG_SCALABLE <p>The face contains outline glyphs. Note that a face can contain bitmap strikes also, i.e., a face can have both this flag and <code>FT_FACE_FLAG_FIXED_SIZES</code> set.</p> FT_FACE_FLAG_FIXED_SIZES <p>The face contains bitmap strikes. See also the <code>num_fixed_sizes</code> and <code>available_sizes</code> fields of <code>FT_FaceRec</code>.</p> FT_FACE_FLAG_FIXED_WIDTH <p>The face contains fixed-width characters (like Courier, Lucida, MonoType, etc.).</p> FT_FACE_FLAG_SFNT <p>The face uses the SFNT storage scheme. For now, this means TrueType and OpenType.</p> FT_FACE_FLAG_HORIZONTAL <p>The face contains horizontal glyph metrics. This should be set for all common formats.</p> FT_FACE_FLAG_VERTICAL <p>The face contains vertical glyph metrics. This is only available in some formats, not all of them.</p> FT_FACE_FLAG_KERNING <p>The face contains kerning information. If set, the kerning distance can be retrieved using the function <code>FT_Get_Kerning</code>. Otherwise the function always returns the vector (0,0).</p> <p>Note that for TrueType fonts only, FreeType supports both the \u2018kern\u2019 table and the basic, pair-wise kerning feature from the \u2018GPOS\u2019 table (with <code>TT_CONFIG_OPTION_GPOS_KERNING</code> enabled), though FreeType does not support the more advanced GPOS layout features; use a library like HarfBuzz for those instead.</p> FT_FACE_FLAG_FAST_GLYPHS <p>THIS FLAG IS DEPRECATED. DO NOT USE OR TEST IT.</p> FT_FACE_FLAG_MULTIPLE_MASTERS <p>The face contains multiple masters and is capable of interpolating between them. Supported formats are Adobe MM, TrueType GX, and OpenType variation fonts.</p> <p>See section \u2018Multiple Masters\u2019 for API details.</p> FT_FACE_FLAG_GLYPH_NAMES <p>The face contains glyph names, which can be retrieved using <code>FT_Get_Glyph_Name</code>. Note that some TrueType fonts contain broken glyph name tables. Use the function <code>FT_Has_PS_Glyph_Names</code> when needed.</p> FT_FACE_FLAG_EXTERNAL_STREAM <p>Used internally by FreeType to indicate that a face's stream was provided by the client application and should not be destroyed when <code>FT_Done_Face</code> is called. Don't read or test this flag.</p> FT_FACE_FLAG_HINTER <p>The font driver has a hinting machine of its own. For example, with TrueType fonts, it makes sense to use data from the SFNT \u2018gasp\u2019 table only if the native TrueType hinting engine (with the bytecode interpreter) is available and active.</p> FT_FACE_FLAG_CID_KEYED <p>The face is CID-keyed. In that case, the face is not accessed by glyph indices but by CID values. For subsetted CID-keyed fonts this has the consequence that not all index values are a valid argument to <code>FT_Load_Glyph</code>. Only the CID values for which corresponding glyphs in the subsetted font exist make <code>FT_Load_Glyph</code> return successfully; in all other cases you get an <code>FT_Err_Invalid_Argument</code> error.</p> <p>Note that CID-keyed fonts that are in an SFNT wrapper (that is, all OpenType/CFF fonts) don't have this flag set since the glyphs are accessed in the normal way (using contiguous indices); the \u2018CID-ness\u2019 isn't visible to the application.</p> FT_FACE_FLAG_TRICKY <p>The face is \u2018tricky\u2019, that is, it always needs the font format's native hinting engine to get a reasonable result. A typical example is the old Chinese font <code>mingli.ttf</code> (but not <code>mingliu.ttc</code>) that uses TrueType bytecode instructions to move and scale all of its subglyphs.</p> <p>It is not possible to auto-hint such fonts using <code>FT_LOAD_FORCE_AUTOHINT</code>; it will also ignore <code>FT_LOAD_NO_HINTING</code>. You have to set both <code>FT_LOAD_NO_HINTING</code> and <code>FT_LOAD_NO_AUTOHINT</code> to really disable hinting; however, you probably never want this except for demonstration purposes.</p> <p>Currently, there are about a dozen TrueType fonts in the list of tricky fonts; they are hard-coded in file <code>ttobjs.c</code>.</p> FT_FACE_FLAG_COLOR <p>[Since 2.5.1] The face has color glyph tables. See <code>FT_LOAD_COLOR</code> for more information.</p> FT_FACE_FLAG_VARIATION <p>[Since 2.9] Set if the current face (or named instance) has been altered with <code>FT_Set_MM_Design_Coordinates</code>, <code>FT_Set_Var_Design_Coordinates</code>, <code>FT_Set_Var_Blend_Coordinates</code>, or <code>FT_Set_MM_WeightVector</code> to select a non-default instance.</p> FT_FACE_FLAG_SVG <p>[Since 2.12] The face has an \u2018SVG\u00a0\u2019 OpenType table.</p> FT_FACE_FLAG_SBIX <p>[Since 2.12] The face has an \u2018sbix\u2019 OpenType table and outlines. For such fonts, <code>FT_FACE_FLAG_SCALABLE</code> is not set by default to retain backward compatibility.</p> FT_FACE_FLAG_SBIX_OVERLAY <p>[Since 2.12] The face has an \u2018sbix\u2019 OpenType table where outlines should be drawn on top of bitmap strikes.</p>"},{"location":"ft2-face_creation.html#ft_style_flag_xxx","title":"FT_STYLE_FLAG_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_STYLE_FLAG_ITALIC  ( 1 &lt;&lt; 0 )\n#define FT_STYLE_FLAG_BOLD    ( 1 &lt;&lt; 1 )\n</code></pre> <p>A list of bit flags to indicate the style of a given face. These are used in the <code>style_flags</code> field of <code>FT_FaceRec</code>.</p> values FT_STYLE_FLAG_ITALIC <p>The face style is italic or oblique.</p> FT_STYLE_FLAG_BOLD <p>The face is bold.</p> note <p>The style information as provided by FreeType is very basic. More details are beyond the scope and should be done on a higher level (for example, by analyzing various fields of the \u2018OS/2\u2019 table in SFNT based fonts).</p>"},{"location":"ft2-face_creation.html#ft_new_face","title":"FT_New_Face","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Face( FT_Library   library,\n               const char*  filepathname,\n               FT_Long      face_index,\n               FT_Face     *aface );\n</code></pre> <p>Call <code>FT_Open_Face</code> to open a font by its pathname.</p> inout library <p>A handle to the library resource.</p> input pathname <p>A path to the font file.</p> face_index <p>See <code>FT_Open_Face</code> for a detailed description of this parameter.</p> output aface <p>A handle to a new face object. If <code>face_index</code> is greater than or equal to zero, it must be non-<code>NULL</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The <code>pathname</code> string should be recognizable as such by a standard <code>fopen</code> call on your system; in particular, this means that <code>pathname</code> must not contain null bytes. If that is not sufficient to address all file name possibilities (for example, to handle wide character file names on Windows in UTF-16 encoding) you might use <code>FT_Open_Face</code> to pass a memory array or a stream object instead.</p> <p>Use <code>FT_Done_Face</code> to destroy the created <code>FT_Face</code> object (along with its slot and sizes).</p>"},{"location":"ft2-face_creation.html#ft_done_face","title":"FT_Done_Face","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Done_Face( FT_Face  face );\n</code></pre> <p>Discard a given face object, as well as all of its child slots and sizes.</p> input face <p>A handle to a target face object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>See the discussion of reference counters in the description of <code>FT_Reference_Face</code>.</p>"},{"location":"ft2-face_creation.html#ft_reference_face","title":"FT_Reference_Face","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Reference_Face( FT_Face  face );\n</code></pre> <p>A counter gets initialized to\u00a01 at the time an <code>FT_Face</code> structure is created. This function increments the counter. <code>FT_Done_Face</code> then only destroys a face if the counter is\u00a01, otherwise it simply decrements the counter.</p> <p>This function helps in managing life-cycles of structures that reference <code>FT_Face</code> objects.</p> input face <p>A handle to a target face object.</p> return <p>FreeType error code. 0\u00a0means success.</p> since <p>2.4.2</p>"},{"location":"ft2-face_creation.html#ft_new_memory_face","title":"FT_New_Memory_Face","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Memory_Face( FT_Library      library,\n                      const FT_Byte*  file_base,\n                      FT_Long         file_size,\n                      FT_Long         face_index,\n                      FT_Face        *aface );\n</code></pre> <p>Call <code>FT_Open_Face</code> to open a font that has been loaded into memory.</p> inout library <p>A handle to the library resource.</p> input file_base <p>A pointer to the beginning of the font data.</p> file_size <p>The size of the memory chunk used by the font data.</p> face_index <p>See <code>FT_Open_Face</code> for a detailed description of this parameter.</p> output aface <p>A handle to a new face object. If <code>face_index</code> is greater than or equal to zero, it must be non-<code>NULL</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You must not deallocate the memory before calling <code>FT_Done_Face</code>.</p>"},{"location":"ft2-face_creation.html#ft_face_properties","title":"FT_Face_Properties","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Face_Properties( FT_Face        face,\n                      FT_UInt        num_properties,\n                      FT_Parameter*  properties );\n</code></pre> <p>Set or override certain (library or module-wide) properties on a face-by-face basis. Useful for finer-grained control and avoiding locks on shared structures (threads can modify their own faces as they see fit).</p> <p>Contrary to <code>FT_Property_Set</code>, this function uses <code>FT_Parameter</code> so that you can pass multiple properties to the target face in one call. Note that only a subset of the available properties can be controlled.</p> <ul> <li> <p><code>FT_PARAM_TAG_STEM_DARKENING</code> (stem darkening, corresponding to the property <code>no-stem-darkening</code> provided by the \u2018autofit\u2019, \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see <code>no-stem-darkening</code>).</p> </li> <li> <p><code>FT_PARAM_TAG_LCD_FILTER_WEIGHTS</code> (LCD filter weights, corresponding to function <code>FT_Library_SetLcdFilterWeights</code>).</p> </li> <li> <p><code>FT_PARAM_TAG_RANDOM_SEED</code> (seed value for the CFF, Type\u00a01, and CID \u2018random\u2019 operator, corresponding to the <code>random-seed</code> property provided by the \u2018cff\u2019, \u2018type1\u2019, and \u2018t1cid\u2019 modules; see <code>random-seed</code>).</p> </li> </ul> <p>Pass <code>NULL</code> as <code>data</code> in <code>FT_Parameter</code> for a given tag to reset the option and use the library or module default again.</p> input face <p>A handle to the source face object.</p> num_properties <p>The number of properties that follow.</p> properties <p>A handle to an <code>FT_Parameter</code> array with <code>num_properties</code> elements.</p> return <p>FreeType error code. 0\u00a0means success.</p> example <p>Here is an example that sets three properties. You must define <code>FT_CONFIG_OPTION_SUBPIXEL_RENDERING</code> to make the LCD filter examples work. <pre><code>  FT_Parameter         property1;\n  FT_Bool              darken_stems = 1;\n\n  FT_Parameter         property2;\n  FT_LcdFiveTapFilter  custom_weight =\n                         { 0x11, 0x44, 0x56, 0x44, 0x11 };\n\n  FT_Parameter         property3;\n  FT_Int32             random_seed = 314159265;\n\n  FT_Parameter         properties[3] = { property1,\n                                         property2,\n                                         property3 };\n\n\n  property1.tag  = FT_PARAM_TAG_STEM_DARKENING;\n  property1.data = &amp;darken_stems;\n\n  property2.tag  = FT_PARAM_TAG_LCD_FILTER_WEIGHTS;\n  property2.data = custom_weight;\n\n  property3.tag  = FT_PARAM_TAG_RANDOM_SEED;\n  property3.data = &amp;random_seed;\n\n  FT_Face_Properties( face, 3, properties );\n</code></pre></p> <p>The next example resets a single property to its default value. <pre><code>  FT_Parameter  property;\n\n\n  property.tag  = FT_PARAM_TAG_LCD_FILTER_WEIGHTS;\n  property.data = NULL;\n\n  FT_Face_Properties( face, 1, &amp;property );\n</code></pre></p> since <p>2.8</p>"},{"location":"ft2-face_creation.html#ft_open_face","title":"FT_Open_Face","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Open_Face( FT_Library           library,\n                const FT_Open_Args*  args,\n                FT_Long              face_index,\n                FT_Face             *aface );\n</code></pre> <p>Create a face object from a given resource described by <code>FT_Open_Args</code>.</p> inout library <p>A handle to the library resource.</p> input args <p>A pointer to an <code>FT_Open_Args</code> structure that must be filled by the caller.</p> face_index <p>This field holds two different values. Bits 0-15 are the index of the face in the font file (starting with value\u00a00). Set it to\u00a00 if there is only one face in the font file.</p> <p>[Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation fonts only, specifying the named instance index for the current face index (starting with value\u00a01; value\u00a00 makes FreeType ignore named instances). For non-variation fonts, bits 16-30 are ignored. Assuming that you want to access the third named instance in face\u00a04, <code>face_index</code> should be set to 0x00030004. If you want to access face\u00a04 without variation handling, simply set <code>face_index</code> to value\u00a04.</p> <p><code>FT_Open_Face</code> and its siblings can be used to quickly check whether the font format of a given font resource is supported by FreeType. In general, if the <code>face_index</code> argument is negative, the function's return value is\u00a00 if the font format is recognized, or non-zero otherwise. The function allocates a more or less empty face handle in <code>*aface</code> (if <code>aface</code> isn't <code>NULL</code>); the only two useful fields in this special case are <code>face-&gt;num_faces</code> and <code>face-&gt;style_flags</code>. For any negative value of <code>face_index</code>, <code>face-&gt;num_faces</code> gives the number of faces within the font file. For the negative value \u2018-(N+1)\u2019 (with \u2018N\u2019 a non-negative 16-bit value), bits 16-30 in <code>face-&gt;style_flags</code> give the number of named instances in face \u2018N\u2019 if we have a variation font (or zero otherwise). After examination, the returned <code>FT_Face</code> structure should be deallocated with a call to <code>FT_Done_Face</code>.</p> output aface <p>A handle to a new face object. If <code>face_index</code> is greater than or equal to zero, it must be non-<code>NULL</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Unlike FreeType 1.x, this function automatically creates a glyph slot for the face object that can be accessed directly through <code>face-&gt;glyph</code>.</p> <p>Each new face object created with this function also owns a default <code>FT_Size</code> object, accessible as <code>face-&gt;size</code>.</p> <p>One <code>FT_Library</code> instance can have multiple face objects, that is, <code>FT_Open_Face</code> and its siblings can be called multiple times using the same <code>library</code> argument.</p> <p>See the discussion of reference counters in the description of <code>FT_Reference_Face</code>.</p> <p>If <code>FT_OPEN_STREAM</code> is set in <code>args-&gt;flags</code>, the stream in <code>args-&gt;stream</code> is automatically closed before this function returns any error (including <code>FT_Err_Invalid_Argument</code>).</p> example <p>To loop over all faces, use code similar to the following snippet (omitting the error handling). <pre><code>  ...\n  FT_Face  face;\n  FT_Long  i, num_faces;\n\n\n  error = FT_Open_Face( library, args, -1, &amp;face );\n  if ( error ) { ... }\n\n  num_faces = face-&gt;num_faces;\n  FT_Done_Face( face );\n\n  for ( i = 0; i &lt; num_faces; i++ )\n  {\n    ...\n    error = FT_Open_Face( library, args, i, &amp;face );\n    ...\n    FT_Done_Face( face );\n    ...\n  }\n</code></pre></p> <p>To loop over all valid values for <code>face_index</code>, use something similar to the following snippet, again without error handling. The code accesses all faces immediately (thus only a single call of <code>FT_Open_Face</code> within the do-loop), with and without named instances. <pre><code>  ...\n  FT_Face  face;\n\n  FT_Long  num_faces     = 0;\n  FT_Long  num_instances = 0;\n\n  FT_Long  face_idx     = 0;\n  FT_Long  instance_idx = 0;\n\n\n  do\n  {\n    FT_Long  id = ( instance_idx &lt;&lt; 16 ) + face_idx;\n\n\n    error = FT_Open_Face( library, args, id, &amp;face );\n    if ( error ) { ... }\n\n    num_faces     = face-&gt;num_faces;\n    num_instances = face-&gt;style_flags &gt;&gt; 16;\n\n    ...\n\n    FT_Done_Face( face );\n\n    if ( instance_idx &lt; num_instances )\n      instance_idx++;\n    else\n    {\n      face_idx++;\n      instance_idx = 0;\n    }\n\n  } while ( face_idx &lt; num_faces )\n</code></pre></p>"},{"location":"ft2-face_creation.html#ft_open_args","title":"FT_Open_Args","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_Open_Args_\n  {\n    FT_UInt         flags;\n    const FT_Byte*  memory_base;\n    FT_Long         memory_size;\n    FT_String*      pathname;\n    FT_Stream       stream;\n    FT_Module       driver;\n    FT_Int          num_params;\n    FT_Parameter*   params;\n\n  } FT_Open_Args;\n</code></pre> <p>A structure to indicate how to open a new font file or stream. A pointer to such a structure can be used as a parameter for the functions <code>FT_Open_Face</code> and <code>FT_Attach_Stream</code>.</p> fields flags <p>A set of bit flags indicating how to use the structure.</p> memory_base <p>The first byte of the file in memory.</p> memory_size <p>The size in bytes of the file in memory.</p> pathname <p>A pointer to an 8-bit file pathname, which must be a C\u00a0string (i.e., no null bytes except at the very end). The pointer is not owned by FreeType.</p> stream <p>A handle to a source stream object.</p> driver <p>This field is exclusively used by <code>FT_Open_Face</code>; it simply specifies the font driver to use for opening the face. If set to <code>NULL</code>, FreeType tries to load the face with each one of the drivers in its list.</p> num_params <p>The number of extra parameters.</p> params <p>Extra parameters passed to the font driver when opening a new face.</p> note <p>The stream type is determined by the contents of <code>flags</code>:</p> <p>If the <code>FT_OPEN_MEMORY</code> bit is set, assume that this is a memory file of <code>memory_size</code> bytes, located at <code>memory_address</code>. The data are not copied, and the client is responsible for releasing and destroying them after the corresponding call to <code>FT_Done_Face</code>.</p> <p>Otherwise, if the <code>FT_OPEN_STREAM</code> bit is set, assume that a custom input stream <code>stream</code> is used.</p> <p>Otherwise, if the <code>FT_OPEN_PATHNAME</code> bit is set, assume that this is a normal file and use <code>pathname</code> to open it.</p> <p>If none of the above bits are set or if multiple are set at the same time, the flags are invalid and <code>FT_Open_Face</code> fails.</p> <p>If the <code>FT_OPEN_DRIVER</code> bit is set, <code>FT_Open_Face</code> only tries to open the file with the driver whose handler is in <code>driver</code>.</p> <p>If the <code>FT_OPEN_PARAMS</code> bit is set, the parameters given by <code>num_params</code> and <code>params</code> is used. They are ignored otherwise.</p> <p>Ideally, both the <code>pathname</code> and <code>params</code> fields should be tagged as \u2018const\u2019; this is missing for API backward compatibility. In other words, applications should treat them as read-only.</p>"},{"location":"ft2-face_creation.html#ft_open_xxx","title":"FT_OPEN_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_OPEN_MEMORY    0x1\n#define FT_OPEN_STREAM    0x2\n#define FT_OPEN_PATHNAME  0x4\n#define FT_OPEN_DRIVER    0x8\n#define FT_OPEN_PARAMS    0x10\n\n\n  /* these constants are deprecated; use the corresponding `FT_OPEN_XXX` */\n  /* values instead                                                      */\n#define ft_open_memory    FT_OPEN_MEMORY\n#define ft_open_stream    FT_OPEN_STREAM\n#define ft_open_pathname  FT_OPEN_PATHNAME\n#define ft_open_driver    FT_OPEN_DRIVER\n#define ft_open_params    FT_OPEN_PARAMS\n</code></pre> <p>A list of bit field constants used within the <code>flags</code> field of the <code>FT_Open_Args</code> structure.</p> values FT_OPEN_MEMORY <p>This is a memory-based stream.</p> FT_OPEN_STREAM <p>Copy the stream from the <code>stream</code> field.</p> FT_OPEN_PATHNAME <p>Create a new input stream from a C\u00a0path name.</p> FT_OPEN_DRIVER <p>Use the <code>driver</code> field.</p> FT_OPEN_PARAMS <p>Use the <code>num_params</code> and <code>params</code> fields.</p> note <p>The <code>FT_OPEN_MEMORY</code>, <code>FT_OPEN_STREAM</code>, and <code>FT_OPEN_PATHNAME</code> flags are mutually exclusive.</p>"},{"location":"ft2-face_creation.html#ft_parameter","title":"FT_Parameter","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_Parameter_\n  {\n    FT_ULong    tag;\n    FT_Pointer  data;\n\n  } FT_Parameter;\n</code></pre> <p>A simple structure to pass more or less generic parameters to <code>FT_Open_Face</code> and <code>FT_Face_Properties</code>.</p> fields tag <p>A four-byte identification tag.</p> data <p>A pointer to the parameter data.</p> note <p>The ID and function of parameters are driver-specific. See section \u2018Parameter Tags\u2019 for more information.</p>"},{"location":"ft2-face_creation.html#ft_attach_file","title":"FT_Attach_File","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Attach_File( FT_Face      face,\n                  const char*  filepathname );\n</code></pre> <p>Call <code>FT_Attach_Stream</code> to attach a file.</p> inout face <p>The target face object.</p> input filepathname <p>The pathname.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-face_creation.html#ft_attach_stream","title":"FT_Attach_Stream","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Attach_Stream( FT_Face              face,\n                    const FT_Open_Args*  parameters );\n</code></pre> <p>\u2018Attach\u2019 data to a face object. Normally, this is used to read additional information for the face object. For example, you can attach an AFM file that comes with a Type\u00a01 font to get the kerning values and other metrics.</p> inout face <p>The target face object.</p> input parameters <p>A pointer to <code>FT_Open_Args</code> that must be filled by the caller.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The meaning of the \u2018attach\u2019 (i.e., what really happens when the new file is read) is not fixed by FreeType itself. It really depends on the font format (and thus the font driver).</p> <p>Client applications are expected to know what they are doing when invoking this function. Most drivers simply do not implement file or stream attachments.</p>"},{"location":"ft2-font_formats.html","title":"Font Formats","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb Font Formats</p>"},{"location":"ft2-font_formats.html#font-formats","title":"Font Formats","text":""},{"location":"ft2-font_formats.html#synopsis","title":"Synopsis","text":"<p>The single function in this section can be used to get the font format. Note that this information is not needed normally; however, there are special cases (like in PDF devices) where it is important to differentiate, in spite of FreeType's uniform API.</p>"},{"location":"ft2-font_formats.html#ft_get_font_format","title":"FT_Get_Font_Format","text":"<p>Defined in FT_FONT_FORMATS_H (freetype/ftfntfmt.h).</p> <pre><code>  FT_EXPORT( const char* )\n  FT_Get_Font_Format( FT_Face  face );\n\n\n  /* deprecated */\n  FT_EXPORT( const char* )\n  FT_Get_X11_Font_Format( FT_Face  face );\n</code></pre> <p>Return a string describing the format of a given face. Possible values are \u2018TrueType\u2019, \u2018Type\u00a01\u2019, \u2018BDF\u2019, \u2018PCF\u2019, \u2018Type\u00a042\u2019, \u2018CID\u00a0Type\u00a01\u2019, \u2018CFF\u2019, \u2018PFR\u2019, and \u2018Windows\u00a0FNT\u2019.</p> <p>The return value is suitable to be used as an X11 FONT_PROPERTY.</p> input face <p>Input face handle.</p> return <p>Font format string. <code>NULL</code> in case of error.</p> note <p>A deprecated name for the same function is <code>FT_Get_X11_Font_Format</code>.</p>"},{"location":"ft2-font_testing_macros.html","title":"Font Testing Macros","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Font Testing Macros</p>"},{"location":"ft2-font_testing_macros.html#font-testing-macros","title":"Font Testing Macros","text":""},{"location":"ft2-font_testing_macros.html#synopsis","title":"Synopsis","text":"<p>Macros to test the most important font properties.</p> <p>It is recommended to use these high-level macros instead of directly testing the corresponding flags, which are scattered over various structures.</p>"},{"location":"ft2-font_testing_macros.html#ft_has_horizontal","title":"FT_HAS_HORIZONTAL","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_HORIZONTAL( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_HORIZONTAL ) )\n</code></pre> <p>A macro that returns true whenever a face object contains horizontal metrics (this is true for all font formats though).</p> also <p><code>FT_HAS_VERTICAL</code> can be used to check for vertical metrics.</p>"},{"location":"ft2-font_testing_macros.html#ft_has_vertical","title":"FT_HAS_VERTICAL","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_VERTICAL( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_VERTICAL ) )\n</code></pre> <p>A macro that returns true whenever a face object contains real vertical metrics (and not only synthesized ones).</p>"},{"location":"ft2-font_testing_macros.html#ft_has_kerning","title":"FT_HAS_KERNING","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_KERNING( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_KERNING ) )\n</code></pre> <p>A macro that returns true whenever a face object contains kerning data that can be accessed with <code>FT_Get_Kerning</code>.</p>"},{"location":"ft2-font_testing_macros.html#ft_has_fixed_sizes","title":"FT_HAS_FIXED_SIZES","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_FIXED_SIZES( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_FIXED_SIZES ) )\n</code></pre> <p>A macro that returns true whenever a face object contains some embedded bitmaps. See the <code>available_sizes</code> field of the <code>FT_FaceRec</code> structure.</p>"},{"location":"ft2-font_testing_macros.html#ft_has_glyph_names","title":"FT_HAS_GLYPH_NAMES","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_GLYPH_NAMES( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_GLYPH_NAMES ) )\n</code></pre> <p>A macro that returns true whenever a face object contains some glyph names that can be accessed through <code>FT_Get_Glyph_Name</code>.</p>"},{"location":"ft2-font_testing_macros.html#ft_has_color","title":"FT_HAS_COLOR","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_COLOR( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_COLOR ) )\n</code></pre> <p>A macro that returns true whenever a face object contains tables for color glyphs.</p> since <p>2.5.1</p>"},{"location":"ft2-font_testing_macros.html#ft_has_multiple_masters","title":"FT_HAS_MULTIPLE_MASTERS","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_MULTIPLE_MASTERS( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_MULTIPLE_MASTERS ) )\n</code></pre> <p>A macro that returns true whenever a face object contains some multiple masters. The functions provided by <code>FT_MULTIPLE_MASTERS_H</code> are then available to choose the exact design you want.</p>"},{"location":"ft2-font_testing_macros.html#ft_has_svg","title":"FT_HAS_SVG","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_SVG( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_SVG ) )\n</code></pre> <p>A macro that returns true whenever a face object contains an \u2018SVG\u00a0\u2019 OpenType table.</p> since <p>2.12</p>"},{"location":"ft2-font_testing_macros.html#ft_has_sbix","title":"FT_HAS_SBIX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_SBIX( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_SBIX ) )\n</code></pre> <p>A macro that returns true whenever a face object contains an \u2018sbix\u2019 OpenType table and outline glyphs.</p> <p>Currently, FreeType only supports bitmap glyphs in PNG format for this table (i.e., JPEG and TIFF formats are unsupported, as are Apple-specific formats not part of the OpenType specification).</p> note <p>For backward compatibility, a font with an \u2018sbix\u2019 table is treated as a bitmap-only face. Using <code>FT_Open_Face</code> with <code>FT_PARAM_TAG_IGNORE_SBIX</code>, an application can switch off \u2018sbix\u2019 handling so that the face is treated as an ordinary outline font with scalable outlines.</p> <p>Here is some pseudo code that roughly illustrates how to implement \u2018sbix\u2019 handling according to the OpenType specification. <pre><code>  if ( FT_HAS_SBIX( face ) )\n  {\n    // open font as a scalable one without sbix handling\n    FT_Face       face2;\n    FT_Parameter  param = { FT_PARAM_TAG_IGNORE_SBIX, NULL };\n    FT_Open_Args  args  = { FT_OPEN_PARAMS | ...,\n                            ...,\n                            1, &amp;param };\n\n\n    FT_Open_Face( library, &amp;args, 0, &amp;face2 );\n\n    &lt;sort `face-&gt;available_size` as necessary into\n     `preferred_sizes`[*]&gt;\n\n    for ( i = 0; i &lt; face-&gt;num_fixed_sizes; i++ )\n    {\n      size = preferred_sizes[i].size;\n\n      error = FT_Set_Pixel_Sizes( face, size, size );\n      &lt;error handling omitted&gt;\n\n      // check whether we have a glyph in a bitmap strike\n      error = FT_Load_Glyph( face,\n                             glyph_index,\n                             FT_LOAD_SBITS_ONLY          |\n                             FT_LOAD_BITMAP_METRICS_ONLY );\n      if ( error == FT_Err_Invalid_Argument )\n        continue;\n      else if ( error )\n        &lt;other error handling omitted&gt;\n      else\n        break;\n    }\n\n    if ( i != face-&gt;num_fixed_sizes )\n      &lt;load embedded bitmap with `FT_Load_Glyph`,\n       scale it, display it, etc.&gt;\n\n    if ( i == face-&gt;num_fixed_sizes  ||\n         FT_HAS_SBIX_OVERLAY( face ) )\n      &lt;use `face2` to load outline glyph with `FT_Load_Glyph`,\n       scale it, display it on top of the bitmap, etc.&gt;\n  }\n</code></pre></p> <p>[*] Assuming a target value of 400dpi and available strike sizes 100, 200, 300, and 400dpi, a possible order might be [400, 200, 300, 100]: scaling 200dpi to 400dpi usually gives better results than scaling 300dpi to 400dpi; it is also much faster. However, scaling 100dpi to 400dpi can yield a too pixelated result, thus the preference might be 300dpi over 100dpi.</p> since <p>2.12</p>"},{"location":"ft2-font_testing_macros.html#ft_has_sbix_overlay","title":"FT_HAS_SBIX_OVERLAY","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_SBIX_OVERLAY( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_SBIX_OVERLAY ) )\n</code></pre> <p>A macro that returns true whenever a face object contains an \u2018sbix\u2019 OpenType table with bit\u00a01 in its <code>flags</code> field set, instructing the application to overlay the bitmap strike with the corresponding outline glyph. See <code>FT_HAS_SBIX</code> for pseudo code how to use it.</p> since <p>2.12</p>"},{"location":"ft2-font_testing_macros.html#ft_is_sfnt","title":"FT_IS_SFNT","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_IS_SFNT( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_SFNT ) )\n</code></pre> <p>A macro that returns true whenever a face object contains a font whose format is based on the SFNT storage scheme. This usually means: TrueType fonts, OpenType fonts, as well as SFNT-based embedded bitmap fonts.</p> <p>If this macro is true, all functions defined in <code>FT_SFNT_NAMES_H</code> and <code>FT_TRUETYPE_TABLES_H</code> are available.</p>"},{"location":"ft2-font_testing_macros.html#ft_is_scalable","title":"FT_IS_SCALABLE","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_IS_SCALABLE( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_SCALABLE ) )\n</code></pre> <p>A macro that returns true whenever a face object contains a scalable font face (true for TrueType, Type\u00a01, Type\u00a042, CID, OpenType/CFF, and PFR font formats).</p>"},{"location":"ft2-font_testing_macros.html#ft_is_fixed_width","title":"FT_IS_FIXED_WIDTH","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_IS_FIXED_WIDTH( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_FIXED_WIDTH ) )\n</code></pre> <p>A macro that returns true whenever a face object contains a font face that contains fixed-width (or \u2018monospace\u2019, \u2018fixed-pitch\u2019, etc.) glyphs.</p>"},{"location":"ft2-font_testing_macros.html#ft_is_cid_keyed","title":"FT_IS_CID_KEYED","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_IS_CID_KEYED( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_CID_KEYED ) )\n</code></pre> <p>A macro that returns true whenever a face object contains a CID-keyed font. See the discussion of <code>FT_FACE_FLAG_CID_KEYED</code> for more details.</p> <p>If this macro is true, all functions defined in <code>FT_CID_H</code> are available.</p>"},{"location":"ft2-font_testing_macros.html#ft_is_tricky","title":"FT_IS_TRICKY","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_IS_TRICKY( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_TRICKY ) )\n</code></pre> <p>A macro that returns true whenever a face represents a \u2018tricky\u2019 font. See the discussion of <code>FT_FACE_FLAG_TRICKY</code> for more details.</p>"},{"location":"ft2-font_testing_macros.html#ft_is_named_instance","title":"FT_IS_NAMED_INSTANCE","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_IS_NAMED_INSTANCE( face ) \\\n          ( !!( (face)-&gt;face_index &amp; 0x7FFF0000L ) )\n</code></pre> <p>A macro that returns true whenever a face object is a named instance of a GX or OpenType variation font.</p> <p>[Since 2.9] Changing the design coordinates with <code>FT_Set_Var_Design_Coordinates</code> or <code>FT_Set_Var_Blend_Coordinates</code> does not influence the return value of this macro (only <code>FT_Set_Named_Instance</code> does that).</p> since <p>2.7</p>"},{"location":"ft2-font_testing_macros.html#ft_is_variation","title":"FT_IS_VARIATION","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_IS_VARIATION( face ) \\\n          ( !!( (face)-&gt;face_flags &amp; FT_FACE_FLAG_VARIATION ) )\n</code></pre> <p>A macro that returns true whenever a face object has been altered by <code>FT_Set_MM_Design_Coordinates</code>, <code>FT_Set_Var_Design_Coordinates</code>, <code>FT_Set_Var_Blend_Coordinates</code>, or <code>FT_Set_MM_WeightVector</code>.</p> since <p>2.9</p>"},{"location":"ft2-gasp_table.html","title":"Gasp Table","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb Gasp Table</p>"},{"location":"ft2-gasp_table.html#gasp-table","title":"Gasp Table","text":""},{"location":"ft2-gasp_table.html#synopsis","title":"Synopsis","text":"<p>The function <code>FT_Get_Gasp</code> can be used to query a TrueType or OpenType font for specific entries in its \u2018gasp\u2019 table, if any. This is mainly useful when implementing native TrueType hinting with the bytecode interpreter to duplicate the Windows text rendering results.</p>"},{"location":"ft2-gasp_table.html#ft_gasp_xxx","title":"FT_GASP_XXX","text":"<p>Defined in FT_GASP_H (freetype/ftgasp.h).</p> <pre><code>#define FT_GASP_NO_TABLE               -1\n#define FT_GASP_DO_GRIDFIT           0x01\n#define FT_GASP_DO_GRAY              0x02\n#define FT_GASP_SYMMETRIC_GRIDFIT    0x04\n#define FT_GASP_SYMMETRIC_SMOOTHING  0x08\n</code></pre> <p>A list of values and/or bit-flags returned by the <code>FT_Get_Gasp</code> function.</p> values FT_GASP_NO_TABLE <p>This special value means that there is no GASP table in this face. It is up to the client to decide what to do.</p> FT_GASP_DO_GRIDFIT <p>Grid-fitting and hinting should be performed at the specified ppem. This really means TrueType bytecode interpretation. If this bit is not set, no hinting gets applied.</p> FT_GASP_DO_GRAY <p>Anti-aliased rendering should be performed at the specified ppem. If not set, do monochrome rendering.</p> FT_GASP_SYMMETRIC_SMOOTHING <p>If set, smoothing along multiple axes must be used with ClearType.</p> FT_GASP_SYMMETRIC_GRIDFIT <p>Grid-fitting must be used with ClearType's symmetric smoothing.</p> note <p>The bit-flags <code>FT_GASP_DO_GRIDFIT</code> and <code>FT_GASP_DO_GRAY</code> are to be used for standard font rasterization only. Independently of that, <code>FT_GASP_SYMMETRIC_SMOOTHING</code> and <code>FT_GASP_SYMMETRIC_GRIDFIT</code> are to be used if ClearType is enabled (and <code>FT_GASP_DO_GRIDFIT</code> and <code>FT_GASP_DO_GRAY</code> are consequently ignored).</p> <p>\u2018ClearType\u2019 is Microsoft's implementation of LCD rendering, partly protected by patents.</p> since <p>2.3.0</p>"},{"location":"ft2-gasp_table.html#ft_get_gasp","title":"FT_Get_Gasp","text":"<p>Defined in FT_GASP_H (freetype/ftgasp.h).</p> <pre><code>  FT_EXPORT( FT_Int )\n  FT_Get_Gasp( FT_Face  face,\n               FT_UInt  ppem );\n</code></pre> <p>For a TrueType or OpenType font file, return the rasterizer behaviour flags from the font's \u2018gasp\u2019 table corresponding to a given character pixel size.</p> input face <p>The source face handle.</p> ppem <p>The vertical character pixel size.</p> return <p>Bit flags (see <code>FT_GASP_XXX</code>), or <code>FT_GASP_NO_TABLE</code> if there is no \u2018gasp\u2019 table in the face.</p> note <p>If you want to use the MM functionality of OpenType variation fonts (i.e., using <code>FT_Set_Var_Design_Coordinates</code> and friends), call this function after setting an instance since the return values can change.</p> since <p>2.3.0</p>"},{"location":"ft2-glyph_management.html","title":"Glyph Management","text":"<p>FreeType \u00bb Docs \u00bb Extended API \u00bb Glyph Management</p>"},{"location":"ft2-glyph_management.html#glyph-management","title":"Glyph Management","text":""},{"location":"ft2-glyph_management.html#synopsis","title":"Synopsis","text":"<p>This section contains definitions used to manage glyph data through generic <code>FT_Glyph</code> objects. Each of them can contain a bitmap, a vector outline, or even images in other formats. These objects are detached from <code>FT_Face</code>, contrary to <code>FT_GlyphSlot</code>.</p>"},{"location":"ft2-glyph_management.html#ft_glyph","title":"FT_Glyph","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct FT_GlyphRec_*  FT_Glyph;\n</code></pre> <p>Handle to an object used to model generic glyph images. It is a pointer to the <code>FT_GlyphRec</code> structure and can contain a glyph bitmap or pointer.</p> note <p>Glyph objects are not owned by the library. You must thus release them manually (through <code>FT_Done_Glyph</code>) before calling <code>FT_Done_FreeType</code>.</p>"},{"location":"ft2-glyph_management.html#ft_glyphrec","title":"FT_GlyphRec","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct  FT_GlyphRec_\n  {\n    FT_Library             library;\n    const FT_Glyph_Class*  clazz;\n    FT_Glyph_Format        format;\n    FT_Vector              advance;\n\n  } FT_GlyphRec;\n</code></pre> <p>The root glyph structure contains a given glyph image plus its advance width in 16.16 fixed-point format.</p> fields library <p>A handle to the FreeType library object.</p> clazz <p>A pointer to the glyph's class. Private.</p> format <p>The format of the glyph's image.</p> advance <p>A 16.16 vector that gives the glyph's advance width.</p>"},{"location":"ft2-glyph_management.html#ft_bitmapglyph","title":"FT_BitmapGlyph","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct FT_BitmapGlyphRec_*  FT_BitmapGlyph;\n</code></pre> <p>A handle to an object used to model a bitmap glyph image. This is a \u2018sub-class\u2019 of <code>FT_Glyph</code>, and a pointer to <code>FT_BitmapGlyphRec</code>.</p>"},{"location":"ft2-glyph_management.html#ft_bitmapglyphrec","title":"FT_BitmapGlyphRec","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct  FT_BitmapGlyphRec_\n  {\n    FT_GlyphRec  root;\n    FT_Int       left;\n    FT_Int       top;\n    FT_Bitmap    bitmap;\n\n  } FT_BitmapGlyphRec;\n</code></pre> <p>A structure used for bitmap glyph images. This really is a \u2018sub-class\u2019 of <code>FT_GlyphRec</code>.</p> fields root <p>The root fields of <code>FT_Glyph</code>.</p> left <p>The left-side bearing, i.e., the horizontal distance from the current pen position to the left border of the glyph bitmap.</p> top <p>The top-side bearing, i.e., the vertical distance from the current pen position to the top border of the glyph bitmap. This distance is positive for upwards\u00a0y!</p> bitmap <p>A descriptor for the bitmap.</p> note <p>You can typecast an <code>FT_Glyph</code> to <code>FT_BitmapGlyph</code> if you have <code>glyph-&gt;format == FT_GLYPH_FORMAT_BITMAP</code>. This lets you access the bitmap's contents easily.</p> <p>The corresponding pixel buffer is always owned by <code>FT_BitmapGlyph</code> and is thus created and destroyed with it.</p>"},{"location":"ft2-glyph_management.html#ft_outlineglyph","title":"FT_OutlineGlyph","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct FT_OutlineGlyphRec_*  FT_OutlineGlyph;\n</code></pre> <p>A handle to an object used to model an outline glyph image. This is a \u2018sub-class\u2019 of <code>FT_Glyph</code>, and a pointer to <code>FT_OutlineGlyphRec</code>.</p>"},{"location":"ft2-glyph_management.html#ft_outlineglyphrec","title":"FT_OutlineGlyphRec","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct  FT_OutlineGlyphRec_\n  {\n    FT_GlyphRec  root;\n    FT_Outline   outline;\n\n  } FT_OutlineGlyphRec;\n</code></pre> <p>A structure used for outline (vectorial) glyph images. This really is a \u2018sub-class\u2019 of <code>FT_GlyphRec</code>.</p> fields root <p>The root <code>FT_Glyph</code> fields.</p> outline <p>A descriptor for the outline.</p> note <p>You can typecast an <code>FT_Glyph</code> to <code>FT_OutlineGlyph</code> if you have <code>glyph-&gt;format == FT_GLYPH_FORMAT_OUTLINE</code>. This lets you access the outline's content easily.</p> <p>As the outline is extracted from a glyph slot, its coordinates are expressed normally in 26.6 pixels, unless the flag <code>FT_LOAD_NO_SCALE</code> was used in <code>FT_Load_Glyph</code> or <code>FT_Load_Char</code>.</p> <p>The outline's tables are always owned by the object and are destroyed with it.</p>"},{"location":"ft2-glyph_management.html#ft_svgglyph","title":"FT_SvgGlyph","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct FT_SvgGlyphRec_*  FT_SvgGlyph;\n</code></pre> <p>A handle to an object used to model an SVG glyph. This is a \u2018sub-class\u2019 of <code>FT_Glyph</code>, and a pointer to <code>FT_SvgGlyphRec</code>.</p> since <p>2.12</p>"},{"location":"ft2-glyph_management.html#ft_svgglyphrec","title":"FT_SvgGlyphRec","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef struct  FT_SvgGlyphRec_\n  {\n    FT_GlyphRec  root;\n\n    FT_Byte*  svg_document;\n    FT_ULong  svg_document_length;\n\n    FT_UInt  glyph_index;\n\n    FT_Size_Metrics  metrics;\n    FT_UShort        units_per_EM;\n\n    FT_UShort  start_glyph_id;\n    FT_UShort  end_glyph_id;\n\n    FT_Matrix  transform;\n    FT_Vector  delta;\n\n  } FT_SvgGlyphRec;\n</code></pre> <p>A structure used for OT-SVG glyphs. This is a \u2018sub-class\u2019 of <code>FT_GlyphRec</code>.</p> fields root <p>The root <code>FT_GlyphRec</code> fields.</p> svg_document <p>A pointer to the SVG document.</p> svg_document_length <p>The length of <code>svg_document</code>.</p> glyph_index <p>The index of the glyph to be rendered.</p> metrics <p>A metrics object storing the size information.</p> units_per_EM <p>The size of the EM square.</p> start_glyph_id <p>The first glyph ID in the glyph range covered by this document.</p> end_glyph_id <p>The last glyph ID in the glyph range covered by this document.</p> transform <p>A 2x2 transformation matrix to apply to the glyph while rendering it.</p> delta <p>Translation to apply to the glyph while rendering.</p> note <p>The Glyph Management API requires <code>FT_Glyph</code> or its \u2018sub-class\u2019 to have all the information needed to completely define the glyph's rendering. Outline-based glyphs can directly apply transformations to the outline but this is not possible for an SVG document that hasn't been parsed. Therefore, the transformation is stored along with the document. In the absence of a \u2018ViewBox\u2019 or \u2018Width\u2019/'Height' attribute, the size of the ViewPort should be assumed to be \u2018units_per_EM\u2019.</p>"},{"location":"ft2-glyph_management.html#ft_new_glyph","title":"FT_New_Glyph","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Glyph( FT_Library       library,\n                FT_Glyph_Format  format,\n                FT_Glyph         *aglyph );\n</code></pre> <p>A function used to create a new empty glyph image. Note that the created <code>FT_Glyph</code> object must be released with <code>FT_Done_Glyph</code>.</p> input library <p>A handle to the FreeType library object.</p> format <p>The format of the glyph's image.</p> output aglyph <p>A handle to the glyph object.</p> return <p>FreeType error code. 0\u00a0means success.</p> since <p>2.10</p>"},{"location":"ft2-glyph_management.html#ft_get_glyph","title":"FT_Get_Glyph","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Glyph( FT_GlyphSlot  slot,\n                FT_Glyph     *aglyph );\n</code></pre> <p>A function used to extract a glyph image from a slot. Note that the created <code>FT_Glyph</code> object must be released with <code>FT_Done_Glyph</code>.</p> input slot <p>A handle to the source glyph slot.</p> output aglyph <p>A handle to the glyph object. <code>NULL</code> in case of error.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Because <code>*aglyph-&gt;advance.x</code> and <code>*aglyph-&gt;advance.y</code> are 16.16 fixed-point numbers, <code>slot-&gt;advance.x</code> and <code>slot-&gt;advance.y</code> (which are in 26.6 fixed-point format) must be in the range ]-32768;32768[.</p>"},{"location":"ft2-glyph_management.html#ft_glyph_copy","title":"FT_Glyph_Copy","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Glyph_Copy( FT_Glyph   source,\n                 FT_Glyph  *target );\n</code></pre> <p>A function used to copy a glyph image. Note that the created <code>FT_Glyph</code> object must be released with <code>FT_Done_Glyph</code>.</p> input source <p>A handle to the source glyph object.</p> output target <p>A handle to the target glyph object. <code>NULL</code> in case of error.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-glyph_management.html#ft_glyph_transform","title":"FT_Glyph_Transform","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Glyph_Transform( FT_Glyph          glyph,\n                      const FT_Matrix*  matrix,\n                      const FT_Vector*  delta );\n</code></pre> <p>Transform a glyph image if its format is scalable.</p> inout glyph <p>A handle to the target glyph object.</p> input matrix <p>A pointer to a 2x2 matrix to apply.</p> delta <p>A pointer to a 2d vector to apply. Coordinates are expressed in 1/64 of a pixel.</p> return <p>FreeType error code (if not 0, the glyph format is not scalable).</p> note <p>The 2x2 transformation matrix is also applied to the glyph's advance vector.</p>"},{"location":"ft2-glyph_management.html#ft_glyph_bbox_mode","title":"FT_Glyph_BBox_Mode","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  typedef enum  FT_Glyph_BBox_Mode_\n  {\n    FT_GLYPH_BBOX_UNSCALED  = 0,\n    FT_GLYPH_BBOX_SUBPIXELS = 0,\n    FT_GLYPH_BBOX_GRIDFIT   = 1,\n    FT_GLYPH_BBOX_TRUNCATE  = 2,\n    FT_GLYPH_BBOX_PIXELS    = 3\n\n  } FT_Glyph_BBox_Mode;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `FT_Glyph_BBox_Mode` values instead                   */\n#define ft_glyph_bbox_unscaled   FT_GLYPH_BBOX_UNSCALED\n#define ft_glyph_bbox_subpixels  FT_GLYPH_BBOX_SUBPIXELS\n#define ft_glyph_bbox_gridfit    FT_GLYPH_BBOX_GRIDFIT\n#define ft_glyph_bbox_truncate   FT_GLYPH_BBOX_TRUNCATE\n#define ft_glyph_bbox_pixels     FT_GLYPH_BBOX_PIXELS\n</code></pre> <p>The mode how the values of <code>FT_Glyph_Get_CBox</code> are returned.</p> values FT_GLYPH_BBOX_UNSCALED <p>Return unscaled font units.</p> FT_GLYPH_BBOX_SUBPIXELS <p>Return unfitted 26.6 coordinates.</p> FT_GLYPH_BBOX_GRIDFIT <p>Return grid-fitted 26.6 coordinates.</p> FT_GLYPH_BBOX_TRUNCATE <p>Return coordinates in integer pixels.</p> FT_GLYPH_BBOX_PIXELS <p>Return grid-fitted pixel coordinates.</p>"},{"location":"ft2-glyph_management.html#ft_glyph_get_cbox","title":"FT_Glyph_Get_CBox","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Glyph_Get_CBox( FT_Glyph  glyph,\n                     FT_UInt   bbox_mode,\n                     FT_BBox  *acbox );\n</code></pre> <p>Return a glyph's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).</p> <p>Computing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.</p> input glyph <p>A handle to the source glyph object.</p> mode <p>The mode that indicates how to interpret the returned bounding box values.</p> output acbox <p>The glyph coordinate bounding box. Coordinates are expressed in 1/64 of pixels if it is grid-fitted.</p> note <p>Coordinates are relative to the glyph origin, using the y\u00a0upwards convention.</p> <p>If the glyph has been loaded with <code>FT_LOAD_NO_SCALE</code>, <code>bbox_mode</code> must be set to <code>FT_GLYPH_BBOX_UNSCALED</code> to get unscaled font units in 26.6 pixel format. The value <code>FT_GLYPH_BBOX_SUBPIXELS</code> is another name for this constant.</p> <p>If the font is tricky and the glyph has been loaded with <code>FT_LOAD_NO_SCALE</code>, the resulting CBox is meaningless. To get reasonable values for the CBox it is necessary to load the glyph at a large ppem value (so that the hinting instructions can properly shift and scale the subglyphs), then extracting the CBox, which can be eventually converted back to font units.</p> <p>Note that the maximum coordinates are exclusive, which means that one can compute the width and height of the glyph image (be it in integer or 26.6 pixels) as: <pre><code>  width  = bbox.xMax - bbox.xMin;\n  height = bbox.yMax - bbox.yMin;\n</code></pre></p> <p>Note also that for 26.6 coordinates, if <code>bbox_mode</code> is set to <code>FT_GLYPH_BBOX_GRIDFIT</code>, the coordinates will also be grid-fitted, which corresponds to: <pre><code>  bbox.xMin = FLOOR(bbox.xMin);\n  bbox.yMin = FLOOR(bbox.yMin);\n  bbox.xMax = CEILING(bbox.xMax);\n  bbox.yMax = CEILING(bbox.yMax);\n</code></pre></p> <p>To get the bbox in pixel coordinates, set <code>bbox_mode</code> to <code>FT_GLYPH_BBOX_TRUNCATE</code>.</p> <p>To get the bbox in grid-fitted pixel coordinates, set <code>bbox_mode</code> to <code>FT_GLYPH_BBOX_PIXELS</code>.</p>"},{"location":"ft2-glyph_management.html#ft_glyph_to_bitmap","title":"FT_Glyph_To_Bitmap","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Glyph_To_Bitmap( FT_Glyph*         the_glyph,\n                      FT_Render_Mode    render_mode,\n                      const FT_Vector*  origin,\n                      FT_Bool           destroy );\n</code></pre> <p>Convert a given glyph object to a bitmap glyph object.</p> inout the_glyph <p>A pointer to a handle to the target glyph.</p> input render_mode <p>An enumeration that describes how the data is rendered.</p> origin <p>A pointer to a vector used to translate the glyph image before rendering. Can be\u00a00 (if no translation). The origin is expressed in 26.6 pixels.</p> destroy <p>A boolean that indicates that the original glyph image should be destroyed by this function. It is never destroyed in case of error.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function does nothing if the glyph format isn't scalable.</p> <p>The glyph image is translated with the <code>origin</code> vector before rendering.</p> <p>The first parameter is a pointer to an <code>FT_Glyph</code> handle that will be replaced by this function (with newly allocated data). Typically, you would do something like the following (omitting error handling). <pre><code>  FT_Glyph        glyph;\n  FT_BitmapGlyph  glyph_bitmap;\n\n\n  // load glyph\n  error = FT_Load_Char( face, glyph_index, FT_LOAD_DEFAULT );\n\n  // extract glyph image\n  error = FT_Get_Glyph( face-&gt;glyph, &amp;glyph );\n\n  // convert to a bitmap (default render mode + destroying old)\n  if ( glyph-&gt;format != FT_GLYPH_FORMAT_BITMAP )\n  {\n    error = FT_Glyph_To_Bitmap( &amp;glyph, FT_RENDER_MODE_NORMAL,\n                                0, 1 );\n    if ( error ) // `glyph' unchanged\n      ...\n  }\n\n  // access bitmap content by typecasting\n  glyph_bitmap = (FT_BitmapGlyph)glyph;\n\n  // do funny stuff with it, like blitting/drawing\n  ...\n\n  // discard glyph image (bitmap or not)\n  FT_Done_Glyph( glyph );\n</code></pre></p> <p>Here is another example, again without error handling. <pre><code>  FT_Glyph  glyphs[MAX_GLYPHS]\n\n\n  ...\n\n  for ( idx = 0; i &lt; MAX_GLYPHS; i++ )\n    error = FT_Load_Glyph( face, idx, FT_LOAD_DEFAULT ) ||\n            FT_Get_Glyph ( face-&gt;glyph, &amp;glyphs[idx] );\n\n  ...\n\n  for ( idx = 0; i &lt; MAX_GLYPHS; i++ )\n  {\n    FT_Glyph  bitmap = glyphs[idx];\n\n\n    ...\n\n    // after this call, `bitmap' no longer points into\n    // the `glyphs' array (and the old value isn't destroyed)\n    FT_Glyph_To_Bitmap( &amp;bitmap, FT_RENDER_MODE_MONO, 0, 0 );\n\n    ...\n\n    FT_Done_Glyph( bitmap );\n  }\n\n  ...\n\n  for ( idx = 0; i &lt; MAX_GLYPHS; i++ )\n    FT_Done_Glyph( glyphs[idx] );\n</code></pre></p>"},{"location":"ft2-glyph_management.html#ft_done_glyph","title":"FT_Done_Glyph","text":"<p>Defined in FT_GLYPH_H (freetype/ftglyph.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Done_Glyph( FT_Glyph  glyph );\n</code></pre> <p>Destroy a given glyph.</p> input glyph <p>A handle to the target glyph object. Can be <code>NULL</code>.</p>"},{"location":"ft2-glyph_retrieval.html","title":"Glyph Retrieval","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Glyph Retrieval</p>"},{"location":"ft2-glyph_retrieval.html#glyph-retrieval","title":"Glyph Retrieval","text":""},{"location":"ft2-glyph_retrieval.html#synopsis","title":"Synopsis","text":"<p>The functions and structures collected in this section operate on single glyphs, of which <code>FT_Load_Glyph</code> is most important.</p>"},{"location":"ft2-glyph_retrieval.html#ft_glyphslot","title":"FT_GlyphSlot","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_GlyphSlotRec_*  FT_GlyphSlot;\n</code></pre> <p>A handle to a given \u2018glyph slot\u2019. A slot is a container that can hold any of the glyphs contained in its parent face.</p> <p>In other words, each time you call <code>FT_Load_Glyph</code> or <code>FT_Load_Char</code>, the slot's content is erased by the new glyph data, i.e., the glyph's metrics, its image (bitmap or outline), and other control information.</p> also <p>See <code>FT_GlyphSlotRec</code> for the publicly accessible glyph fields.</p>"},{"location":"ft2-glyph_retrieval.html#ft_glyphslotrec","title":"FT_GlyphSlotRec","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_GlyphSlotRec_\n  {\n    FT_Library        library;\n    FT_Face           face;\n    FT_GlyphSlot      next;\n    FT_UInt           glyph_index; /* new in 2.10; was reserved previously */\n    FT_Generic        generic;\n\n    FT_Glyph_Metrics  metrics;\n    FT_Fixed          linearHoriAdvance;\n    FT_Fixed          linearVertAdvance;\n    FT_Vector         advance;\n\n    FT_Glyph_Format   format;\n\n    FT_Bitmap         bitmap;\n    FT_Int            bitmap_left;\n    FT_Int            bitmap_top;\n\n    FT_Outline        outline;\n\n    FT_UInt           num_subglyphs;\n    FT_SubGlyph       subglyphs;\n\n    void*             control_data;\n    long              control_len;\n\n    FT_Pos            lsb_delta;\n    FT_Pos            rsb_delta;\n\n    void*             other;\n\n    FT_Slot_Internal  internal;\n\n  } FT_GlyphSlotRec;\n</code></pre> <p>FreeType root glyph slot class structure. A glyph slot is a container where individual glyphs can be loaded, be they in outline or bitmap format.</p> fields library <p>A handle to the FreeType library instance this slot belongs to.</p> face <p>A handle to the parent face object.</p> next <p>In some cases (like some font tools), several glyph slots per face object can be a good thing. As this is rare, the glyph slots are listed through a direct, single-linked list using its <code>next</code> field.</p> glyph_index <p>[Since 2.10] The glyph index passed as an argument to <code>FT_Load_Glyph</code> while initializing the glyph slot.</p> generic <p>A typeless pointer unused by the FreeType library or any of its drivers. It can be used by client applications to link their own data to each glyph slot object.</p> metrics <p>The metrics of the last loaded glyph in the slot. The returned values depend on the last load flags (see the <code>FT_Load_Glyph</code> API function) and can be expressed either in 26.6 fractional pixels or font units.</p> <p>Note that even when the glyph image is transformed, the metrics are not.</p> linearHoriAdvance <p>The advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless <code>FT_LOAD_LINEAR_DESIGN</code> is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for scalable glyphs.</p> linearVertAdvance <p>The advance height of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless <code>FT_LOAD_LINEAR_DESIGN</code> is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for scalable glyphs.</p> advance <p>This shorthand is, depending on <code>FT_LOAD_IGNORE_TRANSFORM</code>, the transformed (hinted) advance width for the glyph, in 26.6 fractional pixel format. As specified with <code>FT_LOAD_VERTICAL_LAYOUT</code>, it uses either the <code>horiAdvance</code> or the <code>vertAdvance</code> value of <code>metrics</code> field.</p> format <p>This field indicates the format of the image contained in the glyph slot. Typically <code>FT_GLYPH_FORMAT_BITMAP</code>, <code>FT_GLYPH_FORMAT_OUTLINE</code>, or <code>FT_GLYPH_FORMAT_COMPOSITE</code>, but other values are possible.</p> bitmap <p>This field is used as a bitmap descriptor. Note that the address and content of the bitmap buffer can change between calls of <code>FT_Load_Glyph</code> and a few other functions.</p> bitmap_left <p>The bitmap's left bearing expressed in integer pixels.</p> bitmap_top <p>The bitmap's top bearing expressed in integer pixels. This is the distance from the baseline to the top-most glyph scanline, upwards y\u00a0coordinates being positive.</p> outline <p>The outline descriptor for the current glyph image if its format is <code>FT_GLYPH_FORMAT_OUTLINE</code>. Once a glyph is loaded, <code>outline</code> can be transformed, distorted, emboldened, etc. However, it must not be freed.</p> <p>[Since 2.10.1] If <code>FT_LOAD_NO_SCALE</code> is set, outline coordinates of OpenType variation fonts for a selected instance are internally handled as 26.6 fractional font units but returned as (rounded) integers, as expected. To get unrounded font units, don't use <code>FT_LOAD_NO_SCALE</code> but load the glyph with <code>FT_LOAD_NO_HINTING</code> and scale it, using the font's <code>units_per_EM</code> value as the ppem.</p> num_subglyphs <p>The number of subglyphs in a composite glyph. This field is only valid for the composite glyph format that should normally only be loaded with the <code>FT_LOAD_NO_RECURSE</code> flag.</p> subglyphs <p>An array of subglyph descriptors for composite glyphs. There are <code>num_subglyphs</code> elements in there. Currently internal to FreeType.</p> control_data <p>Certain font drivers can also return the control data for a given glyph image (e.g. TrueType bytecode, Type\u00a01 charstrings, etc.). This field is a pointer to such data; it is currently internal to FreeType.</p> control_len <p>This is the length in bytes of the control data. Currently internal to FreeType.</p> other <p>Reserved.</p> lsb_delta <p>The difference between hinted and unhinted left side bearing while auto-hinting is active. Zero otherwise.</p> rsb_delta <p>The difference between hinted and unhinted right side bearing while auto-hinting is active. Zero otherwise.</p> note <p>If <code>FT_Load_Glyph</code> is called with default flags (see <code>FT_LOAD_DEFAULT</code>) the glyph image is loaded in the glyph slot in its native format (e.g., an outline glyph for TrueType and Type\u00a01 formats). [Since 2.9] The prospective bitmap metrics are calculated according to <code>FT_LOAD_TARGET_XXX</code> and other flags even for the outline glyph, even if <code>FT_LOAD_RENDER</code> is not set.</p> <p>This image can later be converted into a bitmap by calling <code>FT_Render_Glyph</code>. This function searches the current renderer for the native image's format, then invokes it.</p> <p>The renderer is in charge of transforming the native image through the slot's face transformation fields, then converting it into a bitmap that is returned in <code>slot-&gt;bitmap</code>.</p> <p>Note that <code>slot-&gt;bitmap_left</code> and <code>slot-&gt;bitmap_top</code> are also used to specify the position of the bitmap relative to the current pen position (e.g., coordinates (0,0) on the baseline). Of course, <code>slot-&gt;format</code> is also changed to <code>FT_GLYPH_FORMAT_BITMAP</code>.</p> <p>Here is a small pseudo code fragment that shows how to use <code>lsb_delta</code> and <code>rsb_delta</code> to do fractional positioning of glyphs: <pre><code>  FT_GlyphSlot  slot     = face-&gt;glyph;\n  FT_Pos        origin_x = 0;\n\n\n  for all glyphs do\n    &lt;load glyph with `FT_Load_Glyph'&gt;\n\n    FT_Outline_Translate( slot-&gt;outline, origin_x &amp; 63, 0 );\n\n    &lt;save glyph image, or render glyph, or ...&gt;\n\n    &lt;compute kern between current and next glyph\n     and add it to `origin_x'&gt;\n\n    origin_x += slot-&gt;advance.x;\n    origin_x += slot-&gt;lsb_delta - slot-&gt;rsb_delta;\n  endfor\n</code></pre></p> <p>Here is another small pseudo code fragment that shows how to use <code>lsb_delta</code> and <code>rsb_delta</code> to improve integer positioning of glyphs: <pre><code>  FT_GlyphSlot  slot           = face-&gt;glyph;\n  FT_Pos        origin_x       = 0;\n  FT_Pos        prev_rsb_delta = 0;\n\n\n  for all glyphs do\n    &lt;compute kern between current and previous glyph\n     and add it to `origin_x'&gt;\n\n    &lt;load glyph with `FT_Load_Glyph'&gt;\n\n    if ( prev_rsb_delta - slot-&gt;lsb_delta &gt;  32 )\n      origin_x -= 64;\n    else if ( prev_rsb_delta - slot-&gt;lsb_delta &lt; -31 )\n      origin_x += 64;\n\n    prev_rsb_delta = slot-&gt;rsb_delta;\n\n    &lt;save glyph image, or render glyph, or ...&gt;\n\n    origin_x += slot-&gt;advance.x;\n  endfor\n</code></pre></p> <p>If you use strong auto-hinting, you must apply these delta values! Otherwise you will experience far too large inter-glyph spacing at small rendering sizes in most cases. Note that it doesn't harm to use the above code for other hinting modes also, since the delta values are zero then.</p>"},{"location":"ft2-glyph_retrieval.html#ft_glyph_metrics","title":"FT_Glyph_Metrics","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_Glyph_Metrics_\n  {\n    FT_Pos  width;\n    FT_Pos  height;\n\n    FT_Pos  horiBearingX;\n    FT_Pos  horiBearingY;\n    FT_Pos  horiAdvance;\n\n    FT_Pos  vertBearingX;\n    FT_Pos  vertBearingY;\n    FT_Pos  vertAdvance;\n\n  } FT_Glyph_Metrics;\n</code></pre> <p>A structure to model the metrics of a single glyph. The values are expressed in 26.6 fractional pixel format; if the flag <code>FT_LOAD_NO_SCALE</code> has been used while loading the glyph, values are expressed in font units instead.</p> fields width <p>The glyph's width.</p> height <p>The glyph's height.</p> horiBearingX <p>Left side bearing for horizontal layout.</p> horiBearingY <p>Top side bearing for horizontal layout.</p> horiAdvance <p>Advance width for horizontal layout.</p> vertBearingX <p>Left side bearing for vertical layout.</p> vertBearingY <p>Top side bearing for vertical layout. Larger positive values mean further below the vertical glyph origin.</p> vertAdvance <p>Advance height for vertical layout. Positive values mean the glyph has a positive advance downward.</p> note <p>If not disabled with <code>FT_LOAD_NO_HINTING</code>, the values represent dimensions of the hinted glyph (in case hinting is applicable).</p> <p>Stroking a glyph with an outside border does not increase <code>horiAdvance</code> or <code>vertAdvance</code>; you have to manually adjust these values to account for the added width and height.</p> <p>FreeType doesn't use the \u2018VORG\u2019 table data for CFF fonts because it doesn't have an interface to quickly retrieve the glyph height. The y\u00a0coordinate of the vertical origin can be simply computed as <code>vertBearingY + height</code> after loading a glyph.</p>"},{"location":"ft2-glyph_retrieval.html#ft_load_glyph","title":"FT_Load_Glyph","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Load_Glyph( FT_Face   face,\n                 FT_UInt   glyph_index,\n                 FT_Int32  load_flags );\n</code></pre> <p>Load a glyph into the glyph slot of a face object.</p> inout face <p>A handle to the target face object where the glyph is loaded.</p> input glyph_index <p>The index of the glyph in the font file. For CID-keyed fonts (either in PS or in CFF format) this argument specifies the CID value.</p> load_flags <p>A flag indicating what to load for this glyph. The <code>FT_LOAD_XXX</code> flags can be used to control the glyph loading process (e.g., whether the outline should be scaled, whether to load bitmaps or not, whether to hint the outline, etc).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>For proper scaling and hinting, the active <code>FT_Size</code> object owned by the face has to be meaningfully initialized by calling <code>FT_Set_Char_Size</code> before this function, for example. The loaded glyph may be transformed. See <code>FT_Set_Transform</code> for the details.</p> <p>For subsetted CID-keyed fonts, <code>FT_Err_Invalid_Argument</code> is returned for invalid CID values (that is, for CID values that don't have a corresponding glyph in the font). See the discussion of the <code>FT_FACE_FLAG_CID_KEYED</code> flag for more details.</p> <p>If you receive <code>FT_Err_Glyph_Too_Big</code>, try getting the glyph outline at EM size, then scale it manually and fill it as a graphics operation.</p>"},{"location":"ft2-glyph_retrieval.html#ft_load_xxx","title":"FT_LOAD_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_LOAD_DEFAULT                      0x0\n#define FT_LOAD_NO_SCALE                     ( 1L &lt;&lt; 0  )\n#define FT_LOAD_NO_HINTING                   ( 1L &lt;&lt; 1  )\n#define FT_LOAD_RENDER                       ( 1L &lt;&lt; 2  )\n#define FT_LOAD_NO_BITMAP                    ( 1L &lt;&lt; 3  )\n#define FT_LOAD_VERTICAL_LAYOUT              ( 1L &lt;&lt; 4  )\n#define FT_LOAD_FORCE_AUTOHINT               ( 1L &lt;&lt; 5  )\n#define FT_LOAD_CROP_BITMAP                  ( 1L &lt;&lt; 6  )\n#define FT_LOAD_PEDANTIC                     ( 1L &lt;&lt; 7  )\n#define FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH  ( 1L &lt;&lt; 9  )\n#define FT_LOAD_NO_RECURSE                   ( 1L &lt;&lt; 10 )\n#define FT_LOAD_IGNORE_TRANSFORM             ( 1L &lt;&lt; 11 )\n#define FT_LOAD_MONOCHROME                   ( 1L &lt;&lt; 12 )\n#define FT_LOAD_LINEAR_DESIGN                ( 1L &lt;&lt; 13 )\n#define FT_LOAD_SBITS_ONLY                   ( 1L &lt;&lt; 14 )\n#define FT_LOAD_NO_AUTOHINT                  ( 1L &lt;&lt; 15 )\n  /* Bits 16-19 are used by `FT_LOAD_TARGET_` */\n#define FT_LOAD_COLOR                        ( 1L &lt;&lt; 20 )\n#define FT_LOAD_COMPUTE_METRICS              ( 1L &lt;&lt; 21 )\n#define FT_LOAD_BITMAP_METRICS_ONLY          ( 1L &lt;&lt; 22 )\n#define FT_LOAD_NO_SVG                       ( 1L &lt;&lt; 24 )\n</code></pre> <p>A list of bit field constants for <code>FT_Load_Glyph</code> to indicate what kind of operations to perform during glyph loading.</p> values FT_LOAD_DEFAULT <p>Corresponding to\u00a00, this value is used as the default glyph load operation. In this case, the following happens:</p> <ol> <li><p>FreeType looks for a bitmap for the glyph corresponding to the face's current size. If one is found, the function returns. The bitmap data can be accessed from the glyph slot (see note below).</p> </li> <li><p>If no embedded bitmap is searched for or found, FreeType looks for a scalable outline. If one is found, it is loaded from the font file, scaled to device pixels, then \u2018hinted\u2019 to the pixel grid in order to optimize it. The outline data can be accessed from the glyph slot (see note below).</p> </li> </ol> <p>Note that by default the glyph loader doesn't render outlines into bitmaps. The following flags are used to modify this default behaviour to more specific and useful cases.</p> FT_LOAD_NO_SCALE <p>Don't scale the loaded outline glyph but keep it in font units. This flag is also assumed if <code>FT_Size</code> owned by the face was not properly initialized.</p> <p>This flag implies <code>FT_LOAD_NO_HINTING</code> and <code>FT_LOAD_NO_BITMAP</code>, and unsets <code>FT_LOAD_RENDER</code>.</p> <p>If the font is \u2018tricky\u2019 (see <code>FT_FACE_FLAG_TRICKY</code> for more), using <code>FT_LOAD_NO_SCALE</code> usually yields meaningless outlines because the subglyphs must be scaled and positioned with hinting instructions. This can be solved by loading the font without <code>FT_LOAD_NO_SCALE</code> and setting the character size to <code>font-&gt;units_per_EM</code>.</p> FT_LOAD_NO_HINTING <p>Disable hinting. This generally generates \u2018blurrier\u2019 bitmap glyphs when the glyphs are rendered in any of the anti-aliased modes. See also the note below.</p> <p>This flag is implied by <code>FT_LOAD_NO_SCALE</code>.</p> FT_LOAD_RENDER <p>Call <code>FT_Render_Glyph</code> after the glyph is loaded. By default, the glyph is rendered in <code>FT_RENDER_MODE_NORMAL</code> mode. This can be overridden by <code>FT_LOAD_TARGET_XXX</code> or <code>FT_LOAD_MONOCHROME</code>.</p> <p>This flag is unset by <code>FT_LOAD_NO_SCALE</code>.</p> FT_LOAD_NO_BITMAP <p>Ignore bitmap strikes when loading. Bitmap-only fonts ignore this flag.</p> <p><code>FT_LOAD_NO_SCALE</code> always sets this flag.</p> FT_LOAD_SBITS_ONLY <p>[Since 2.12] This is the opposite of <code>FT_LOAD_NO_BITMAP</code>, more or less: <code>FT_Load_Glyph</code> returns <code>FT_Err_Invalid_Argument</code> if the face contains a bitmap strike for the given size (or the strike selected by <code>FT_Select_Size</code>) but there is no glyph in the strike.</p> <p>Note that this load flag was part of FreeType since version 2.0.6 but previously tagged as internal.</p> FT_LOAD_VERTICAL_LAYOUT <p>Load the glyph for vertical text layout. In particular, the <code>advance</code> value in the <code>FT_GlyphSlotRec</code> structure is set to the <code>vertAdvance</code> value of the <code>metrics</code> field.</p> <p>In case <code>FT_HAS_VERTICAL</code> doesn't return true, you shouldn't use this flag currently. Reason is that in this case vertical metrics get synthesized, and those values are not always consistent across various font formats.</p> FT_LOAD_FORCE_AUTOHINT <p>Prefer the auto-hinter over the font's native hinter. See also the note below.</p> FT_LOAD_PEDANTIC <p>Make the font driver perform pedantic verifications during glyph loading and hinting. This is mostly used to detect broken glyphs in fonts. By default, FreeType tries to handle broken fonts also.</p> <p>In particular, errors from the TrueType bytecode engine are not passed to the application if this flag is not set; this might result in partially hinted or distorted glyphs in case a glyph's bytecode is buggy.</p> FT_LOAD_NO_RECURSE <p>Don't load composite glyphs recursively. Instead, the font driver fills the <code>num_subglyph</code> and <code>subglyphs</code> values of the glyph slot; it also sets <code>glyph-&gt;format</code> to <code>FT_GLYPH_FORMAT_COMPOSITE</code>. The description of subglyphs can then be accessed with <code>FT_Get_SubGlyph_Info</code>.</p> <p>Don't use this flag for retrieving metrics information since some font drivers only return rudimentary data.</p> <p>This flag implies <code>FT_LOAD_NO_SCALE</code> and <code>FT_LOAD_IGNORE_TRANSFORM</code>.</p> FT_LOAD_IGNORE_TRANSFORM <p>Ignore the transform matrix set by <code>FT_Set_Transform</code>.</p> FT_LOAD_MONOCHROME <p>This flag is used with <code>FT_LOAD_RENDER</code> to indicate that you want to render an outline glyph to a 1-bit monochrome bitmap glyph, with 8\u00a0pixels packed into each byte of the bitmap data.</p> <p>Note that this has no effect on the hinting algorithm used. You should rather use <code>FT_LOAD_TARGET_MONO</code> so that the monochrome-optimized hinting algorithm is used.</p> FT_LOAD_LINEAR_DESIGN <p>Keep <code>linearHoriAdvance</code> and <code>linearVertAdvance</code> fields of <code>FT_GlyphSlotRec</code> in font units. See <code>FT_GlyphSlotRec</code> for details.</p> FT_LOAD_NO_AUTOHINT <p>Disable the auto-hinter. See also the note below.</p> FT_LOAD_COLOR <p>Load colored glyphs. FreeType searches in the following order; there are slight differences depending on the font format.</p> <p>[Since 2.5] Load embedded color bitmap images (provided <code>FT_LOAD_NO_BITMAP</code> is not set). The resulting color bitmaps, if available, have the <code>FT_PIXEL_MODE_BGRA</code> format, with pre-multiplied color channels. If the flag is not set and color bitmaps are found, they are converted to 256-level gray bitmaps, using the <code>FT_PIXEL_MODE_GRAY</code> format.</p> <p>[Since 2.12] If the glyph index maps to an entry in the face's \u2018SVG\u00a0\u2019 table, load the associated SVG document from this table and set the <code>format</code> field of <code>FT_GlyphSlotRec</code> to <code>FT_GLYPH_FORMAT_SVG</code> ([since 2.13.1] provided <code>FT_LOAD_NO_SVG</code> is not set). Note that FreeType itself can't render SVG documents; however, the library provides hooks to seamlessly integrate an external renderer. See sections \u2018The SVG driver\u2019 and \u2018OpenType SVG Fonts\u2019 for more.</p> <p>[Since 2.10, experimental] If the glyph index maps to an entry in the face's \u2018COLR\u2019 table with a \u2018CPAL\u2019 palette table (as defined in the OpenType specification), make <code>FT_Render_Glyph</code> provide a default blending of the color glyph layers associated with the glyph index, using the same bitmap format as embedded color bitmap images. This is mainly for convenience and works only for glyphs in \u2018COLR\u2019 v0 tables (or glyphs in \u2018COLR\u2019 v1 tables that exclusively use v0 features). For full control of color layers use <code>FT_Get_Color_Glyph_Layer</code> and FreeType's color functions like <code>FT_Palette_Select</code> instead of setting <code>FT_LOAD_COLOR</code> for rendering so that the client application can handle blending by itself.</p> FT_LOAD_NO_SVG <p>[Since 2.13.1] Ignore SVG glyph data when loading.</p> FT_LOAD_COMPUTE_METRICS <p>[Since 2.6.1] Compute glyph metrics from the glyph data, without the use of bundled metrics tables (for example, the \u2018hdmx\u2019 table in TrueType fonts). This flag is mainly used by font validating or font editing applications, which need to ignore, verify, or edit those tables.</p> <p>Currently, this flag is only implemented for TrueType fonts.</p> FT_LOAD_BITMAP_METRICS_ONLY <p>[Since 2.7.1] Request loading of the metrics and bitmap image information of a (possibly embedded) bitmap glyph without allocating or copying the bitmap image data itself. No effect if the target glyph is not a bitmap image.</p> <p>This flag unsets <code>FT_LOAD_RENDER</code>.</p> FT_LOAD_CROP_BITMAP <p>Ignored. Deprecated.</p> FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH <p>Ignored. Deprecated.</p> note <p>By default, hinting is enabled and the font's native hinter (see <code>FT_FACE_FLAG_HINTER</code>) is preferred over the auto-hinter. You can disable hinting by setting <code>FT_LOAD_NO_HINTING</code> or change the precedence by setting <code>FT_LOAD_FORCE_AUTOHINT</code>. You can also set <code>FT_LOAD_NO_AUTOHINT</code> in case you don't want the auto-hinter to be used at all.</p> <p>See the description of <code>FT_FACE_FLAG_TRICKY</code> for a special exception (affecting only a handful of Asian fonts).</p> <p>Besides deciding which hinter to use, you can also decide which hinting algorithm to use. See <code>FT_LOAD_TARGET_XXX</code> for details.</p> <p>Note that the auto-hinter needs a valid Unicode cmap (either a native one or synthesized by FreeType) for producing correct results. If a font provides an incorrect mapping (for example, assigning the character code U+005A, LATIN CAPITAL LETTER\u00a0Z, to a glyph depicting a mathematical integral sign), the auto-hinter might produce useless results.</p>"},{"location":"ft2-glyph_retrieval.html#ft_load_target_mode","title":"FT_LOAD_TARGET_MODE","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_LOAD_TARGET_MODE( x )                               \\\n          FT_STATIC_CAST( FT_Render_Mode, ( (x) &gt;&gt; 16 ) &amp; 15 )\n</code></pre> <p>Return the <code>FT_Render_Mode</code> corresponding to a given <code>FT_LOAD_TARGET_XXX</code> value.</p>"},{"location":"ft2-glyph_retrieval.html#ft_load_target_xxx","title":"FT_LOAD_TARGET_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_LOAD_TARGET_( x )   ( FT_STATIC_CAST( FT_Int32, (x) &amp; 15 ) &lt;&lt; 16 )\n\n#define FT_LOAD_TARGET_NORMAL  FT_LOAD_TARGET_( FT_RENDER_MODE_NORMAL )\n#define FT_LOAD_TARGET_LIGHT   FT_LOAD_TARGET_( FT_RENDER_MODE_LIGHT  )\n#define FT_LOAD_TARGET_MONO    FT_LOAD_TARGET_( FT_RENDER_MODE_MONO   )\n#define FT_LOAD_TARGET_LCD     FT_LOAD_TARGET_( FT_RENDER_MODE_LCD    )\n#define FT_LOAD_TARGET_LCD_V   FT_LOAD_TARGET_( FT_RENDER_MODE_LCD_V  )\n</code></pre> <p>A list of values to select a specific hinting algorithm for the hinter. You should OR one of these values to your <code>load_flags</code> when calling <code>FT_Load_Glyph</code>.</p> <p>Note that a font's native hinters may ignore the hinting algorithm you have specified (e.g., the TrueType bytecode interpreter). You can set <code>FT_LOAD_FORCE_AUTOHINT</code> to ensure that the auto-hinter is used.</p> values FT_LOAD_TARGET_NORMAL <p>The default hinting algorithm, optimized for standard gray-level rendering. For monochrome output, use <code>FT_LOAD_TARGET_MONO</code> instead.</p> FT_LOAD_TARGET_LIGHT <p>A lighter hinting algorithm for gray-level modes. Many generated glyphs are fuzzier but better resemble their original shape. This is achieved by snapping glyphs to the pixel grid only vertically (Y-axis), as is done by FreeType's new CFF engine or Microsoft's ClearType font renderer. This preserves inter-glyph spacing in horizontal text. The snapping is done either by the native font driver, if the driver itself and the font support it, or by the auto-hinter.</p> <p>Advance widths are rounded to integer values; however, using the <code>lsb_delta</code> and <code>rsb_delta</code> fields of <code>FT_GlyphSlotRec</code>, it is possible to get fractional advance widths for subpixel positioning (which is recommended to use).</p> <p>If configuration option <code>AF_CONFIG_OPTION_TT_SIZE_METRICS</code> is active, TrueType-like metrics are used to make this mode behave similarly as in unpatched FreeType versions between 2.4.6 and 2.7.1 (inclusive).</p> FT_LOAD_TARGET_MONO <p>Strong hinting algorithm that should only be used for monochrome output. The result is probably unpleasant if the glyph is rendered in non-monochrome modes.</p> <p>Note that for outline fonts only the TrueType font driver has proper monochrome hinting support, provided the TTFs contain hints for B/W rendering (which most fonts no longer provide). If these conditions are not met it is very likely that you get ugly results at smaller sizes.</p> FT_LOAD_TARGET_LCD <p>A variant of <code>FT_LOAD_TARGET_LIGHT</code> optimized for horizontally decimated LCD displays.</p> FT_LOAD_TARGET_LCD_V <p>A variant of <code>FT_LOAD_TARGET_NORMAL</code> optimized for vertically decimated LCD displays.</p> note <p>You should use only one of the <code>FT_LOAD_TARGET_XXX</code> values in your <code>load_flags</code>. They can't be ORed.</p> <p>If <code>FT_LOAD_RENDER</code> is also set, the glyph is rendered in the corresponding mode (i.e., the mode that matches the used algorithm best). An exception is <code>FT_LOAD_TARGET_MONO</code> since it implies <code>FT_LOAD_MONOCHROME</code>.</p> <p>You can use a hinting algorithm that doesn't correspond to the same rendering mode. As an example, it is possible to use the \u2018light\u2019 hinting algorithm and have the results rendered in horizontal LCD pixel mode, with code like <pre><code>  FT_Load_Glyph( face, glyph_index,\n                 load_flags | FT_LOAD_TARGET_LIGHT );\n\n  FT_Render_Glyph( face-&gt;glyph, FT_RENDER_MODE_LCD );\n</code></pre></p> <p>In general, you should stick with one rendering mode. For example, switching between <code>FT_LOAD_TARGET_NORMAL</code> and <code>FT_LOAD_TARGET_MONO</code> enforces a lot of recomputation for TrueType fonts, which is slow. Another reason is caching: Selecting a different mode usually causes changes in both the outlines and the rasterized bitmaps; it is thus necessary to empty the cache after a mode switch to avoid false hits.</p>"},{"location":"ft2-glyph_retrieval.html#ft_render_glyph","title":"FT_Render_Glyph","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Render_Glyph( FT_GlyphSlot    slot,\n                   FT_Render_Mode  render_mode );\n</code></pre> <p>Convert a given glyph image to a bitmap. It does so by inspecting the glyph image format, finding the relevant renderer, and invoking it.</p> inout slot <p>A handle to the glyph slot containing the image to convert.</p> input render_mode <p>The render mode used to render the glyph image into a bitmap. See <code>FT_Render_Mode</code> for a list of possible values.</p> <p>If <code>FT_RENDER_MODE_NORMAL</code> is used, a previous call of <code>FT_Load_Glyph</code> with flag <code>FT_LOAD_COLOR</code> makes <code>FT_Render_Glyph</code> provide a default blending of colored glyph layers associated with the current glyph slot (provided the font contains such layers) instead of rendering the glyph slot's outline. This is an experimental feature; see <code>FT_LOAD_COLOR</code> for more information.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>When FreeType outputs a bitmap of a glyph, it really outputs an alpha coverage map. If a pixel is completely covered by a filled-in outline, the bitmap contains 0xFF at that pixel, meaning that 0xFF/0xFF fraction of that pixel is covered, meaning the pixel is 100% black (or 0% bright). If a pixel is only 50% covered (value 0x80), the pixel is made 50% black (50% bright or a middle shade of grey). 0% covered means 0% black (100% bright or white).</p> <p>On high-DPI screens like on smartphones and tablets, the pixels are so small that their chance of being completely covered and therefore completely black are fairly good. On the low-DPI screens, however, the situation is different. The pixels are too large for most of the details of a glyph and shades of gray are the norm rather than the exception.</p> <p>This is relevant because all our screens have a second problem: they are not linear. 1\u00a0+\u00a01 is not\u00a02. Twice the value does not result in twice the brightness. When a pixel is only 50% covered, the coverage map says 50% black, and this translates to a pixel value of 128 when you use 8\u00a0bits per channel (0-255). However, this does not translate to 50% brightness for that pixel on our sRGB and gamma\u00a02.2 screens. Due to their non-linearity, they dwell longer in the darks and only a pixel value of about 186 results in 50% brightness \u2013 128 ends up too dark on both bright and dark backgrounds. The net result is that dark text looks burnt-out, pixely and blotchy on bright background, bright text too frail on dark backgrounds, and colored text on colored background (for example, red on green) seems to have dark halos or \u2018dirt\u2019 around it. The situation is especially ugly for diagonal stems like in \u2018w\u2019 glyph shapes where the quality of FreeType's anti-aliasing depends on the correct display of grays. On high-DPI screens where smaller, fully black pixels reign supreme, this doesn't matter, but on our low-DPI screens with all the gray shades, it does. 0% and 100% brightness are the same things in linear and non-linear space, just all the shades in-between aren't.</p> <p>The blending function for placing text over a background is <pre><code>  dst = alpha * src + (1 - alpha) * dst    ,\n</code></pre></p> <p>which is known as the OVER operator.</p> <p>To correctly composite an anti-aliased pixel of a glyph onto a surface,</p> <ol> <li> <p>take the foreground and background colors (e.g., in sRGB space) and apply gamma to get them in a linear space,</p> </li> <li> <p>use OVER to blend the two linear colors using the glyph pixel as the alpha value (remember, the glyph bitmap is an alpha coverage bitmap), and</p> </li> <li> <p>apply inverse gamma to the blended pixel and write it back to the image.</p> </li> </ol> <p>Internal testing at Adobe found that a target inverse gamma of\u00a01.8 for step\u00a03 gives good results across a wide range of displays with an sRGB gamma curve or a similar one.</p> <p>This process can cost performance. There is an approximation that does not need to know about the background color; see https://bel.fi/alankila/lcd/ and https://bel.fi/alankila/lcd/alpcor.html for details.</p> <p>ATTENTION: Linear blending is even more important when dealing with subpixel-rendered glyphs to prevent color-fringing! A subpixel-rendered glyph must first be filtered with a filter that gives equal weight to the three color primaries and does not exceed a sum of 0x100, see section \u2018Subpixel Rendering\u2019. Then the only difference to gray linear blending is that subpixel-rendered linear blending is done 3\u00a0times per pixel: red foreground subpixel to red background subpixel and so on for green and blue.</p>"},{"location":"ft2-glyph_retrieval.html#ft_render_mode","title":"FT_Render_Mode","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef enum  FT_Render_Mode_\n  {\n    FT_RENDER_MODE_NORMAL = 0,\n    FT_RENDER_MODE_LIGHT,\n    FT_RENDER_MODE_MONO,\n    FT_RENDER_MODE_LCD,\n    FT_RENDER_MODE_LCD_V,\n    FT_RENDER_MODE_SDF,\n\n    FT_RENDER_MODE_MAX\n\n  } FT_Render_Mode;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `FT_Render_Mode` values instead                       */\n#define ft_render_mode_normal  FT_RENDER_MODE_NORMAL\n#define ft_render_mode_mono    FT_RENDER_MODE_MONO\n</code></pre> <p>Render modes supported by FreeType\u00a02. Each mode corresponds to a specific type of scanline conversion performed on the outline.</p> <p>For bitmap fonts and embedded bitmaps the <code>bitmap-&gt;pixel_mode</code> field in the <code>FT_GlyphSlotRec</code> structure gives the format of the returned bitmap.</p> <p>All modes except <code>FT_RENDER_MODE_MONO</code> use 256 levels of opacity, indicating pixel coverage. Use linear alpha blending and gamma correction to correctly render non-monochrome glyph bitmaps onto a surface; see <code>FT_Render_Glyph</code>.</p> <p>The <code>FT_RENDER_MODE_SDF</code> is a special render mode that uses up to 256 distance values, indicating the signed distance from the grid position to the nearest outline.</p> values FT_RENDER_MODE_NORMAL <p>Default render mode; it corresponds to 8-bit anti-aliased bitmaps.</p> FT_RENDER_MODE_LIGHT <p>This is equivalent to <code>FT_RENDER_MODE_NORMAL</code>. It is only defined as a separate value because render modes are also used indirectly to define hinting algorithm selectors. See <code>FT_LOAD_TARGET_XXX</code> for details.</p> FT_RENDER_MODE_MONO <p>This mode corresponds to 1-bit bitmaps (with 2\u00a0levels of opacity).</p> FT_RENDER_MODE_LCD <p>This mode corresponds to horizontal RGB and BGR subpixel displays like LCD screens. It produces 8-bit bitmaps that are 3\u00a0times the width of the original glyph outline in pixels, and which use the <code>FT_PIXEL_MODE_LCD</code> mode.</p> FT_RENDER_MODE_LCD_V <p>This mode corresponds to vertical RGB and BGR subpixel displays (like PDA screens, rotated LCD displays, etc.). It produces 8-bit bitmaps that are 3\u00a0times the height of the original glyph outline in pixels and use the <code>FT_PIXEL_MODE_LCD_V</code> mode.</p> FT_RENDER_MODE_SDF <p>The positive (unsigned) 8-bit bitmap values can be converted to the single-channel signed distance field (SDF) by subtracting 128, with the positive and negative results corresponding to the inside and the outside of a glyph contour, respectively. The distance units are arbitrarily determined by an adjustable <code>spread</code> property.</p> note <p>The selected render mode only affects scalable vector glyphs of a font. Embedded bitmaps often have a different pixel mode like <code>FT_PIXEL_MODE_MONO</code>. You can use <code>FT_Bitmap_Convert</code> to transform them into 8-bit pixmaps.</p>"},{"location":"ft2-glyph_retrieval.html#ft_get_kerning","title":"FT_Get_Kerning","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Kerning( FT_Face     face,\n                  FT_UInt     left_glyph,\n                  FT_UInt     right_glyph,\n                  FT_UInt     kern_mode,\n                  FT_Vector  *akerning );\n</code></pre> <p>Return the kerning vector between two glyphs of the same face.</p> input face <p>A handle to a source face object.</p> left_glyph <p>The index of the left glyph in the kern pair.</p> right_glyph <p>The index of the right glyph in the kern pair.</p> kern_mode <p>See <code>FT_Kerning_Mode</code> for more information. Determines the scale and dimension of the returned kerning vector.</p> output akerning <p>The kerning vector. This is either in font units, fractional pixels (26.6 format), or pixels for scalable formats, and in pixels for fixed-sizes formats.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Only horizontal layouts (left-to-right &amp; right-to-left) are supported by this method. Other layouts, or more sophisticated kernings, are out of the scope of this API function \u2013 they can be implemented through format-specific interfaces.</p> <p>Note that, for TrueType fonts only, this can extract data from both the \u2018kern\u2019 table and the basic, pair-wise kerning feature from the GPOS table (with <code>TT_CONFIG_OPTION_GPOS_KERNING</code> enabled), though FreeType does not support the more advanced GPOS layout features; use a library like HarfBuzz for those instead. If a font has both a \u2018kern\u2019 table and kern features of a GPOS table, the \u2018kern\u2019 table will be used.</p> <p>Also note for right-to-left scripts, the functionality may differ for fonts with GPOS tables vs. \u2018kern\u2019 tables. For GPOS, right-to-left fonts typically use both a placement offset and an advance for pair positioning, which this API does not support, so it would output kerning values of zero; though if the right-to-left font used only advances in GPOS pair positioning, then this API could output kerning values for it, but it would use <code>left_glyph</code> to mean the first glyph for that case. Whereas \u2018kern\u2019 tables are always advance-only and always store the left glyph first.</p> <p>Use <code>FT_HAS_KERNING</code> to find out whether a font has data that can be extracted with <code>FT_Get_Kerning</code>.</p>"},{"location":"ft2-glyph_retrieval.html#ft_kerning_mode","title":"FT_Kerning_Mode","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef enum  FT_Kerning_Mode_\n  {\n    FT_KERNING_DEFAULT = 0,\n    FT_KERNING_UNFITTED,\n    FT_KERNING_UNSCALED\n\n  } FT_Kerning_Mode;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `FT_Kerning_Mode` values instead                      */\n#define ft_kerning_default   FT_KERNING_DEFAULT\n#define ft_kerning_unfitted  FT_KERNING_UNFITTED\n#define ft_kerning_unscaled  FT_KERNING_UNSCALED\n</code></pre> <p>An enumeration to specify the format of kerning values returned by <code>FT_Get_Kerning</code>.</p> values FT_KERNING_DEFAULT <p>Return grid-fitted kerning distances in 26.6 fractional pixels.</p> FT_KERNING_UNFITTED <p>Return un-grid-fitted kerning distances in 26.6 fractional pixels.</p> FT_KERNING_UNSCALED <p>Return the kerning vector in original font units.</p> note <p><code>FT_KERNING_DEFAULT</code> returns full pixel values; it also makes FreeType heuristically scale down kerning distances at small ppem values so that they don't become too big.</p> <p>Both <code>FT_KERNING_DEFAULT</code> and <code>FT_KERNING_UNFITTED</code> use the current horizontal scaling factor (as set e.g. with <code>FT_Set_Char_Size</code>) to convert font units to pixels.</p>"},{"location":"ft2-glyph_retrieval.html#ft_get_track_kerning","title":"FT_Get_Track_Kerning","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Track_Kerning( FT_Face    face,\n                        FT_Fixed   point_size,\n                        FT_Int     degree,\n                        FT_Fixed*  akerning );\n</code></pre> <p>Return the track kerning for a given face object at a given size.</p> input face <p>A handle to a source face object.</p> point_size <p>The point size in 16.16 fractional points.</p> degree <p>The degree of tightness. Increasingly negative values represent tighter track kerning, while increasingly positive values represent looser track kerning. Value zero means no track kerning.</p> output akerning <p>The kerning in 16.16 fractional points, to be uniformly applied between all glyphs.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Currently, only the Type\u00a01 font driver supports track kerning, using data from AFM files (if attached with <code>FT_Attach_File</code> or <code>FT_Attach_Stream</code>).</p> <p>Only very few AFM files come with track kerning data; please refer to Adobe's AFM specification for more details.</p>"},{"location":"ft2-glyph_stroker.html","title":"Glyph Stroker","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb Glyph Stroker</p>"},{"location":"ft2-glyph_stroker.html#glyph-stroker","title":"Glyph Stroker","text":""},{"location":"ft2-glyph_stroker.html#synopsis","title":"Synopsis","text":"<p>This component generates stroked outlines of a given vectorial glyph. It also allows you to retrieve the \u2018outside\u2019 and/or the \u2018inside\u2019 borders of the stroke.</p> <p>This can be useful to generate \u2018bordered\u2019 glyph, i.e., glyphs displayed with a colored (and anti-aliased) border around their shape.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker","title":"FT_Stroker","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  typedef struct FT_StrokerRec_*  FT_Stroker;\n</code></pre> <p>Opaque handle to a path stroker object.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_linejoin","title":"FT_Stroker_LineJoin","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  typedef enum  FT_Stroker_LineJoin_\n  {\n    FT_STROKER_LINEJOIN_ROUND          = 0,\n    FT_STROKER_LINEJOIN_BEVEL          = 1,\n    FT_STROKER_LINEJOIN_MITER_VARIABLE = 2,\n    FT_STROKER_LINEJOIN_MITER          = FT_STROKER_LINEJOIN_MITER_VARIABLE,\n    FT_STROKER_LINEJOIN_MITER_FIXED    = 3\n\n  } FT_Stroker_LineJoin;\n</code></pre> <p>These values determine how two joining lines are rendered in a stroker.</p> values FT_STROKER_LINEJOIN_ROUND <p>Used to render rounded line joins. Circular arcs are used to join two lines smoothly.</p> FT_STROKER_LINEJOIN_BEVEL <p>Used to render beveled line joins. The outer corner of the joined lines is filled by enclosing the triangular region of the corner with a straight line between the outer corners of each stroke.</p> FT_STROKER_LINEJOIN_MITER_FIXED <p>Used to render mitered line joins, with fixed bevels if the miter limit is exceeded. The outer edges of the strokes for the two segments are extended until they meet at an angle. A bevel join (see above) is used if the segments meet at too sharp an angle and the outer edges meet beyond a distance corresponding to the meter limit. This prevents long spikes being created. <code>FT_STROKER_LINEJOIN_MITER_FIXED</code> generates a miter line join as used in PostScript and PDF.</p> FT_STROKER_LINEJOIN_MITER_VARIABLE FT_STROKER_LINEJOIN_MITER <p>Used to render mitered line joins, with variable bevels if the miter limit is exceeded. The intersection of the strokes is clipped perpendicularly to the bisector, at a distance corresponding to the miter limit. This prevents long spikes being created. <code>FT_STROKER_LINEJOIN_MITER_VARIABLE</code> generates a mitered line join as used in XPS. <code>FT_STROKER_LINEJOIN_MITER</code> is an alias for <code>FT_STROKER_LINEJOIN_MITER_VARIABLE</code>, retained for backward compatibility.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_linecap","title":"FT_Stroker_LineCap","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  typedef enum  FT_Stroker_LineCap_\n  {\n    FT_STROKER_LINECAP_BUTT = 0,\n    FT_STROKER_LINECAP_ROUND,\n    FT_STROKER_LINECAP_SQUARE\n\n  } FT_Stroker_LineCap;\n</code></pre> <p>These values determine how the end of opened sub-paths are rendered in a stroke.</p> values FT_STROKER_LINECAP_BUTT <p>The end of lines is rendered as a full stop on the last point itself.</p> FT_STROKER_LINECAP_ROUND <p>The end of lines is rendered as a half-circle around the last point.</p> FT_STROKER_LINECAP_SQUARE <p>The end of lines is rendered as a square around the last point.</p>"},{"location":"ft2-glyph_stroker.html#ft_strokerborder","title":"FT_StrokerBorder","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  typedef enum  FT_StrokerBorder_\n  {\n    FT_STROKER_BORDER_LEFT = 0,\n    FT_STROKER_BORDER_RIGHT\n\n  } FT_StrokerBorder;\n</code></pre> <p>These values are used to select a given stroke border in <code>FT_Stroker_GetBorderCounts</code> and <code>FT_Stroker_ExportBorder</code>.</p> values FT_STROKER_BORDER_LEFT <p>Select the left border, relative to the drawing direction.</p> FT_STROKER_BORDER_RIGHT <p>Select the right border, relative to the drawing direction.</p> note <p>Applications are generally interested in the \u2018inside\u2019 and \u2018outside\u2019 borders. However, there is no direct mapping between these and the \u2018left\u2019 and \u2018right\u2019 ones, since this really depends on the glyph's drawing orientation, which varies between font formats.</p> <p>You can however use <code>FT_Outline_GetInsideBorder</code> and <code>FT_Outline_GetOutsideBorder</code> to get these.</p>"},{"location":"ft2-glyph_stroker.html#ft_outline_getinsideborder","title":"FT_Outline_GetInsideBorder","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_StrokerBorder )\n  FT_Outline_GetInsideBorder( FT_Outline*  outline );\n</code></pre> <p>Retrieve the <code>FT_StrokerBorder</code> value corresponding to the \u2018inside\u2019 borders of a given outline.</p> input outline <p>The source outline handle.</p> return <p>The border index. <code>FT_STROKER_BORDER_RIGHT</code> for empty or invalid outlines.</p>"},{"location":"ft2-glyph_stroker.html#ft_outline_getoutsideborder","title":"FT_Outline_GetOutsideBorder","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_StrokerBorder )\n  FT_Outline_GetOutsideBorder( FT_Outline*  outline );\n</code></pre> <p>Retrieve the <code>FT_StrokerBorder</code> value corresponding to the \u2018outside\u2019 borders of a given outline.</p> input outline <p>The source outline handle.</p> return <p>The border index. <code>FT_STROKER_BORDER_LEFT</code> for empty or invalid outlines.</p>"},{"location":"ft2-glyph_stroker.html#ft_glyph_stroke","title":"FT_Glyph_Stroke","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Glyph_Stroke( FT_Glyph    *pglyph,\n                   FT_Stroker   stroker,\n                   FT_Bool      destroy );\n</code></pre> <p>Stroke a given outline glyph object with a given stroker.</p> inout pglyph <p>Source glyph handle on input, new glyph handle on output.</p> input stroker <p>A stroker handle.</p> destroy <p>A Boolean. If\u00a01, the source glyph object is destroyed on success.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The source glyph is untouched in case of error.</p> <p>Adding stroke may yield a significantly wider and taller glyph depending on how large of a radius was used to stroke the glyph. You may need to manually adjust horizontal and vertical advance amounts to account for this added size.</p>"},{"location":"ft2-glyph_stroker.html#ft_glyph_strokeborder","title":"FT_Glyph_StrokeBorder","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Glyph_StrokeBorder( FT_Glyph    *pglyph,\n                         FT_Stroker   stroker,\n                         FT_Bool      inside,\n                         FT_Bool      destroy );\n</code></pre> <p>Stroke a given outline glyph object with a given stroker, but only return either its inside or outside border.</p> inout pglyph <p>Source glyph handle on input, new glyph handle on output.</p> input stroker <p>A stroker handle.</p> inside <p>A Boolean. If\u00a01, return the inside border, otherwise the outside border.</p> destroy <p>A Boolean. If\u00a01, the source glyph object is destroyed on success.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The source glyph is untouched in case of error.</p> <p>Adding stroke may yield a significantly wider and taller glyph depending on how large of a radius was used to stroke the glyph. You may need to manually adjust horizontal and vertical advance amounts to account for this added size.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_new","title":"FT_Stroker_New","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_New( FT_Library   library,\n                  FT_Stroker  *astroker );\n</code></pre> <p>Create a new stroker object.</p> input library <p>FreeType library handle.</p> output astroker <p>A new stroker object handle. <code>NULL</code> in case of error.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_set","title":"FT_Stroker_Set","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Stroker_Set( FT_Stroker           stroker,\n                  FT_Fixed             radius,\n                  FT_Stroker_LineCap   line_cap,\n                  FT_Stroker_LineJoin  line_join,\n                  FT_Fixed             miter_limit );\n</code></pre> <p>Reset a stroker object's attributes.</p> input stroker <p>The target stroker handle.</p> radius <p>The border radius.</p> line_cap <p>The line cap style.</p> line_join <p>The line join style.</p> miter_limit <p>The maximum reciprocal sine of half-angle at the miter join, expressed as 16.16 fixed-point value.</p> note <p>The <code>radius</code> is expressed in the same units as the outline coordinates.</p> <p>The <code>miter_limit</code> multiplied by the <code>radius</code> gives the maximum size of a miter spike, at which it is clipped for <code>FT_STROKER_LINEJOIN_MITER_VARIABLE</code> or replaced with a bevel join for <code>FT_STROKER_LINEJOIN_MITER_FIXED</code>.</p> <p>This function calls <code>FT_Stroker_Rewind</code> automatically.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_rewind","title":"FT_Stroker_Rewind","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Stroker_Rewind( FT_Stroker  stroker );\n</code></pre> <p>Reset a stroker object without changing its attributes. You should call this function before beginning a new series of calls to <code>FT_Stroker_BeginSubPath</code> or <code>FT_Stroker_EndSubPath</code>.</p> input stroker <p>The target stroker handle.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_parseoutline","title":"FT_Stroker_ParseOutline","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_ParseOutline( FT_Stroker   stroker,\n                           FT_Outline*  outline,\n                           FT_Bool      opened );\n</code></pre> <p>A convenience function used to parse a whole outline with the stroker. The resulting outline(s) can be retrieved later by functions like <code>FT_Stroker_GetCounts</code> and <code>FT_Stroker_Export</code>.</p> input stroker <p>The target stroker handle.</p> outline <p>The source outline.</p> opened <p>A boolean. If\u00a01, the outline is treated as an open path instead of a closed one.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If <code>opened</code> is\u00a00 (the default), the outline is treated as a closed path, and the stroker generates two distinct \u2018border\u2019 outlines.</p> <p>If <code>opened</code> is\u00a01, the outline is processed as an open path, and the stroker generates a single \u2018stroke\u2019 outline.</p> <p>This function calls <code>FT_Stroker_Rewind</code> automatically.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_done","title":"FT_Stroker_Done","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Stroker_Done( FT_Stroker  stroker );\n</code></pre> <p>Destroy a stroker object.</p> input stroker <p>A stroker handle. Can be <code>NULL</code>.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_beginsubpath","title":"FT_Stroker_BeginSubPath","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_BeginSubPath( FT_Stroker  stroker,\n                           FT_Vector*  to,\n                           FT_Bool     open );\n</code></pre> <p>Start a new sub-path in the stroker.</p> input stroker <p>The target stroker handle.</p> to <p>A pointer to the start vector.</p> open <p>A boolean. If\u00a01, the sub-path is treated as an open one.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function is useful when you need to stroke a path that is not stored as an <code>FT_Outline</code> object.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_endsubpath","title":"FT_Stroker_EndSubPath","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_EndSubPath( FT_Stroker  stroker );\n</code></pre> <p>Close the current sub-path in the stroker.</p> input stroker <p>The target stroker handle.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You should call this function after <code>FT_Stroker_BeginSubPath</code>. If the subpath was not \u2018opened\u2019, this function \u2018draws\u2019 a single line segment to the start position when needed.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_lineto","title":"FT_Stroker_LineTo","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_LineTo( FT_Stroker  stroker,\n                     FT_Vector*  to );\n</code></pre> <p>\u2018Draw\u2019 a single line segment in the stroker's current sub-path, from the last position.</p> input stroker <p>The target stroker handle.</p> to <p>A pointer to the destination point.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You should call this function between <code>FT_Stroker_BeginSubPath</code> and <code>FT_Stroker_EndSubPath</code>.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_conicto","title":"FT_Stroker_ConicTo","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_ConicTo( FT_Stroker  stroker,\n                      FT_Vector*  control,\n                      FT_Vector*  to );\n</code></pre> <p>\u2018Draw\u2019 a single quadratic Bezier in the stroker's current sub-path, from the last position.</p> input stroker <p>The target stroker handle.</p> control <p>A pointer to a Bezier control point.</p> to <p>A pointer to the destination point.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You should call this function between <code>FT_Stroker_BeginSubPath</code> and <code>FT_Stroker_EndSubPath</code>.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_cubicto","title":"FT_Stroker_CubicTo","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_CubicTo( FT_Stroker  stroker,\n                      FT_Vector*  control1,\n                      FT_Vector*  control2,\n                      FT_Vector*  to );\n</code></pre> <p>\u2018Draw\u2019 a single cubic Bezier in the stroker's current sub-path, from the last position.</p> input stroker <p>The target stroker handle.</p> control1 <p>A pointer to the first Bezier control point.</p> control2 <p>A pointer to second Bezier control point.</p> to <p>A pointer to the destination point.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You should call this function between <code>FT_Stroker_BeginSubPath</code> and <code>FT_Stroker_EndSubPath</code>.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_getbordercounts","title":"FT_Stroker_GetBorderCounts","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_GetBorderCounts( FT_Stroker        stroker,\n                              FT_StrokerBorder  border,\n                              FT_UInt          *anum_points,\n                              FT_UInt          *anum_contours );\n</code></pre> <p>Call this function once you have finished parsing your paths with the stroker. It returns the number of points and contours necessary to export one of the \u2018border\u2019 or \u2018stroke\u2019 outlines generated by the stroker.</p> input stroker <p>The target stroker handle.</p> border <p>The border index.</p> output anum_points <p>The number of points.</p> anum_contours <p>The number of contours.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>When an outline, or a sub-path, is \u2018closed\u2019, the stroker generates two independent \u2018border\u2019 outlines, named \u2018left\u2019 and \u2018right\u2019.</p> <p>When the outline, or a sub-path, is \u2018opened\u2019, the stroker merges the \u2018border\u2019 outlines with caps. The \u2018left\u2019 border receives all points, while the \u2018right\u2019 border becomes empty.</p> <p>Use the function <code>FT_Stroker_GetCounts</code> instead if you want to retrieve the counts associated to both borders.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_exportborder","title":"FT_Stroker_ExportBorder","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Stroker_ExportBorder( FT_Stroker        stroker,\n                           FT_StrokerBorder  border,\n                           FT_Outline*       outline );\n</code></pre> <p>Call this function after <code>FT_Stroker_GetBorderCounts</code> to export the corresponding border to your own <code>FT_Outline</code> structure.</p> <p>Note that this function appends the border points and contours to your outline, but does not try to resize its arrays.</p> input stroker <p>The target stroker handle.</p> border <p>The border index.</p> outline <p>The target outline handle.</p> note <p>Always call this function after <code>FT_Stroker_GetBorderCounts</code> to get sure that there is enough room in your <code>FT_Outline</code> object to receive all new data.</p> <p>When an outline, or a sub-path, is \u2018closed\u2019, the stroker generates two independent \u2018border\u2019 outlines, named \u2018left\u2019 and \u2018right\u2019.</p> <p>When the outline, or a sub-path, is \u2018opened\u2019, the stroker merges the \u2018border\u2019 outlines with caps. The \u2018left\u2019 border receives all points, while the \u2018right\u2019 border becomes empty.</p> <p>Use the function <code>FT_Stroker_Export</code> instead if you want to retrieve all borders at once.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_getcounts","title":"FT_Stroker_GetCounts","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stroker_GetCounts( FT_Stroker  stroker,\n                        FT_UInt    *anum_points,\n                        FT_UInt    *anum_contours );\n</code></pre> <p>Call this function once you have finished parsing your paths with the stroker. It returns the number of points and contours necessary to export all points/borders from the stroked outline/path.</p> input stroker <p>The target stroker handle.</p> output anum_points <p>The number of points.</p> anum_contours <p>The number of contours.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-glyph_stroker.html#ft_stroker_export","title":"FT_Stroker_Export","text":"<p>Defined in FT_STROKER_H (freetype/ftstroke.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Stroker_Export( FT_Stroker   stroker,\n                     FT_Outline*  outline );\n</code></pre> <p>Call this function after <code>FT_Stroker_GetBorderCounts</code> to export all borders to your own <code>FT_Outline</code> structure.</p> <p>Note that this function appends the border points and contours to your outline, but does not try to resize its arrays.</p> input stroker <p>The target stroker handle.</p> outline <p>The target outline handle.</p>"},{"location":"ft2-glyph_variants.html","title":"Unicode Variation Sequences","text":"<p>FreeType \u00bb Docs \u00bb Extended API \u00bb Unicode Variation Sequences</p>"},{"location":"ft2-glyph_variants.html#unicode-variation-sequences","title":"Unicode Variation Sequences","text":""},{"location":"ft2-glyph_variants.html#synopsis","title":"Synopsis","text":"<p>Many characters, especially for CJK scripts, have variant forms. They are a sort of grey area somewhere between being totally irrelevant and semantically distinct; for this reason, the Unicode consortium decided to introduce Variation Sequences (VS), consisting of a Unicode base character and a variation selector instead of further extending the already huge number of characters.</p> <p>Unicode maintains two different sets, namely \u2018Standardized Variation Sequences\u2019 and registered \u2018Ideographic Variation Sequences\u2019 (IVS), collected in the \u2018Ideographic Variation Database\u2019 (IVD).</p> <p>https://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt https://unicode.org/reports/tr37/ https://unicode.org/ivd/</p> <p>To date (January 2017), the character with the most ideographic variations is U+9089, having 32 such IVS.</p> <p>Three Mongolian Variation Selectors have the values U+180B-U+180D; 256 generic Variation Selectors are encoded in the ranges U+FE00-U+FE0F and U+E0100-U+E01EF. IVS currently use Variation Selectors from the range U+E0100-U+E01EF only.</p> <p>A VS consists of the base character value followed by a single Variation Selector. For example, to get the first variation of U+9089, you have to write the character sequence <code>U+9089 U+E0100</code>.</p> <p>Adobe and MS decided to support both standardized and ideographic VS with a new cmap subtable (format\u00a014). It is an odd subtable because it is not a mapping of input code points to glyphs, but contains lists of all variations supported by the font.</p> <p>A variation may be either \u2018default\u2019 or \u2018non-default\u2019 for a given font. A default variation is the one you will get for that code point if you look it up in the standard Unicode cmap. A non-default variation is a different glyph.</p>"},{"location":"ft2-glyph_variants.html#ft_face_getcharvariantindex","title":"FT_Face_GetCharVariantIndex","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_UInt )\n  FT_Face_GetCharVariantIndex( FT_Face   face,\n                               FT_ULong  charcode,\n                               FT_ULong  variantSelector );\n</code></pre> <p>Return the glyph index of a given character code as modified by the variation selector.</p> input face <p>A handle to the source face object.</p> charcode <p>The character code point in Unicode.</p> variantSelector <p>The Unicode code point of the variation selector.</p> return <p>The glyph index. 0\u00a0means either \u2018undefined character code\u2019, or \u2018undefined selector code\u2019, or \u2018no variation selector cmap subtable\u2019, or \u2018current CharMap is not Unicode\u2019.</p> note <p>If you use FreeType to manipulate the contents of font files directly, be aware that the glyph index returned by this function doesn't always correspond to the internal indices used within the file. This is done to ensure that value\u00a00 always corresponds to the \u2018missing glyph\u2019.</p> <p>This function is only meaningful if a) the font has a variation selector cmap sub table, and b) the current charmap has a Unicode encoding.</p> since <p>2.3.6</p>"},{"location":"ft2-glyph_variants.html#ft_face_getcharvariantisdefault","title":"FT_Face_GetCharVariantIsDefault","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Int )\n  FT_Face_GetCharVariantIsDefault( FT_Face   face,\n                                   FT_ULong  charcode,\n                                   FT_ULong  variantSelector );\n</code></pre> <p>Check whether this variation of this Unicode character is the one to be found in the charmap.</p> input face <p>A handle to the source face object.</p> charcode <p>The character codepoint in Unicode.</p> variantSelector <p>The Unicode codepoint of the variation selector.</p> return <p>1\u00a0if found in the standard (Unicode) cmap, 0\u00a0if found in the variation selector cmap, or -1 if it is not a variation.</p> note <p>This function is only meaningful if the font has a variation selector cmap subtable.</p> since <p>2.3.6</p>"},{"location":"ft2-glyph_variants.html#ft_face_getvariantselectors","title":"FT_Face_GetVariantSelectors","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_UInt32* )\n  FT_Face_GetVariantSelectors( FT_Face  face );\n</code></pre> <p>Return a zero-terminated list of Unicode variation selectors found in the font.</p> input face <p>A handle to the source face object.</p> return <p>A pointer to an array of selector code points, or <code>NULL</code> if there is no valid variation selector cmap subtable.</p> note <p>The last item in the array is\u00a00; the array is owned by the <code>FT_Face</code> object but can be overwritten or released on the next call to a FreeType function.</p> since <p>2.3.6</p>"},{"location":"ft2-glyph_variants.html#ft_face_getvariantsofchar","title":"FT_Face_GetVariantsOfChar","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_UInt32* )\n  FT_Face_GetVariantsOfChar( FT_Face   face,\n                             FT_ULong  charcode );\n</code></pre> <p>Return a zero-terminated list of Unicode variation selectors found for the specified character code.</p> input face <p>A handle to the source face object.</p> charcode <p>The character codepoint in Unicode.</p> return <p>A pointer to an array of variation selector code points that are active for the given character, or <code>NULL</code> if the corresponding list is empty.</p> note <p>The last item in the array is\u00a00; the array is owned by the <code>FT_Face</code> object but can be overwritten or released on the next call to a FreeType function.</p> since <p>2.3.6</p>"},{"location":"ft2-glyph_variants.html#ft_face_getcharsofvariant","title":"FT_Face_GetCharsOfVariant","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_UInt32* )\n  FT_Face_GetCharsOfVariant( FT_Face   face,\n                             FT_ULong  variantSelector );\n</code></pre> <p>Return a zero-terminated list of Unicode character codes found for the specified variation selector.</p> input face <p>A handle to the source face object.</p> variantSelector <p>The variation selector code point in Unicode.</p> return <p>A list of all the code points that are specified by this selector (both default and non-default codes are returned) or <code>NULL</code> if there is no valid cmap or the variation selector is invalid.</p> note <p>The last item in the array is\u00a00; the array is owned by the <code>FT_Face</code> object but can be overwritten or released on the next call to a FreeType function.</p> since <p>2.3.6</p>"},{"location":"ft2-gx_validation.html","title":"TrueTypeGX/AAT Validation","text":"<p>FreeType \u00bb Docs \u00bb Miscellaneous \u00bb TrueTypeGX/AAT Validation</p>"},{"location":"ft2-gx_validation.html#truetypegxaat-validation","title":"TrueTypeGX/AAT Validation","text":""},{"location":"ft2-gx_validation.html#synopsis","title":"Synopsis","text":"<p>This section contains the declaration of functions to validate some TrueTypeGX tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop, lcar).</p>"},{"location":"ft2-gx_validation.html#ft_truetypegx_validate","title":"FT_TrueTypeGX_Validate","text":"<p>Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_TrueTypeGX_Validate( FT_Face   face,\n                          FT_UInt   validation_flags,\n                          FT_Bytes  tables[FT_VALIDATE_GX_LENGTH],\n                          FT_UInt   table_length );\n</code></pre> <p>Validate various TrueTypeGX tables to assure that all offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).</p> input face <p>A handle to the input face.</p> validation_flags <p>A bit field that specifies the tables to be validated. See <code>FT_VALIDATE_GXXXX</code> for possible values.</p> table_length <p>The size of the <code>tables</code> array. Normally, <code>FT_VALIDATE_GX_LENGTH</code> should be passed.</p> output tables <p>The array where all validated sfnt tables are stored. The array itself must be allocated by a client.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function only works with TrueTypeGX fonts, returning an error otherwise.</p> <p>After use, the application should deallocate the buffers pointed to by each <code>tables</code> element, by calling <code>FT_TrueTypeGX_Free</code>. A <code>NULL</code> value indicates that the table either doesn't exist in the font, the application hasn't asked for validation, or the validator doesn't have the ability to validate the sfnt table.</p>"},{"location":"ft2-gx_validation.html#ft_truetypegx_free","title":"FT_TrueTypeGX_Free","text":"<p>Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_TrueTypeGX_Free( FT_Face   face,\n                      FT_Bytes  table );\n</code></pre> <p>Free the buffer allocated by TrueTypeGX validator.</p> input face <p>A handle to the input face.</p> table <p>The pointer to the buffer allocated by <code>FT_TrueTypeGX_Validate</code>.</p> note <p>This function must be used to free the buffer allocated by <code>FT_TrueTypeGX_Validate</code> only.</p>"},{"location":"ft2-gx_validation.html#ft_classickern_validate","title":"FT_ClassicKern_Validate","text":"<p>Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_ClassicKern_Validate( FT_Face    face,\n                           FT_UInt    validation_flags,\n                           FT_Bytes  *ckern_table );\n</code></pre> <p>Validate classic (16-bit format) kern table to assure that the offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).</p> <p>The \u2018kern\u2019 table validator in <code>FT_TrueTypeGX_Validate</code> deals with both the new 32-bit format and the classic 16-bit format, while FT_ClassicKern_Validate only supports the classic 16-bit format.</p> input face <p>A handle to the input face.</p> validation_flags <p>A bit field that specifies the dialect to be validated. See <code>FT_VALIDATE_CKERNXXX</code> for possible values.</p> output ckern_table <p>A pointer to the kern table.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>After use, the application should deallocate the buffers pointed to by <code>ckern_table</code>, by calling <code>FT_ClassicKern_Free</code>. A <code>NULL</code> value indicates that the table doesn't exist in the font.</p>"},{"location":"ft2-gx_validation.html#ft_classickern_free","title":"FT_ClassicKern_Free","text":"<p>Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_ClassicKern_Free( FT_Face   face,\n                       FT_Bytes  table );\n</code></pre> <p>Free the buffer allocated by classic Kern validator.</p> input face <p>A handle to the input face.</p> table <p>The pointer to the buffer that is allocated by <code>FT_ClassicKern_Validate</code>.</p> note <p>This function must be used to free the buffer allocated by <code>FT_ClassicKern_Validate</code> only.</p>"},{"location":"ft2-gx_validation.html#ft_validate_gx_length","title":"FT_VALIDATE_GX_LENGTH","text":"<p>Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).</p> <pre><code>#define FT_VALIDATE_GX_LENGTH  ( FT_VALIDATE_GX_LAST_INDEX + 1 )\n</code></pre> <p>The number of tables checked in this module. Use it as a parameter for the <code>table-length</code> argument of function <code>FT_TrueTypeGX_Validate</code>.</p>"},{"location":"ft2-gx_validation.html#ft_validate_gxxxx","title":"FT_VALIDATE_GXXXX","text":"<p>Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).</p> <pre><code>#define FT_VALIDATE_feat  FT_VALIDATE_GX_BITFIELD( feat )\n#define FT_VALIDATE_mort  FT_VALIDATE_GX_BITFIELD( mort )\n#define FT_VALIDATE_morx  FT_VALIDATE_GX_BITFIELD( morx )\n#define FT_VALIDATE_bsln  FT_VALIDATE_GX_BITFIELD( bsln )\n#define FT_VALIDATE_just  FT_VALIDATE_GX_BITFIELD( just )\n#define FT_VALIDATE_kern  FT_VALIDATE_GX_BITFIELD( kern )\n#define FT_VALIDATE_opbd  FT_VALIDATE_GX_BITFIELD( opbd )\n#define FT_VALIDATE_trak  FT_VALIDATE_GX_BITFIELD( trak )\n#define FT_VALIDATE_prop  FT_VALIDATE_GX_BITFIELD( prop )\n#define FT_VALIDATE_lcar  FT_VALIDATE_GX_BITFIELD( lcar )\n\n#define FT_VALIDATE_GX  ( FT_VALIDATE_feat | \\\n                          FT_VALIDATE_mort | \\\n                          FT_VALIDATE_morx | \\\n                          FT_VALIDATE_bsln | \\\n                          FT_VALIDATE_just | \\\n                          FT_VALIDATE_kern | \\\n                          FT_VALIDATE_opbd | \\\n                          FT_VALIDATE_trak | \\\n                          FT_VALIDATE_prop | \\\n                          FT_VALIDATE_lcar )\n</code></pre> <p>A list of bit-field constants used with <code>FT_TrueTypeGX_Validate</code> to indicate which TrueTypeGX/AAT Type tables should be validated.</p> values FT_VALIDATE_feat <p>Validate \u2018feat\u2019 table.</p> FT_VALIDATE_mort <p>Validate \u2018mort\u2019 table.</p> FT_VALIDATE_morx <p>Validate \u2018morx\u2019 table.</p> FT_VALIDATE_bsln <p>Validate \u2018bsln\u2019 table.</p> FT_VALIDATE_just <p>Validate \u2018just\u2019 table.</p> FT_VALIDATE_kern <p>Validate \u2018kern\u2019 table.</p> FT_VALIDATE_opbd <p>Validate \u2018opbd\u2019 table.</p> FT_VALIDATE_trak <p>Validate \u2018trak\u2019 table.</p> FT_VALIDATE_prop <p>Validate \u2018prop\u2019 table.</p> FT_VALIDATE_lcar <p>Validate \u2018lcar\u2019 table.</p> FT_VALIDATE_GX <p>Validate all TrueTypeGX tables (feat, mort, morx, bsln, just, kern, opbd, trak, prop and lcar).</p>"},{"location":"ft2-gx_validation.html#ft_validate_ckernxxx","title":"FT_VALIDATE_CKERNXXX","text":"<p>Defined in FT_GX_VALIDATE_H (freetype/ftgxval.h).</p> <pre><code>#define FT_VALIDATE_MS     ( FT_VALIDATE_GX_START &lt;&lt; 0 )\n#define FT_VALIDATE_APPLE  ( FT_VALIDATE_GX_START &lt;&lt; 1 )\n\n#define FT_VALIDATE_CKERN  ( FT_VALIDATE_MS | FT_VALIDATE_APPLE )\n</code></pre> <p>A list of bit-field constants used with <code>FT_ClassicKern_Validate</code> to indicate the classic kern dialect or dialects. If the selected type doesn't fit, <code>FT_ClassicKern_Validate</code> regards the table as invalid.</p> values FT_VALIDATE_MS <p>Handle the \u2018kern\u2019 table as a classic Microsoft kern table.</p> FT_VALIDATE_APPLE <p>Handle the \u2018kern\u2019 table as a classic Apple kern table.</p> FT_VALIDATE_CKERN <p>Handle the \u2018kern\u2019 as either classic Apple or Microsoft kern table.</p>"},{"location":"ft2-gzip.html","title":"GZIP Streams","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb GZIP Streams</p>"},{"location":"ft2-gzip.html#gzip-streams","title":"GZIP Streams","text":""},{"location":"ft2-gzip.html#synopsis","title":"Synopsis","text":"<p>In certain builds of the library, gzip compression recognition is automatically handled when calling <code>FT_New_Face</code> or <code>FT_Open_Face</code>. This means that if no font driver is capable of handling the raw compressed file, the library will try to open a gzipped stream from it and re-open the face with it.</p> <p>The stream implementation is very basic and resets the decompression process each time seeking backwards is needed within the stream, which significantly undermines the performance.</p> <p>This section contains the declaration of Gzip-specific functions.</p>"},{"location":"ft2-gzip.html#ft_stream_opengzip","title":"FT_Stream_OpenGzip","text":"<p>Defined in FT_GZIP_H (freetype/ftgzip.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stream_OpenGzip( FT_Stream  stream,\n                      FT_Stream  source );\n</code></pre> <p>Open a new stream to parse gzip-compressed font files. This is mainly used to support the compressed <code>*.pcf.gz</code> fonts that come with XFree86.</p> input stream <p>The target embedding stream.</p> source <p>The source stream.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The source stream must be opened before calling this function.</p> <p>Calling the internal function <code>FT_Stream_Close</code> on the new stream will not call <code>FT_Stream_Close</code> on the source stream. None of the stream objects will be released to the heap.</p> <p>This function may return <code>FT_Err_Unimplemented_Feature</code> if your build of FreeType was not compiled with zlib support.</p>"},{"location":"ft2-gzip.html#ft_gzip_uncompress","title":"FT_Gzip_Uncompress","text":"<p>Defined in FT_GZIP_H (freetype/ftgzip.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Gzip_Uncompress( FT_Memory       memory,\n                      FT_Byte*        output,\n                      FT_ULong*       output_len,\n                      const FT_Byte*  input,\n                      FT_ULong        input_len );\n</code></pre> <p>Decompress a zipped input buffer into an output buffer. This function is modeled after zlib's <code>uncompress</code> function.</p> input memory <p>A FreeType memory handle.</p> input <p>The input buffer.</p> input_len <p>The length of the input buffer.</p> output output <p>The output buffer.</p> inout output_len <p>Before calling the function, this is the total size of the output buffer, which must be large enough to hold the entire uncompressed data (so the size of the uncompressed data must be known in advance). After calling the function, <code>output_len</code> is the size of the used data in <code>output</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function may return <code>FT_Err_Unimplemented_Feature</code> if your build of FreeType was not compiled with zlib support.</p> since <p>2.5.1</p>"},{"location":"ft2-header_file_macros.html","title":"Header File Macros","text":"<p>FreeType \u00bb Docs \u00bb Extended API \u00bb Header File Macros</p>"},{"location":"ft2-header_file_macros.html#header-file-macros","title":"Header File Macros","text":""},{"location":"ft2-header_file_macros.html#synopsis","title":"Synopsis","text":"<p>In addition to the normal scheme of including header files like <pre><code>  #include &lt;freetype/freetype.h&gt;\n  #include &lt;freetype/ftmm.h&gt;\n  #include &lt;freetype/ftglyph.h&gt;\n</code></pre></p> <p>it is possible to used named macros instead. They can be used directly in <code>#include</code> statements as in <pre><code>  #include FT_FREETYPE_H\n  #include FT_MULTIPLE_MASTERS_H\n  #include FT_GLYPH_H\n</code></pre></p> <p>These macros were introduced to overcome the infamous 8.3\u00a0naming rule required by DOS (and <code>FT_MULTIPLE_MASTERS_H</code> is a lot more meaningful than <code>ftmm.h</code>).</p>"},{"location":"ft2-header_file_macros.html#ft_config_config_h","title":"FT_CONFIG_CONFIG_H","text":"<pre><code>#ifndef FT_CONFIG_CONFIG_H\n#define FT_CONFIG_CONFIG_H  &lt;freetype/config/ftconfig.h&gt;\n#endif\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing FreeType\u00a02 configuration data.</p>"},{"location":"ft2-header_file_macros.html#ft_config_standard_library_h","title":"FT_CONFIG_STANDARD_LIBRARY_H","text":"<pre><code>#ifndef FT_CONFIG_STANDARD_LIBRARY_H\n#define FT_CONFIG_STANDARD_LIBRARY_H  &lt;freetype/config/ftstdlib.h&gt;\n#endif\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing FreeType\u00a02 interface to the standard C library functions.</p>"},{"location":"ft2-header_file_macros.html#ft_config_options_h","title":"FT_CONFIG_OPTIONS_H","text":"<pre><code>#ifndef FT_CONFIG_OPTIONS_H\n#define FT_CONFIG_OPTIONS_H  &lt;freetype/config/ftoption.h&gt;\n#endif\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing FreeType\u00a02 project-specific configuration options.</p>"},{"location":"ft2-header_file_macros.html#ft_config_modules_h","title":"FT_CONFIG_MODULES_H","text":"<pre><code>#ifndef FT_CONFIG_MODULES_H\n#define FT_CONFIG_MODULES_H  &lt;freetype/config/ftmodule.h&gt;\n#endif\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the list of FreeType\u00a02 modules that are statically linked to new library instances in <code>FT_Init_FreeType</code>.</p>"},{"location":"ft2-header_file_macros.html#ft_freetype_h","title":"FT_FREETYPE_H","text":"<pre><code>#define FT_FREETYPE_H  &lt;freetype/freetype.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the base FreeType\u00a02 API.</p>"},{"location":"ft2-header_file_macros.html#ft_errors_h","title":"FT_ERRORS_H","text":"<pre><code>#define FT_ERRORS_H  &lt;freetype/fterrors.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the list of FreeType\u00a02 error codes (and messages).</p> <p>It is included by <code>FT_FREETYPE_H</code>.</p>"},{"location":"ft2-header_file_macros.html#ft_module_errors_h","title":"FT_MODULE_ERRORS_H","text":"<pre><code>#define FT_MODULE_ERRORS_H  &lt;freetype/ftmoderr.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the list of FreeType\u00a02 module error offsets (and messages).</p>"},{"location":"ft2-header_file_macros.html#ft_system_h","title":"FT_SYSTEM_H","text":"<pre><code>#define FT_SYSTEM_H  &lt;freetype/ftsystem.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 interface to low-level operations (i.e., memory management and stream i/o).</p> <p>It is included by <code>FT_FREETYPE_H</code>.</p>"},{"location":"ft2-header_file_macros.html#ft_image_h","title":"FT_IMAGE_H","text":"<pre><code>#define FT_IMAGE_H  &lt;freetype/ftimage.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing type definitions related to glyph images (i.e., bitmaps, outlines, scan-converter parameters).</p> <p>It is included by <code>FT_FREETYPE_H</code>.</p>"},{"location":"ft2-header_file_macros.html#ft_types_h","title":"FT_TYPES_H","text":"<pre><code>#define FT_TYPES_H  &lt;freetype/fttypes.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the basic data types defined by FreeType\u00a02.</p> <p>It is included by <code>FT_FREETYPE_H</code>.</p>"},{"location":"ft2-header_file_macros.html#ft_list_h","title":"FT_LIST_H","text":"<pre><code>#define FT_LIST_H  &lt;freetype/ftlist.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the list management API of FreeType\u00a02.</p> <p>(Most applications will never need to include this file.)</p>"},{"location":"ft2-header_file_macros.html#ft_outline_h","title":"FT_OUTLINE_H","text":"<pre><code>#define FT_OUTLINE_H  &lt;freetype/ftoutln.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the scalable outline management API of FreeType\u00a02.</p>"},{"location":"ft2-header_file_macros.html#ft_sizes_h","title":"FT_SIZES_H","text":"<pre><code>#define FT_SIZES_H  &lt;freetype/ftsizes.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the API which manages multiple <code>FT_Size</code> objects per face.</p>"},{"location":"ft2-header_file_macros.html#ft_module_h","title":"FT_MODULE_H","text":"<pre><code>#define FT_MODULE_H  &lt;freetype/ftmodapi.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the module management API of FreeType\u00a02.</p>"},{"location":"ft2-header_file_macros.html#ft_render_h","title":"FT_RENDER_H","text":"<pre><code>#define FT_RENDER_H  &lt;freetype/ftrender.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the renderer module management API of FreeType\u00a02.</p>"},{"location":"ft2-header_file_macros.html#ft_driver_h","title":"FT_DRIVER_H","text":"<pre><code>#define FT_DRIVER_H  &lt;freetype/ftdriver.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing structures and macros related to the driver modules.</p>"},{"location":"ft2-header_file_macros.html#ft_autohinter_h","title":"FT_AUTOHINTER_H","text":"<pre><code>#define FT_AUTOHINTER_H  FT_DRIVER_H\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing structures and macros related to the auto-hinting module.</p> <p>Deprecated since version\u00a02.9; use <code>FT_DRIVER_H</code> instead.</p>"},{"location":"ft2-header_file_macros.html#ft_cff_driver_h","title":"FT_CFF_DRIVER_H","text":"<pre><code>#define FT_CFF_DRIVER_H  FT_DRIVER_H\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing structures and macros related to the CFF driver module.</p> <p>Deprecated since version\u00a02.9; use <code>FT_DRIVER_H</code> instead.</p>"},{"location":"ft2-header_file_macros.html#ft_truetype_driver_h","title":"FT_TRUETYPE_DRIVER_H","text":"<pre><code>#define FT_TRUETYPE_DRIVER_H  FT_DRIVER_H\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing structures and macros related to the TrueType driver module.</p> <p>Deprecated since version\u00a02.9; use <code>FT_DRIVER_H</code> instead.</p>"},{"location":"ft2-header_file_macros.html#ft_pcf_driver_h","title":"FT_PCF_DRIVER_H","text":"<pre><code>#define FT_PCF_DRIVER_H  FT_DRIVER_H\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing structures and macros related to the PCF driver module.</p> <p>Deprecated since version\u00a02.9; use <code>FT_DRIVER_H</code> instead.</p>"},{"location":"ft2-header_file_macros.html#ft_type1_tables_h","title":"FT_TYPE1_TABLES_H","text":"<pre><code>#define FT_TYPE1_TABLES_H  &lt;freetype/t1tables.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the types and API specific to the Type\u00a01 format.</p>"},{"location":"ft2-header_file_macros.html#ft_truetype_ids_h","title":"FT_TRUETYPE_IDS_H","text":"<pre><code>#define FT_TRUETYPE_IDS_H  &lt;freetype/ttnameid.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the enumeration values which identify name strings, languages, encodings, etc. This file really contains a large set of constant macro definitions, taken from the TrueType and OpenType specifications.</p>"},{"location":"ft2-header_file_macros.html#ft_truetype_tables_h","title":"FT_TRUETYPE_TABLES_H","text":"<pre><code>#define FT_TRUETYPE_TABLES_H  &lt;freetype/tttables.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the types and API specific to the TrueType (as well as OpenType) format.</p>"},{"location":"ft2-header_file_macros.html#ft_truetype_tags_h","title":"FT_TRUETYPE_TAGS_H","text":"<pre><code>#define FT_TRUETYPE_TAGS_H  &lt;freetype/tttags.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the definitions of TrueType four-byte \u2018tags\u2019 which identify blocks in SFNT-based font formats (i.e., TrueType and OpenType).</p>"},{"location":"ft2-header_file_macros.html#ft_bdf_h","title":"FT_BDF_H","text":"<pre><code>#define FT_BDF_H  &lt;freetype/ftbdf.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the definitions of an API which accesses BDF-specific strings from a face.</p>"},{"location":"ft2-header_file_macros.html#ft_cid_h","title":"FT_CID_H","text":"<pre><code>#define FT_CID_H  &lt;freetype/ftcid.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the definitions of an API which access CID font information from a face.</p>"},{"location":"ft2-header_file_macros.html#ft_gzip_h","title":"FT_GZIP_H","text":"<pre><code>#define FT_GZIP_H  &lt;freetype/ftgzip.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the definitions of an API which supports gzip-compressed files.</p>"},{"location":"ft2-header_file_macros.html#ft_lzw_h","title":"FT_LZW_H","text":"<pre><code>#define FT_LZW_H  &lt;freetype/ftlzw.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the definitions of an API which supports LZW-compressed files.</p>"},{"location":"ft2-header_file_macros.html#ft_bzip2_h","title":"FT_BZIP2_H","text":"<pre><code>#define FT_BZIP2_H  &lt;freetype/ftbzip2.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the definitions of an API which supports bzip2-compressed files.</p>"},{"location":"ft2-header_file_macros.html#ft_winfonts_h","title":"FT_WINFONTS_H","text":"<pre><code>#define FT_WINFONTS_H   &lt;freetype/ftwinfnt.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the definitions of an API which supports Windows FNT files.</p>"},{"location":"ft2-header_file_macros.html#ft_glyph_h","title":"FT_GLYPH_H","text":"<pre><code>#define FT_GLYPH_H  &lt;freetype/ftglyph.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the API of the optional glyph management component.</p>"},{"location":"ft2-header_file_macros.html#ft_bitmap_h","title":"FT_BITMAP_H","text":"<pre><code>#define FT_BITMAP_H  &lt;freetype/ftbitmap.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the API of the optional bitmap conversion component.</p>"},{"location":"ft2-header_file_macros.html#ft_bbox_h","title":"FT_BBOX_H","text":"<pre><code>#define FT_BBOX_H  &lt;freetype/ftbbox.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the API of the optional exact bounding box computation routines.</p>"},{"location":"ft2-header_file_macros.html#ft_cache_h","title":"FT_CACHE_H","text":"<pre><code>#define FT_CACHE_H  &lt;freetype/ftcache.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the API of the optional FreeType\u00a02 cache sub-system.</p>"},{"location":"ft2-header_file_macros.html#ft_mac_h","title":"FT_MAC_H","text":"<pre><code>#define FT_MAC_H  &lt;freetype/ftmac.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the Macintosh-specific FreeType\u00a02 API. The latter is used to access fonts embedded in resource forks.</p> <p>This header file must be explicitly included by client applications compiled on the Mac (note that the base API still works though).</p>"},{"location":"ft2-header_file_macros.html#ft_multiple_masters_h","title":"FT_MULTIPLE_MASTERS_H","text":"<pre><code>#define FT_MULTIPLE_MASTERS_H  &lt;freetype/ftmm.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the optional multiple-masters management API of FreeType\u00a02.</p>"},{"location":"ft2-header_file_macros.html#ft_sfnt_names_h","title":"FT_SFNT_NAMES_H","text":"<pre><code>#define FT_SFNT_NAMES_H  &lt;freetype/ftsnames.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the optional FreeType\u00a02 API which accesses embedded \u2018name\u2019 strings in SFNT-based font formats (i.e., TrueType and OpenType).</p>"},{"location":"ft2-header_file_macros.html#ft_opentype_validate_h","title":"FT_OPENTYPE_VALIDATE_H","text":"<pre><code>#define FT_OPENTYPE_VALIDATE_H  &lt;freetype/ftotval.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the optional FreeType\u00a02 API which validates OpenType tables (\u2018BASE\u2019, \u2018GDEF\u2019, \u2018GPOS\u2019, \u2018GSUB\u2019, \u2018JSTF\u2019).</p>"},{"location":"ft2-header_file_macros.html#ft_gx_validate_h","title":"FT_GX_VALIDATE_H","text":"<pre><code>#define FT_GX_VALIDATE_H  &lt;freetype/ftgxval.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the optional FreeType\u00a02 API which validates TrueTypeGX/AAT tables (\u2018feat\u2019, \u2018mort\u2019, \u2018morx\u2019, \u2018bsln\u2019, \u2018just\u2019, \u2018kern\u2019, \u2018opbd\u2019, \u2018trak\u2019, \u2018prop\u2019).</p>"},{"location":"ft2-header_file_macros.html#ft_pfr_h","title":"FT_PFR_H","text":"<pre><code>#define FT_PFR_H  &lt;freetype/ftpfr.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which accesses PFR-specific data.</p>"},{"location":"ft2-header_file_macros.html#ft_stroker_h","title":"FT_STROKER_H","text":"<pre><code>#define FT_STROKER_H  &lt;freetype/ftstroke.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which provides functions to stroke outline paths.</p>"},{"location":"ft2-header_file_macros.html#ft_synthesis_h","title":"FT_SYNTHESIS_H","text":"<pre><code>#define FT_SYNTHESIS_H  &lt;freetype/ftsynth.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which performs artificial obliquing and emboldening.</p>"},{"location":"ft2-header_file_macros.html#ft_font_formats_h","title":"FT_FONT_FORMATS_H","text":"<pre><code>#define FT_FONT_FORMATS_H  &lt;freetype/ftfntfmt.h&gt;\n\n  /* deprecated */\n#define FT_XFREE86_H  FT_FONT_FORMATS_H\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which provides functions specific to font formats.</p>"},{"location":"ft2-header_file_macros.html#ft_trigonometry_h","title":"FT_TRIGONOMETRY_H","text":"<pre><code>#define FT_TRIGONOMETRY_H  &lt;freetype/fttrigon.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which performs trigonometric computations (e.g., cosines and arc tangents).</p>"},{"location":"ft2-header_file_macros.html#ft_lcd_filter_h","title":"FT_LCD_FILTER_H","text":"<pre><code>#define FT_LCD_FILTER_H  &lt;freetype/ftlcdfil.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which performs color filtering for subpixel rendering.</p>"},{"location":"ft2-header_file_macros.html#ft_incremental_h","title":"FT_INCREMENTAL_H","text":"<pre><code>#define FT_INCREMENTAL_H  &lt;freetype/ftincrem.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which performs incremental glyph loading.</p>"},{"location":"ft2-header_file_macros.html#ft_gasp_h","title":"FT_GASP_H","text":"<pre><code>#define FT_GASP_H  &lt;freetype/ftgasp.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which returns entries from the TrueType GASP table.</p>"},{"location":"ft2-header_file_macros.html#ft_advances_h","title":"FT_ADVANCES_H","text":"<pre><code>#define FT_ADVANCES_H  &lt;freetype/ftadvanc.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which returns individual and ranged glyph advances.</p>"},{"location":"ft2-header_file_macros.html#ft_color_h","title":"FT_COLOR_H","text":"<pre><code>#define FT_COLOR_H  &lt;freetype/ftcolor.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which handles the OpenType \u2018CPAL\u2019 table.</p>"},{"location":"ft2-header_file_macros.html#ft_otsvg_h","title":"FT_OTSVG_H","text":"<pre><code>#define FT_OTSVG_H  &lt;freetype/otsvg.h&gt;\n</code></pre> <p>A macro used in <code>#include</code> statements to name the file containing the FreeType\u00a02 API which handles the OpenType \u2018SVG\u00a0\u2019 glyphs.</p>"},{"location":"ft2-header_inclusion.html","title":"FreeType's header inclusion scheme","text":"<p>FreeType \u00bb Docs \u00bb General Remarks \u00bb FreeType's header inclusion scheme</p>"},{"location":"ft2-header_inclusion.html#freetypes-header-inclusion-scheme","title":"FreeType's header inclusion scheme","text":""},{"location":"ft2-header_inclusion.html#synopsis","title":"Synopsis","text":"<p>To be as flexible as possible (and for historical reasons), you must load file <code>ft2build.h</code> first before other header files, for example <pre><code>  #include &lt;ft2build.h&gt;\n\n  #include &lt;freetype/freetype.h&gt;\n  #include &lt;freetype/ftoutln.h&gt;\n</code></pre></p>"},{"location":"ft2-incremental.html","title":"Incremental Loading","text":"<p>FreeType \u00bb Docs \u00bb Miscellaneous \u00bb Incremental Loading</p>"},{"location":"ft2-incremental.html#incremental-loading","title":"Incremental Loading","text":""},{"location":"ft2-incremental.html#synopsis","title":"Synopsis","text":"<p>This section contains various functions used to perform so-called \u2018incremental\u2019 glyph loading. This is a mode where all glyphs loaded from a given <code>FT_Face</code> are provided by the client application.</p> <p>Apart from that, all other tables are loaded normally from the font file. This mode is useful when FreeType is used within another engine, e.g., a PostScript Imaging Processor.</p> <p>To enable this mode, you must use <code>FT_Open_Face</code>, passing an <code>FT_Parameter</code> with the <code>FT_PARAM_TAG_INCREMENTAL</code> tag and an <code>FT_Incremental_Interface</code> value. See the comments for <code>FT_Incremental_InterfaceRec</code> for an example.</p>"},{"location":"ft2-incremental.html#ft_incremental","title":"FT_Incremental","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef struct FT_IncrementalRec_*  FT_Incremental;\n</code></pre> <p>An opaque type describing a user-provided object used to implement \u2018incremental\u2019 glyph loading within FreeType. This is used to support embedded fonts in certain environments (e.g., PostScript interpreters), where the glyph data isn't in the font file, or must be overridden by different values.</p> note <p>It is up to client applications to create and implement <code>FT_Incremental</code> objects, as long as they provide implementations for the methods <code>FT_Incremental_GetGlyphDataFunc</code>, <code>FT_Incremental_FreeGlyphDataFunc</code> and <code>FT_Incremental_GetGlyphMetricsFunc</code>.</p> <p>See the description of <code>FT_Incremental_InterfaceRec</code> to understand how to use incremental objects with FreeType.</p>"},{"location":"ft2-incremental.html#ft_incremental_metricsrec","title":"FT_Incremental_MetricsRec","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef struct  FT_Incremental_MetricsRec_\n  {\n    FT_Long  bearing_x;\n    FT_Long  bearing_y;\n    FT_Long  advance;\n    FT_Long  advance_v;     /* since 2.3.12 */\n\n  } FT_Incremental_MetricsRec;\n</code></pre> <p>A small structure used to contain the basic glyph metrics returned by the <code>FT_Incremental_GetGlyphMetricsFunc</code> method.</p> fields bearing_x <p>Left bearing, in font units.</p> bearing_y <p>Top bearing, in font units.</p> advance <p>Horizontal component of glyph advance, in font units.</p> advance_v <p>Vertical component of glyph advance, in font units.</p> note <p>These correspond to horizontal or vertical metrics depending on the value of the <code>vertical</code> argument to the function <code>FT_Incremental_GetGlyphMetricsFunc</code>.</p>"},{"location":"ft2-incremental.html#ft_incremental_metrics","title":"FT_Incremental_Metrics","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>   typedef struct FT_Incremental_MetricsRec_*  FT_Incremental_Metrics;\n</code></pre> <p>A handle to an <code>FT_Incremental_MetricsRec</code> structure.</p>"},{"location":"ft2-incremental.html#ft_incremental_getglyphdatafunc","title":"FT_Incremental_GetGlyphDataFunc","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef FT_Error\n  (*FT_Incremental_GetGlyphDataFunc)( FT_Incremental  incremental,\n                                      FT_UInt         glyph_index,\n                                      FT_Data*        adata );\n</code></pre> <p>A function called by FreeType to access a given glyph's data bytes during <code>FT_Load_Glyph</code> or <code>FT_Load_Char</code> if incremental loading is enabled.</p> <p>Note that the format of the glyph's data bytes depends on the font file format. For TrueType, it must correspond to the raw bytes within the \u2018glyf\u2019 table. For PostScript formats, it must correspond to the unencrypted charstring bytes, without any <code>lenIV</code> header. It is undefined for any other format.</p> input incremental <p>Handle to an opaque <code>FT_Incremental</code> handle provided by the client application.</p> glyph_index <p>Index of relevant glyph.</p> output adata <p>A structure describing the returned glyph data bytes (which will be accessed as a read-only byte block).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If this function returns successfully the method <code>FT_Incremental_FreeGlyphDataFunc</code> will be called later to release the data bytes.</p> <p>Nested calls to <code>FT_Incremental_GetGlyphDataFunc</code> can happen for compound glyphs.</p>"},{"location":"ft2-incremental.html#ft_incremental_freeglyphdatafunc","title":"FT_Incremental_FreeGlyphDataFunc","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef void\n  (*FT_Incremental_FreeGlyphDataFunc)( FT_Incremental  incremental,\n                                       FT_Data*        data );\n</code></pre> <p>A function used to release the glyph data bytes returned by a successful call to <code>FT_Incremental_GetGlyphDataFunc</code>.</p> input incremental <p>A handle to an opaque <code>FT_Incremental</code> handle provided by the client application.</p> data <p>A structure describing the glyph data bytes (which will be accessed as a read-only byte block).</p>"},{"location":"ft2-incremental.html#ft_incremental_getglyphmetricsfunc","title":"FT_Incremental_GetGlyphMetricsFunc","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef FT_Error\n  (*FT_Incremental_GetGlyphMetricsFunc)\n                      ( FT_Incremental              incremental,\n                        FT_UInt                     glyph_index,\n                        FT_Bool                     vertical,\n                        FT_Incremental_MetricsRec  *ametrics );\n</code></pre> <p>A function used to retrieve the basic metrics of a given glyph index before accessing its data. This allows for handling font types such as PCL\u00a0XL Format\u00a01, Class\u00a02 downloaded TrueType fonts, where the glyph metrics (<code>hmtx</code> and <code>vmtx</code> tables) are permitted to be omitted from the font, and the relevant metrics included in the header of the glyph outline data. Importantly, this is not intended to allow custom glyph metrics (for example, Postscript Metrics dictionaries), because that conflicts with the requirements of outline hinting. Such custom metrics must be handled separately, by the calling application.</p> input incremental <p>A handle to an opaque <code>FT_Incremental</code> handle provided by the client application.</p> glyph_index <p>Index of relevant glyph.</p> vertical <p>If true, return vertical metrics.</p> ametrics <p>This parameter is used for both input and output. The original glyph metrics, if any, in font units. If metrics are not available all the values must be set to zero.</p> output ametrics <p>The glyph metrics in font units.</p>"},{"location":"ft2-incremental.html#ft_incremental_funcsrec","title":"FT_Incremental_FuncsRec","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef struct  FT_Incremental_FuncsRec_\n  {\n    FT_Incremental_GetGlyphDataFunc     get_glyph_data;\n    FT_Incremental_FreeGlyphDataFunc    free_glyph_data;\n    FT_Incremental_GetGlyphMetricsFunc  get_glyph_metrics;\n\n  } FT_Incremental_FuncsRec;\n</code></pre> <p>A table of functions for accessing fonts that load data incrementally. Used in <code>FT_Incremental_InterfaceRec</code>.</p> fields get_glyph_data <p>The function to get glyph data. Must not be null.</p> free_glyph_data <p>The function to release glyph data. Must not be null.</p> get_glyph_metrics <p>The function to get glyph metrics. May be null if the font does not require it.</p>"},{"location":"ft2-incremental.html#ft_incremental_interfacerec","title":"FT_Incremental_InterfaceRec","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef struct  FT_Incremental_InterfaceRec_\n  {\n    const FT_Incremental_FuncsRec*  funcs;\n    FT_Incremental                  object;\n\n  } FT_Incremental_InterfaceRec;\n</code></pre> <p>A structure to be used with <code>FT_Open_Face</code> to indicate that the user wants to support incremental glyph loading. You should use it with <code>FT_PARAM_TAG_INCREMENTAL</code> as in the following example: <pre><code>  FT_Incremental_InterfaceRec  inc_int;\n  FT_Parameter                 parameter;\n  FT_Open_Args                 open_args;\n\n\n  // set up incremental descriptor\n  inc_int.funcs  = my_funcs;\n  inc_int.object = my_object;\n\n  // set up optional parameter\n  parameter.tag  = FT_PARAM_TAG_INCREMENTAL;\n  parameter.data = &amp;inc_int;\n\n  // set up FT_Open_Args structure\n  open_args.flags      = FT_OPEN_PATHNAME | FT_OPEN_PARAMS;\n  open_args.pathname   = my_font_pathname;\n  open_args.num_params = 1;\n  open_args.params     = &amp;parameter; // we use one optional argument\n\n  // open the font\n  error = FT_Open_Face( library, &amp;open_args, index, &amp;face );\n  ...\n</code></pre></p>"},{"location":"ft2-incremental.html#ft_incremental_interface","title":"FT_Incremental_Interface","text":"<p>Defined in FT_INCREMENTAL_H (freetype/ftincrem.h).</p> <pre><code>  typedef FT_Incremental_InterfaceRec*   FT_Incremental_Interface;\n</code></pre> <p>A pointer to an <code>FT_Incremental_InterfaceRec</code> structure.</p>"},{"location":"ft2-index.html","title":"Index","text":"<p>FreeType \u00bb Docs \u00bb Global Index</p>"},{"location":"ft2-index.html#freetype-2133-api-reference","title":"FreeType-2.13.3 API Reference","text":""},{"location":"ft2-index.html#b","title":"B","text":"<p>BDF_Property BDF_PROPERTY_TYPE_ATOM BDF_PROPERTY_TYPE_CARDINAL BDF_PROPERTY_TYPE_INTEGER BDF_PROPERTY_TYPE_NONE BDF_PropertyRec BDF_PropertyType </p>"},{"location":"ft2-index.html#c","title":"C","text":"<p>CID_FaceDict CID_FaceDictRec CID_FaceInfo CID_FaceInfoRec CID_FontDict CID_Info </p>"},{"location":"ft2-index.html#d","title":"D","text":"<p>darkening-parameters default-script </p>"},{"location":"ft2-index.html#f","title":"F","text":"<p>fallback-script FREETYPE_MAJOR FREETYPE_MINOR FREETYPE_PATCH FREETYPE_XXX FT_Activate_Size FT_Add_Default_Modules FT_Add_Module FT_ADVANCE_FLAG_FAST_ONLY FT_ADVANCES_H FT_Affine23 FT_Alloc_Func FT_Angle FT_ANGLE_2PI FT_Angle_Diff FT_ANGLE_PI FT_ANGLE_PI2 FT_ANGLE_PI4 FT_Atan2 FT_Attach_File FT_Attach_Stream FT_AUTOHINTER_H FT_AUTOHINTER_SCRIPT_CJK FT_AUTOHINTER_SCRIPT_INDIC FT_AUTOHINTER_SCRIPT_LATIN FT_AUTOHINTER_SCRIPT_NONE FT_AUTOHINTER_SCRIPT_XXX FT_BBox FT_BBOX_H FT_BDF_H FT_Bitmap FT_Bitmap_Blend FT_Bitmap_Convert FT_Bitmap_Copy FT_Bitmap_Done FT_Bitmap_Embolden FT_BITMAP_H FT_Bitmap_Init FT_Bitmap_Size FT_BitmapGlyph FT_BitmapGlyphRec FT_Bool FT_Byte FT_Bytes FT_BZIP2_H FT_CACHE_H FT_CeilFix FT_CFF_DRIVER_H FT_Char FT_CharMap FT_CharMapRec FT_CID_H FT_ClassicKern_Free FT_ClassicKern_Validate FT_ClipBox FT_Color FT_COLOR_H FT_COLOR_INCLUDE_ROOT_TRANSFORM FT_COLOR_NO_ROOT_TRANSFORM FT_Color_Root_Transform FT_ColorIndex FT_ColorLine FT_ColorStop FT_ColorStopIterator FT_COLR_Paint FT_Composite_Mode FT_CONFIG_CONFIG_H FT_CONFIG_MODULES_H FT_CONFIG_OPTIONS_H FT_CONFIG_STANDARD_LIBRARY_H FT_Cos FT_Custom_Log_Handler FT_Data FT_DEBUG_HOOK_TRUETYPE FT_DEBUG_HOOK_XXX FT_DebugHook_Func FT_DivFix FT_Done_Face FT_Done_FreeType FT_Done_Glyph FT_Done_Library FT_Done_MM_Var FT_Done_Size FT_Driver FT_DRIVER_H FT_ENC_TAG FT_Encoding FT_ENCODING_ADOBE_CUSTOM FT_ENCODING_ADOBE_EXPERT FT_ENCODING_ADOBE_LATIN_1 FT_ENCODING_ADOBE_STANDARD FT_ENCODING_APPLE_ROMAN FT_ENCODING_BIG5 FT_ENCODING_JOHAB FT_ENCODING_MS_BIG5 FT_ENCODING_MS_GB2312 FT_ENCODING_MS_JOHAB FT_ENCODING_MS_SJIS FT_ENCODING_MS_SYMBOL FT_ENCODING_MS_WANSUNG FT_ENCODING_NONE FT_ENCODING_OLD_LATIN_2 FT_ENCODING_PRC FT_ENCODING_SJIS FT_ENCODING_UNICODE FT_ENCODING_WANSUNG FT_Err_XXX FT_Error FT_Error_String FT_ERRORS_H FT_F26Dot6 FT_F2Dot14 FT_Face FT_Face_CheckTrueTypePatents FT_FACE_DRIVER_NAME FT_FACE_FLAG_CID_KEYED FT_FACE_FLAG_COLOR FT_FACE_FLAG_EXTERNAL_STREAM FT_FACE_FLAG_FAST_GLYPHS FT_FACE_FLAG_FIXED_SIZES FT_FACE_FLAG_FIXED_WIDTH FT_FACE_FLAG_GLYPH_NAMES FT_FACE_FLAG_HINTER FT_FACE_FLAG_HORIZONTAL FT_FACE_FLAG_KERNING FT_FACE_FLAG_MULTIPLE_MASTERS FT_FACE_FLAG_SBIX FT_FACE_FLAG_SBIX_OVERLAY FT_FACE_FLAG_SCALABLE FT_FACE_FLAG_SFNT FT_FACE_FLAG_SVG FT_FACE_FLAG_TRICKY FT_FACE_FLAG_VARIATION FT_FACE_FLAG_VERTICAL FT_FACE_FLAG_XXX FT_Face_GetCharsOfVariant FT_Face_GetCharVariantIndex FT_Face_GetCharVariantIsDefault FT_Face_GetVariantSelectors FT_Face_GetVariantsOfChar FT_Face_Internal FT_Face_Properties FT_Face_SetUnpatentedHinting FT_FaceRec FT_Fixed FT_FloorFix FT_FONT_FORMATS_H FT_Free_Func FT_FREETYPE_H FT_FSTYPE_BITMAP_EMBEDDING_ONLY FT_FSTYPE_EDITABLE_EMBEDDING FT_FSTYPE_INSTALLABLE_EMBEDDING FT_FSTYPE_NO_SUBSETTING FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING FT_FSTYPE_XXX FT_FWord FT_GASP_DO_GRAY FT_GASP_DO_GRIDFIT FT_GASP_H FT_GASP_NO_TABLE FT_GASP_SYMMETRIC_GRIDFIT FT_GASP_SYMMETRIC_SMOOTHING FT_GASP_XXX FT_Generic FT_Generic_Finalizer FT_Get_Advance FT_Get_Advances FT_Get_BDF_Charset_ID FT_Get_BDF_Property FT_Get_Char_Index FT_Get_Charmap_Index FT_Get_CID_From_Glyph_Index FT_Get_CID_Is_Internally_CID_Keyed FT_Get_CID_Registry_Ordering_Supplement FT_Get_CMap_Format FT_Get_CMap_Language_ID FT_Get_Color_Glyph_ClipBox FT_Get_Color_Glyph_Layer FT_Get_Color_Glyph_Paint FT_Get_Colorline_Stops FT_Get_Default_Named_Instance FT_Get_First_Char FT_Get_Font_Format FT_Get_FSType_Flags FT_Get_Gasp FT_Get_Glyph FT_Get_Glyph_Name FT_Get_Kerning FT_Get_MM_Blend_Coordinates FT_Get_MM_Var FT_Get_MM_WeightVector FT_Get_Module FT_Get_Multi_Master FT_Get_Name_Index FT_Get_Next_Char FT_Get_Paint FT_Get_Paint_Layers FT_Get_PFR_Advance FT_Get_PFR_Kerning FT_Get_PFR_Metrics FT_Get_Postscript_Name FT_Get_PS_Font_Info FT_Get_PS_Font_Private FT_Get_PS_Font_Value FT_Get_Renderer FT_Get_Sfnt_LangTag FT_Get_Sfnt_Name FT_Get_Sfnt_Name_Count FT_Get_Sfnt_Table FT_Get_SubGlyph_Info FT_Get_Track_Kerning FT_Get_Transform FT_Get_TrueType_Engine_Type FT_Get_Var_Axis_Flags FT_Get_Var_Blend_Coordinates FT_Get_Var_Design_Coordinates FT_Get_WinFNT_Header FT_GetFile_From_Mac_ATS_Name FT_GetFile_From_Mac_Name FT_GetFilePath_From_Mac_ATS_Name FT_Glyph FT_GLYPH_BBOX_GRIDFIT FT_Glyph_BBox_Mode FT_GLYPH_BBOX_PIXELS FT_GLYPH_BBOX_SUBPIXELS FT_GLYPH_BBOX_TRUNCATE FT_GLYPH_BBOX_UNSCALED FT_Glyph_Copy FT_Glyph_Format FT_GLYPH_FORMAT_BITMAP FT_GLYPH_FORMAT_COMPOSITE FT_GLYPH_FORMAT_NONE FT_GLYPH_FORMAT_OUTLINE FT_GLYPH_FORMAT_PLOTTER FT_GLYPH_FORMAT_SVG FT_Glyph_Get_CBox FT_GLYPH_H FT_Glyph_Metrics FT_Glyph_Stroke FT_Glyph_StrokeBorder FT_Glyph_To_Bitmap FT_Glyph_Transform FT_GlyphRec FT_GlyphSlot FT_GlyphSlot_Own_Bitmap FT_GlyphSlotRec FT_GX_VALIDATE_H FT_GZIP_H FT_Gzip_Uncompress FT_HAS_COLOR FT_HAS_FAST_GLYPHS FT_HAS_FIXED_SIZES FT_HAS_GLYPH_NAMES FT_HAS_HORIZONTAL FT_HAS_KERNING FT_HAS_MULTIPLE_MASTERS FT_Has_PS_Glyph_Names FT_HAS_SBIX FT_HAS_SBIX_OVERLAY FT_HAS_SVG FT_HAS_VERTICAL FT_HINTING_ADOBE FT_HINTING_FREETYPE FT_HINTING_XXX FT_IMAGE_H FT_IMAGE_TAG FT_Incremental FT_Incremental_FreeGlyphDataFunc FT_Incremental_FuncsRec FT_Incremental_GetGlyphDataFunc FT_Incremental_GetGlyphMetricsFunc FT_INCREMENTAL_H FT_Incremental_Interface FT_Incremental_InterfaceRec FT_Incremental_Metrics FT_Incremental_MetricsRec FT_Init_FreeType FT_Int FT_Int16 FT_Int32 FT_Int64 FT_IS_CID_KEYED FT_IS_FIXED_WIDTH FT_IS_NAMED_INSTANCE FT_IS_SCALABLE FT_IS_SFNT FT_IS_TRICKY FT_IS_VARIATION FT_KERNING_DEFAULT FT_Kerning_Mode FT_KERNING_UNFITTED FT_KERNING_UNSCALED FT_LayerIterator FT_LCD_FILTER_DEFAULT FT_LCD_FILTER_H FT_LCD_FILTER_LEGACY FT_LCD_FILTER_LEGACY1 FT_LCD_FILTER_LIGHT FT_LCD_FILTER_NONE FT_LcdFilter FT_LcdFiveTapFilter FT_Library FT_Library_SetLcdFilter FT_Library_SetLcdFilterWeights FT_Library_SetLcdGeometry FT_Library_Version FT_List FT_List_Add FT_List_Destructor FT_List_Finalize FT_List_Find FT_LIST_H FT_List_Insert FT_List_Iterate FT_List_Iterator FT_List_Remove FT_List_Up FT_ListNode FT_ListNodeRec FT_ListRec FT_LOAD_BITMAP_METRICS_ONLY FT_Load_Char FT_LOAD_COLOR FT_LOAD_COMPUTE_METRICS FT_LOAD_CROP_BITMAP FT_LOAD_DEFAULT FT_LOAD_FORCE_AUTOHINT FT_Load_Glyph FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH FT_LOAD_IGNORE_TRANSFORM FT_LOAD_LINEAR_DESIGN FT_LOAD_MONOCHROME FT_LOAD_NO_AUTOHINT FT_LOAD_NO_BITMAP FT_LOAD_NO_HINTING FT_LOAD_NO_RECURSE FT_LOAD_NO_SCALE FT_LOAD_NO_SVG FT_LOAD_PEDANTIC FT_LOAD_RENDER FT_LOAD_SBITS_ONLY FT_Load_Sfnt_Table FT_LOAD_TARGET_LCD FT_LOAD_TARGET_LCD_V FT_LOAD_TARGET_LIGHT FT_LOAD_TARGET_MODE FT_LOAD_TARGET_MONO FT_LOAD_TARGET_NORMAL FT_LOAD_TARGET_XXX FT_LOAD_VERTICAL_LAYOUT FT_LOAD_XXX FT_Long FT_LZW_H FT_MAC_H FT_MAKE_TAG FT_Matrix FT_Matrix_Invert FT_Matrix_Multiply FT_Memory FT_MemoryRec FT_MM_Axis FT_MM_Var FT_Module FT_Module_Class FT_Module_Constructor FT_Module_Destructor FT_MODULE_ERRORS_H FT_MODULE_H FT_Module_Requester FT_MulDiv FT_MulFix FT_Multi_Master FT_MULTIPLE_MASTERS_H FT_New_Face FT_New_Face_From_FOND FT_New_Face_From_FSRef FT_New_Face_From_FSSpec FT_New_Glyph FT_New_Library FT_New_Memory_Face FT_New_Size FT_Offset FT_OpaquePaint FT_Open_Args FT_OPEN_DRIVER FT_Open_Face FT_OPEN_MEMORY FT_OPEN_PARAMS FT_OPEN_PATHNAME FT_OPEN_STREAM FT_OPEN_XXX FT_OpenType_Free FT_OpenType_Validate FT_OPENTYPE_VALIDATE_H FT_Orientation FT_ORIENTATION_FILL_LEFT FT_ORIENTATION_FILL_RIGHT FT_ORIENTATION_NONE FT_ORIENTATION_POSTSCRIPT FT_ORIENTATION_TRUETYPE FT_OTSVG_H FT_Outline FT_Outline_Check FT_Outline_ConicToFunc FT_Outline_Copy FT_Outline_CubicToFunc FT_Outline_Decompose FT_Outline_Done FT_Outline_Embolden FT_Outline_EmboldenXY FT_OUTLINE_EVEN_ODD_FILL FT_Outline_Funcs FT_Outline_Get_BBox FT_Outline_Get_Bitmap FT_Outline_Get_CBox FT_Outline_Get_Orientation FT_Outline_GetInsideBorder FT_Outline_GetOutsideBorder FT_OUTLINE_H FT_OUTLINE_HIGH_PRECISION FT_OUTLINE_IGNORE_DROPOUTS FT_OUTLINE_INCLUDE_STUBS FT_Outline_LineToFunc FT_Outline_MoveToFunc FT_Outline_New FT_OUTLINE_NONE FT_OUTLINE_OVERLAP FT_OUTLINE_OWNER FT_Outline_Render FT_Outline_Reverse FT_OUTLINE_REVERSE_FILL FT_OUTLINE_SINGLE_PASS FT_OUTLINE_SMART_DROPOUTS FT_Outline_Transform FT_Outline_Translate FT_OUTLINE_XXX FT_OutlineGlyph FT_OutlineGlyphRec FT_PaintColrGlyph FT_PaintColrLayers FT_PaintComposite FT_PaintExtend FT_PaintFormat FT_PaintGlyph FT_PaintLinearGradient FT_PaintRadialGradient FT_PaintRotate FT_PaintScale FT_PaintSkew FT_PaintSolid FT_PaintSweepGradient FT_PaintTransform FT_PaintTranslate FT_Palette_Data FT_Palette_Data_Get FT_PALETTE_FOR_DARK_BACKGROUND FT_PALETTE_FOR_LIGHT_BACKGROUND FT_Palette_Select FT_Palette_Set_Foreground_Color FT_PALETTE_XXX FT_PARAM_TAG_IGNORE_SBIX FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY FT_PARAM_TAG_INCREMENTAL FT_PARAM_TAG_LCD_FILTER_WEIGHTS FT_PARAM_TAG_RANDOM_SEED FT_PARAM_TAG_STEM_DARKENING FT_PARAM_TAG_UNPATENTED_HINTING FT_Parameter FT_PCF_DRIVER_H FT_PFR_H FT_Pixel_Mode FT_PIXEL_MODE_BGRA FT_PIXEL_MODE_GRAY FT_PIXEL_MODE_GRAY2 FT_PIXEL_MODE_GRAY4 FT_PIXEL_MODE_LCD FT_PIXEL_MODE_LCD_V FT_PIXEL_MODE_MONO FT_PIXEL_MODE_NONE FT_Pointer FT_Pos FT_Prop_GlyphToScriptMap FT_Prop_IncreaseXHeight FT_Property_Get FT_Property_Set FT_PtrDist FT_Raster FT_Raster_BitSet_Func FT_Raster_BitTest_Func FT_Raster_DoneFunc FT_RASTER_FLAG_AA FT_RASTER_FLAG_CLIP FT_RASTER_FLAG_DEFAULT FT_RASTER_FLAG_DIRECT FT_RASTER_FLAG_SDF FT_RASTER_FLAG_XXX FT_Raster_Funcs FT_Raster_NewFunc FT_Raster_Params FT_Raster_RenderFunc FT_Raster_ResetFunc FT_Raster_SetModeFunc FT_Realloc_Func FT_Reference_Face FT_Reference_Library FT_Remove_Module FT_Render_Glyph FT_RENDER_H FT_Render_Mode FT_RENDER_MODE_LCD FT_RENDER_MODE_LCD_V FT_RENDER_MODE_LIGHT FT_RENDER_MODE_MONO FT_RENDER_MODE_NORMAL FT_RENDER_MODE_SDF FT_Renderer FT_Renderer_Class FT_Request_Size FT_RoundFix FT_Select_Charmap FT_Select_Size FT_Set_Char_Size FT_Set_Charmap FT_Set_Debug_Hook FT_Set_Default_Log_Handler FT_Set_Default_Properties FT_Set_Log_Handler FT_Set_MM_Blend_Coordinates FT_Set_MM_Design_Coordinates FT_Set_MM_WeightVector FT_Set_Named_Instance FT_Set_Pixel_Sizes FT_Set_Renderer FT_Set_Transform FT_Set_Var_Blend_Coordinates FT_Set_Var_Design_Coordinates FT_SFNT_HEAD FT_SFNT_HHEA FT_SFNT_MAXP FT_SFNT_NAMES_H FT_SFNT_OS2 FT_SFNT_PCLT FT_SFNT_POST FT_Sfnt_Table_Info FT_Sfnt_Tag FT_SFNT_VHEA FT_SfntLangTag FT_SfntName FT_Short FT_Sin FT_Size FT_Size_Internal FT_Size_Metrics FT_Size_Request FT_Size_Request_Type FT_SIZE_REQUEST_TYPE_BBOX FT_SIZE_REQUEST_TYPE_CELL FT_SIZE_REQUEST_TYPE_NOMINAL FT_SIZE_REQUEST_TYPE_REAL_DIM FT_SIZE_REQUEST_TYPE_SCALES FT_Size_RequestRec FT_SizeRec FT_SIZES_H FT_Slot_Internal FT_Span FT_SpanFunc FT_Stream FT_Stream_CloseFunc FT_Stream_IoFunc FT_Stream_OpenBzip2 FT_Stream_OpenGzip FT_Stream_OpenLZW FT_StreamDesc FT_StreamRec FT_String FT_Stroker FT_Stroker_BeginSubPath FT_STROKER_BORDER_LEFT FT_STROKER_BORDER_RIGHT FT_Stroker_ConicTo FT_Stroker_CubicTo FT_Stroker_Done FT_Stroker_EndSubPath FT_Stroker_Export FT_Stroker_ExportBorder FT_Stroker_GetBorderCounts FT_Stroker_GetCounts FT_STROKER_H FT_Stroker_LineCap FT_STROKER_LINECAP_BUTT FT_STROKER_LINECAP_ROUND FT_STROKER_LINECAP_SQUARE FT_Stroker_LineJoin FT_STROKER_LINEJOIN_BEVEL FT_STROKER_LINEJOIN_MITER FT_STROKER_LINEJOIN_MITER_FIXED FT_STROKER_LINEJOIN_MITER_VARIABLE FT_STROKER_LINEJOIN_ROUND FT_Stroker_LineTo FT_Stroker_New FT_Stroker_ParseOutline FT_Stroker_Rewind FT_Stroker_Set FT_StrokerBorder FT_STYLE_FLAG_BOLD FT_STYLE_FLAG_ITALIC FT_STYLE_FLAG_XXX FT_SubGlyph FT_SUBGLYPH_FLAG_2X2 FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID FT_SUBGLYPH_FLAG_SCALE FT_SUBGLYPH_FLAG_USE_MY_METRICS FT_SUBGLYPH_FLAG_XXX FT_SUBGLYPH_FLAG_XY_SCALE FT_SVG_Document FT_SVG_DocumentRec FT_SvgGlyph FT_SvgGlyphRec FT_SYNTHESIS_H FT_SYSTEM_H FT_Tag FT_Tan FT_Trace_Set_Default_Level FT_Trace_Set_Level FT_TRIGONOMETRY_H FT_TRUETYPE_DRIVER_H FT_TRUETYPE_ENGINE_TYPE_NONE FT_TRUETYPE_ENGINE_TYPE_PATENTED FT_TRUETYPE_ENGINE_TYPE_UNPATENTED FT_TRUETYPE_IDS_H FT_TRUETYPE_TABLES_H FT_TRUETYPE_TAGS_H FT_TrueTypeEngineType FT_TrueTypeGX_Free FT_TrueTypeGX_Validate FT_TYPE1_TABLES_H FT_TYPES_H FT_UFWord FT_UInt FT_UInt16 FT_UInt32 FT_UInt64 FT_ULong FT_UnitVector FT_UShort FT_VALIDATE_APPLE FT_VALIDATE_BASE FT_VALIDATE_bsln FT_VALIDATE_CKERN FT_VALIDATE_CKERNXXX FT_VALIDATE_feat FT_VALIDATE_GDEF FT_VALIDATE_GPOS FT_VALIDATE_GSUB FT_VALIDATE_GX FT_VALIDATE_GX_LENGTH FT_VALIDATE_GXXXX FT_VALIDATE_JSTF FT_VALIDATE_just FT_VALIDATE_kern FT_VALIDATE_lcar FT_VALIDATE_MATH FT_VALIDATE_mort FT_VALIDATE_morx FT_VALIDATE_MS FT_VALIDATE_opbd FT_VALIDATE_OT FT_VALIDATE_OTXXX FT_VALIDATE_prop FT_VALIDATE_trak FT_Var_Axis FT_VAR_AXIS_FLAG_HIDDEN FT_VAR_AXIS_FLAG_XXX FT_Var_Named_Style FT_Vector FT_Vector_From_Polar FT_Vector_Length FT_Vector_Polarize FT_Vector_Rotate FT_Vector_Transform FT_Vector_Unit FT_WinFNT_Header FT_WinFNT_HeaderRec FT_WinFNT_ID_CP1250 FT_WinFNT_ID_CP1251 FT_WinFNT_ID_CP1252 FT_WinFNT_ID_CP1253 FT_WinFNT_ID_CP1254 FT_WinFNT_ID_CP1255 FT_WinFNT_ID_CP1256 FT_WinFNT_ID_CP1257 FT_WinFNT_ID_CP1258 FT_WinFNT_ID_CP1361 FT_WinFNT_ID_CP874 FT_WinFNT_ID_CP932 FT_WinFNT_ID_CP936 FT_WinFNT_ID_CP949 FT_WinFNT_ID_CP950 FT_WinFNT_ID_DEFAULT FT_WinFNT_ID_MAC FT_WinFNT_ID_OEM FT_WinFNT_ID_SYMBOL FT_WinFNT_ID_XXX FT_WINFONTS_H FTC_CMapCache FTC_CMapCache_Lookup FTC_CMapCache_New FTC_Face_Requester FTC_FaceID FTC_ImageCache FTC_ImageCache_Lookup FTC_ImageCache_LookupScaler FTC_ImageCache_New FTC_ImageType FTC_ImageTypeRec FTC_Manager FTC_Manager_Done FTC_Manager_LookupFace FTC_Manager_LookupSize FTC_Manager_New FTC_Manager_RemoveFaceID FTC_Manager_Reset FTC_Node FTC_Node_Unref FTC_SBit FTC_SBitCache FTC_SBitCache_Lookup FTC_SBitCache_LookupScaler FTC_SBitCache_New FTC_SBitRec FTC_Scaler FTC_ScalerRec </p>"},{"location":"ft2-index.html#g","title":"G","text":"<p>glyph-to-script-map </p>"},{"location":"ft2-index.html#h","title":"H","text":"<p>hinting-engine </p>"},{"location":"ft2-index.html#i","title":"I","text":"<p>increase-x-height interpreter-version </p>"},{"location":"ft2-index.html#n","title":"N","text":"<p>no-long-family-names no-stem-darkening </p>"},{"location":"ft2-index.html#p","title":"P","text":"<p>PS_DICT_BLUE_FUZZ PS_DICT_BLUE_SCALE PS_DICT_BLUE_SHIFT PS_DICT_BLUE_VALUE PS_DICT_CHAR_STRING PS_DICT_CHAR_STRING_KEY PS_DICT_ENCODING_ENTRY PS_DICT_ENCODING_TYPE PS_DICT_FAMILY_BLUE PS_DICT_FAMILY_NAME PS_DICT_FAMILY_OTHER_BLUE PS_DICT_FONT_BBOX PS_DICT_FONT_MATRIX PS_DICT_FONT_NAME PS_DICT_FONT_TYPE PS_DICT_FORCE_BOLD PS_DICT_FS_TYPE PS_DICT_FULL_NAME PS_DICT_IS_FIXED_PITCH PS_DICT_ITALIC_ANGLE PS_Dict_Keys PS_DICT_LANGUAGE_GROUP PS_DICT_LEN_IV PS_DICT_MIN_FEATURE PS_DICT_NOTICE PS_DICT_NUM_BLUE_VALUES PS_DICT_NUM_CHAR_STRINGS PS_DICT_NUM_FAMILY_BLUES PS_DICT_NUM_FAMILY_OTHER_BLUES PS_DICT_NUM_OTHER_BLUES PS_DICT_NUM_STEM_SNAP_H PS_DICT_NUM_STEM_SNAP_V PS_DICT_NUM_SUBRS PS_DICT_OTHER_BLUE PS_DICT_PAINT_TYPE PS_DICT_PASSWORD PS_DICT_RND_STEM_UP PS_DICT_STD_HW PS_DICT_STD_VW PS_DICT_STEM_SNAP_H PS_DICT_STEM_SNAP_V PS_DICT_SUBR PS_DICT_UNDERLINE_POSITION PS_DICT_UNDERLINE_THICKNESS PS_DICT_UNIQUE_ID PS_DICT_VERSION PS_DICT_WEIGHT PS_FontInfo PS_FontInfoRec PS_Private PS_PrivateRec </p>"},{"location":"ft2-index.html#r","title":"R","text":"<p>random-seed </p>"},{"location":"ft2-index.html#s","title":"S","text":"<p>spread svg-hooks SVG_Lib_Free_Func SVG_Lib_Init_Func SVG_Lib_Preset_Slot_Func SVG_Lib_Render_Func SVG_RendererHooks </p>"},{"location":"ft2-index.html#t","title":"T","text":"<p>T1_BLEND_BLUE_SCALE T1_BLEND_BLUE_SHIFT T1_BLEND_BLUE_VALUES T1_BLEND_FAMILY_BLUES T1_BLEND_FAMILY_OTHER_BLUES T1_Blend_Flags T1_BLEND_FORCE_BOLD T1_BLEND_ITALIC_ANGLE T1_BLEND_OTHER_BLUES T1_BLEND_STANDARD_HEIGHT T1_BLEND_STANDARD_WIDTH T1_BLEND_STEM_SNAP_HEIGHTS T1_BLEND_STEM_SNAP_WIDTHS T1_BLEND_UNDERLINE_POSITION T1_BLEND_UNDERLINE_THICKNESS T1_ENCODING_TYPE_ARRAY T1_ENCODING_TYPE_EXPERT T1_ENCODING_TYPE_ISOLATIN1 T1_ENCODING_TYPE_NONE T1_ENCODING_TYPE_STANDARD T1_EncodingType T1_FontInfo T1_MAX_MM_AXIS T1_MAX_MM_DESIGNS T1_MAX_MM_MAP_POINTS T1_MAX_MM_XXX T1_Private TT_ADOBE_ID_CUSTOM TT_ADOBE_ID_EXPERT TT_ADOBE_ID_LATIN_1 TT_ADOBE_ID_STANDARD TT_ADOBE_ID_XXX TT_APPLE_ID_DEFAULT TT_APPLE_ID_FULL_UNICODE TT_APPLE_ID_ISO_10646 TT_APPLE_ID_UNICODE_1_1 TT_APPLE_ID_UNICODE_2_0 TT_APPLE_ID_UNICODE_32 TT_APPLE_ID_VARIANT_SELECTOR TT_APPLE_ID_XXX TT_Header TT_HoriHeader TT_INTERPRETER_VERSION_35 TT_INTERPRETER_VERSION_38 TT_INTERPRETER_VERSION_40 TT_INTERPRETER_VERSION_XXX TT_ISO_ID_10646 TT_ISO_ID_7BIT_ASCII TT_ISO_ID_8859_1 TT_ISO_ID_XXX TT_MAC_ID_XXX TT_MAC_LANGID_XXX TT_MaxProfile TT_MS_ID_BIG_5 TT_MS_ID_JOHAB TT_MS_ID_PRC TT_MS_ID_SJIS TT_MS_ID_SYMBOL_CS TT_MS_ID_UCS_4 TT_MS_ID_UNICODE_CS TT_MS_ID_WANSUNG TT_MS_ID_XXX TT_MS_LANGID_XXX TT_NAME_ID_XXX TT_OS2 TT_PCLT TT_PLATFORM_ADOBE TT_PLATFORM_APPLE_UNICODE TT_PLATFORM_CUSTOM TT_PLATFORM_ISO TT_PLATFORM_MACINTOSH TT_PLATFORM_MICROSOFT TT_PLATFORM_XXX TT_Postscript TT_UCR_XXX TT_VertHeader </p>"},{"location":"ft2-index.html#w","title":"W","text":"<p>warping </p> generated on Mon Aug 12 11:00:44 2024 UTC"},{"location":"ft2-information_retrieval.html","title":"Information Retrieval","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Information Retrieval</p>"},{"location":"ft2-information_retrieval.html#information-retrieval","title":"Information Retrieval","text":""},{"location":"ft2-information_retrieval.html#synopsis","title":"Synopsis","text":"<p>Functions to retrieve font and glyph information. Only some very basic data is covered; see also the chapter on the format-specific API for more.</p>"},{"location":"ft2-information_retrieval.html#ft_get_name_index","title":"FT_Get_Name_Index","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_UInt )\n  FT_Get_Name_Index( FT_Face           face,\n                     const FT_String*  glyph_name );\n</code></pre> <p>Return the glyph index of a given glyph name. This only works for those faces where <code>FT_HAS_GLYPH_NAMES</code> returns true.</p> input face <p>A handle to the source face object.</p> glyph_name <p>The glyph name.</p> return <p>The glyph index. 0\u00a0means \u2018undefined character code\u2019.</p> note <p>Acceptable glyph names might come from the Adobe Glyph List. See <code>FT_Get_Glyph_Name</code> for the inverse functionality.</p> <p>This function has limited capabilities if the config macro <code>FT_CONFIG_OPTION_POSTSCRIPT_NAMES</code> is not defined in <code>ftoption.h</code>: It then works only for fonts that actually embed glyph names (which many recent OpenType fonts do not).</p>"},{"location":"ft2-information_retrieval.html#ft_get_glyph_name","title":"FT_Get_Glyph_Name","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Glyph_Name( FT_Face     face,\n                     FT_UInt     glyph_index,\n                     FT_Pointer  buffer,\n                     FT_UInt     buffer_max );\n</code></pre> <p>Retrieve the ASCII name of a given glyph in a face. This only works for those faces where <code>FT_HAS_GLYPH_NAMES</code> returns true.</p> input face <p>A handle to a source face object.</p> glyph_index <p>The glyph index.</p> buffer_max <p>The maximum number of bytes available in the buffer.</p> output buffer <p>A pointer to a target buffer where the name is copied to.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>An error is returned if the face doesn't provide glyph names or if the glyph index is invalid. In all cases of failure, the first byte of <code>buffer</code> is set to\u00a00 to indicate an empty name.</p> <p>The glyph name is truncated to fit within the buffer if it is too long. The returned string is always zero-terminated.</p> <p>Be aware that FreeType reorders glyph indices internally so that glyph index\u00a00 always corresponds to the \u2018missing glyph\u2019 (called \u2018.notdef\u2019).</p> <p>This function has limited capabilities if the config macro <code>FT_CONFIG_OPTION_POSTSCRIPT_NAMES</code> is not defined in <code>ftoption.h</code>: It then works only for fonts that actually embed glyph names (which many recent OpenType fonts do not).</p>"},{"location":"ft2-information_retrieval.html#ft_get_postscript_name","title":"FT_Get_Postscript_Name","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( const char* )\n  FT_Get_Postscript_Name( FT_Face  face );\n</code></pre> <p>Retrieve the ASCII PostScript name of a given face, if available. This only works with PostScript, TrueType, and OpenType fonts.</p> input face <p>A handle to the source face object.</p> return <p>A pointer to the face's PostScript name. <code>NULL</code> if unavailable.</p> note <p>The returned pointer is owned by the face and is destroyed with it.</p> <p>For variation fonts, this string changes if you select a different instance, and you have to call <code>FT_Get_PostScript_Name</code> again to retrieve it. FreeType follows Adobe TechNote #5902, \u2018Generating PostScript Names for Fonts Using OpenType Font Variations\u2019.</p> <p>https://download.macromedia.com/pub/developer/opentype/tech-notes/5902.AdobePSNameGeneration.html</p> <p>[Since 2.9] Special PostScript names for named instances are only returned if the named instance is set with <code>FT_Set_Named_Instance</code> (and the font has corresponding entries in its \u2018fvar\u2019 table or is the default named instance). If <code>FT_IS_VARIATION</code> returns true, the algorithmically derived PostScript name is provided, not looking up special entries for named instances.</p>"},{"location":"ft2-information_retrieval.html#ft_get_fstype_flags","title":"FT_Get_FSType_Flags","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_UShort )\n  FT_Get_FSType_Flags( FT_Face  face );\n</code></pre> <p>Return the <code>fsType</code> flags for a font.</p> input face <p>A handle to the source face object.</p> return <p>The <code>fsType</code> flags, see <code>FT_FSTYPE_XXX</code>.</p> note <p>Use this function rather than directly reading the <code>fs_type</code> field in the <code>PS_FontInfoRec</code> structure, which is only guaranteed to return the correct results for Type\u00a01 fonts.</p> since <p>2.3.8</p>"},{"location":"ft2-information_retrieval.html#ft_fstype_xxx","title":"FT_FSTYPE_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_FSTYPE_INSTALLABLE_EMBEDDING         0x0000\n#define FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING  0x0002\n#define FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING   0x0004\n#define FT_FSTYPE_EDITABLE_EMBEDDING            0x0008\n#define FT_FSTYPE_NO_SUBSETTING                 0x0100\n#define FT_FSTYPE_BITMAP_EMBEDDING_ONLY         0x0200\n</code></pre> <p>A list of bit flags used in the <code>fsType</code> field of the OS/2 table in a TrueType or OpenType font and the <code>FSType</code> entry in a PostScript font. These bit flags are returned by <code>FT_Get_FSType_Flags</code>; they inform client applications of embedding and subsetting restrictions associated with a font.</p> <p>See https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/FontPolicies.pdf for more details.</p> values FT_FSTYPE_INSTALLABLE_EMBEDDING <p>Fonts with no fsType bit set may be embedded and permanently installed on the remote system by an application.</p> FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING <p>Fonts that have only this bit set must not be modified, embedded or exchanged in any manner without first obtaining permission of the font software copyright owner.</p> FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING <p>The font may be embedded and temporarily loaded on the remote system. Documents containing Preview &amp; Print fonts must be opened \u2018read-only\u2019; no edits can be applied to the document.</p> FT_FSTYPE_EDITABLE_EMBEDDING <p>The font may be embedded but must only be installed temporarily on other systems. In contrast to Preview &amp; Print fonts, documents containing editable fonts may be opened for reading, editing is permitted, and changes may be saved.</p> FT_FSTYPE_NO_SUBSETTING <p>The font may not be subsetted prior to embedding.</p> FT_FSTYPE_BITMAP_EMBEDDING_ONLY <p>Only bitmaps contained in the font may be embedded; no outline data may be embedded. If there are no bitmaps available in the font, then the font is unembeddable.</p> note <p>The flags are ORed together, thus more than a single value can be returned.</p> <p>While the <code>fsType</code> flags can indicate that a font may be embedded, a license with the font vendor may be separately required to use the font in this way.</p>"},{"location":"ft2-information_retrieval.html#ft_get_subglyph_info","title":"FT_Get_SubGlyph_Info","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_SubGlyph_Info( FT_GlyphSlot  glyph,\n                        FT_UInt       sub_index,\n                        FT_Int       *p_index,\n                        FT_UInt      *p_flags,\n                        FT_Int       *p_arg1,\n                        FT_Int       *p_arg2,\n                        FT_Matrix    *p_transform );\n</code></pre> <p>Retrieve a description of a given subglyph. Only use it if <code>glyph-&gt;format</code> is <code>FT_GLYPH_FORMAT_COMPOSITE</code>; an error is returned otherwise.</p> input glyph <p>The source glyph slot.</p> sub_index <p>The index of the subglyph. Must be less than <code>glyph-&gt;num_subglyphs</code>.</p> output p_index <p>The glyph index of the subglyph.</p> p_flags <p>The subglyph flags, see <code>FT_SUBGLYPH_FLAG_XXX</code>.</p> p_arg1 <p>The subglyph's first argument (if any).</p> p_arg2 <p>The subglyph's second argument (if any).</p> p_transform <p>The subglyph transformation (if any).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The values of <code>*p_arg1</code>, <code>*p_arg2</code>, and <code>*p_transform</code> must be interpreted depending on the flags returned in <code>*p_flags</code>. See the OpenType specification for details.</p> <p>https://docs.microsoft.com/en-us/typography/opentype/spec/glyf#composite-glyph-description</p>"},{"location":"ft2-information_retrieval.html#ft_subglyph_flag_xxx","title":"FT_SUBGLYPH_FLAG_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS          1\n#define FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES      2\n#define FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID        4\n#define FT_SUBGLYPH_FLAG_SCALE                   8\n#define FT_SUBGLYPH_FLAG_XY_SCALE             0x40\n#define FT_SUBGLYPH_FLAG_2X2                  0x80\n#define FT_SUBGLYPH_FLAG_USE_MY_METRICS      0x200\n</code></pre> <p>A list of constants describing subglyphs. Please refer to the \u2018glyf\u2019 table description in the OpenType specification for the meaning of the various flags (which get synthesized for non-OpenType subglyphs).</p> <p>https://docs.microsoft.com/en-us/typography/opentype/spec/glyf#composite-glyph-description</p> values FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID FT_SUBGLYPH_FLAG_SCALE FT_SUBGLYPH_FLAG_XY_SCALE FT_SUBGLYPH_FLAG_2X2 FT_SUBGLYPH_FLAG_USE_MY_METRICS"},{"location":"ft2-layer_management.html","title":"Glyph Layer Management","text":"<p>FreeType \u00bb Docs \u00bb Extended API \u00bb Glyph Layer Management</p>"},{"location":"ft2-layer_management.html#glyph-layer-management","title":"Glyph Layer Management","text":""},{"location":"ft2-layer_management.html#synopsis","title":"Synopsis","text":"<p>The functions described here allow access of colored glyph layer data in OpenType's \u2018COLR\u2019 tables.</p>"},{"location":"ft2-layer_management.html#ft_layeriterator","title":"FT_LayerIterator","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_LayerIterator_\n  {\n    FT_UInt   num_layers;\n    FT_UInt   layer;\n    FT_Byte*  p;\n\n  } FT_LayerIterator;\n</code></pre> <p>This iterator object is needed for <code>FT_Get_Color_Glyph_Layer</code>.</p> fields num_layers <p>The number of glyph layers for the requested glyph index. Will be set by <code>FT_Get_Color_Glyph_Layer</code>.</p> layer <p>The current layer. Will be set by <code>FT_Get_Color_Glyph_Layer</code>.</p> p <p>An opaque pointer into \u2018COLR\u2019 table data. The caller must set this to <code>NULL</code> before the first call of <code>FT_Get_Color_Glyph_Layer</code>.</p>"},{"location":"ft2-layer_management.html#ft_get_color_glyph_layer","title":"FT_Get_Color_Glyph_Layer","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Get_Color_Glyph_Layer( FT_Face            face,\n                            FT_UInt            base_glyph,\n                            FT_UInt           *aglyph_index,\n                            FT_UInt           *acolor_index,\n                            FT_LayerIterator*  iterator );\n</code></pre> <p>This is an interface to the \u2018COLR\u2019 table in OpenType fonts to iteratively retrieve the colored glyph layers associated with the current glyph slot.</p> <p>https://docs.microsoft.com/en-us/typography/opentype/spec/colr</p> <p>The glyph layer data for a given glyph index, if present, provides an alternative, multi-color glyph representation: Instead of rendering the outline or bitmap with the given glyph index, glyphs with the indices and colors returned by this function are rendered layer by layer.</p> <p>The returned elements are ordered in the z\u00a0direction from bottom to top; the 'n'th element should be rendered with the associated palette color and blended on top of the already rendered layers (elements 0, 1, \u2026, n-1).</p> input face <p>A handle to the parent face object.</p> base_glyph <p>The glyph index the colored glyph layers are associated with.</p> inout iterator <p>An <code>FT_LayerIterator</code> object. For the first call you should set <code>iterator-&gt;p</code> to <code>NULL</code>. For all following calls, simply use the same object again.</p> output aglyph_index <p>The glyph index of the current layer.</p> acolor_index <p>The color index into the font face's color palette of the current layer. The value 0xFFFF is special; it doesn't reference a palette entry but indicates that the text foreground color should be used instead (to be set up by the application outside of FreeType).</p> <p>The color palette can be retrieved with <code>FT_Palette_Select</code>.</p> return <p>Value\u00a01 if everything is OK. If there are no more layers (or if there are no layers at all), value\u00a00 gets returned. In case of an error, value\u00a00 is returned also.</p> note <p>This function is necessary if you want to handle glyph layers by yourself. In particular, functions that operate with <code>FT_GlyphRec</code> objects (like <code>FT_Get_Glyph</code> or <code>FT_Glyph_To_Bitmap</code>) don't have access to this information.</p> <p>Note that <code>FT_Render_Glyph</code> is able to handle colored glyph layers automatically if the <code>FT_LOAD_COLOR</code> flag is passed to a previous call to <code>FT_Load_Glyph</code>. [This is an experimental feature.]</p> example <pre><code>  FT_Color*         palette;\n  FT_LayerIterator  iterator;\n\n  FT_Bool  have_layers;\n  FT_UInt  layer_glyph_index;\n  FT_UInt  layer_color_index;\n\n\n  error = FT_Palette_Select( face, palette_index, &amp;palette );\n  if ( error )\n    palette = NULL;\n\n  iterator.p  = NULL;\n  have_layers = FT_Get_Color_Glyph_Layer( face,\n                                          glyph_index,\n                                          &amp;layer_glyph_index,\n                                          &amp;layer_color_index,\n                                          &amp;iterator );\n\n  if ( palette &amp;&amp; have_layers )\n  {\n    do\n    {\n      FT_Color  layer_color;\n\n\n      if ( layer_color_index == 0xFFFF )\n        layer_color = text_foreground_color;\n      else\n        layer_color = palette[layer_color_index];\n\n      // Load and render glyph `layer_glyph_index', then\n      // blend resulting pixmap (using color `layer_color')\n      // with previously created pixmaps.\n\n    } while ( FT_Get_Color_Glyph_Layer( face,\n                                        glyph_index,\n                                        &amp;layer_glyph_index,\n                                        &amp;layer_color_index,\n                                        &amp;iterator ) );\n  }\n</code></pre> since <p>2.10</p>"},{"location":"ft2-layer_management.html#ft_paintformat","title":"FT_PaintFormat","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef enum  FT_PaintFormat_\n  {\n    FT_COLR_PAINTFORMAT_COLR_LAYERS     = 1,\n    FT_COLR_PAINTFORMAT_SOLID           = 2,\n    FT_COLR_PAINTFORMAT_LINEAR_GRADIENT = 4,\n    FT_COLR_PAINTFORMAT_RADIAL_GRADIENT = 6,\n    FT_COLR_PAINTFORMAT_SWEEP_GRADIENT  = 8,\n    FT_COLR_PAINTFORMAT_GLYPH           = 10,\n    FT_COLR_PAINTFORMAT_COLR_GLYPH      = 11,\n    FT_COLR_PAINTFORMAT_TRANSFORM       = 12,\n    FT_COLR_PAINTFORMAT_TRANSLATE       = 14,\n    FT_COLR_PAINTFORMAT_SCALE           = 16,\n    FT_COLR_PAINTFORMAT_ROTATE          = 24,\n    FT_COLR_PAINTFORMAT_SKEW            = 28,\n    FT_COLR_PAINTFORMAT_COMPOSITE       = 32,\n    FT_COLR_PAINT_FORMAT_MAX            = 33,\n    FT_COLR_PAINTFORMAT_UNSUPPORTED     = 255\n\n  } FT_PaintFormat;\n</code></pre> <p>Enumeration describing the different paint format types of the v1 extensions to the \u2018COLR\u2019 table, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019.</p> <p>The enumeration values loosely correspond with the format numbers of the specification: FreeType always returns a fully specified \u2018Paint\u2019 structure for the \u2018Transform\u2019, \u2018Translate\u2019, \u2018Scale\u2019, \u2018Rotate\u2019, and \u2018Skew\u2019 table types even though the specification has different formats depending on whether or not a center is specified, whether the scale is uniform in x and y\u00a0direction or not, etc. Also, only non-variable format identifiers are listed in this enumeration; as soon as support for variable \u2018COLR\u2019 v1 fonts is implemented, interpolation is performed dependent on axis coordinates, which are configured on the <code>FT_Face</code> through <code>FT_Set_Var_Design_Coordinates</code>. This implies that always static, readily interpolated values are returned in the \u2018Paint\u2019 structures.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_colorstopiterator","title":"FT_ColorStopIterator","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_ColorStopIterator_\n  {\n    FT_UInt  num_color_stops;\n    FT_UInt  current_color_stop;\n\n    FT_Byte*  p;\n\n    FT_Bool  read_variable;\n\n  } FT_ColorStopIterator;\n</code></pre> <p>This iterator object is needed for <code>FT_Get_Colorline_Stops</code>. It keeps state while iterating over the stops of an <code>FT_ColorLine</code>, representing the <code>ColorLine</code> struct of the v1 extensions to \u2018COLR\u2019, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. Do not manually modify fields of this iterator.</p> fields num_color_stops <p>The number of color stops for the requested glyph index. Set by <code>FT_Get_Paint</code>.</p> current_color_stop <p>The current color stop. Set by <code>FT_Get_Colorline_Stops</code>.</p> p <p>An opaque pointer into \u2018COLR\u2019 table data. Set by <code>FT_Get_Paint</code>. Updated by <code>FT_Get_Colorline_Stops</code>.</p> read_variable <p>A boolean keeping track of whether variable color lines are to be read. Set by <code>FT_Get_Paint</code>.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_colorindex","title":"FT_ColorIndex","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_ColorIndex_\n  {\n    FT_UInt16   palette_index;\n    FT_F2Dot14  alpha;\n\n  } FT_ColorIndex;\n</code></pre> <p>A structure representing a <code>ColorIndex</code> value of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019.</p> fields palette_index <p>The palette index into a \u2018CPAL\u2019 palette.</p> alpha <p>Alpha transparency value multiplied with the value from \u2018CPAL\u2019.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_colorstop","title":"FT_ColorStop","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_ColorStop_\n  {\n    FT_Fixed       stop_offset;\n    FT_ColorIndex  color;\n\n  } FT_ColorStop;\n</code></pre> <p>A structure representing a <code>ColorStop</code> value of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019.</p> fields stop_offset <p>The stop offset along the gradient, expressed as a 16.16 fixed-point coordinate.</p> color <p>The color information for this stop, see <code>FT_ColorIndex</code>.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintextend","title":"FT_PaintExtend","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef enum  FT_PaintExtend_\n  {\n    FT_COLR_PAINT_EXTEND_PAD     = 0,\n    FT_COLR_PAINT_EXTEND_REPEAT  = 1,\n    FT_COLR_PAINT_EXTEND_REFLECT = 2\n\n  } FT_PaintExtend;\n</code></pre> <p>An enumeration representing the \u2018Extend\u2019 mode of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. It describes how the gradient fill continues at the other boundaries.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_colorline","title":"FT_ColorLine","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_ColorLine_\n  {\n    FT_PaintExtend        extend;\n    FT_ColorStopIterator  color_stop_iterator;\n\n  } FT_ColorLine;\n</code></pre> <p>A structure representing a <code>ColorLine</code> value of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. It describes a list of color stops along the defined gradient.</p> fields extend <p>The extend mode at the outer boundaries, see <code>FT_PaintExtend</code>.</p> color_stop_iterator <p>The <code>FT_ColorStopIterator</code> used to enumerate and retrieve the actual <code>FT_ColorStop</code>'s.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_affine23","title":"FT_Affine23","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_Affine_23_\n  {\n    FT_Fixed  xx, xy, dx;\n    FT_Fixed  yx, yy, dy;\n\n  } FT_Affine23;\n</code></pre> <p>A structure used to store a 2x3 matrix. Coefficients are in 16.16 fixed-point format. The computation performed is <pre><code>  x' = x*xx + y*xy + dx\n  y' = x*yx + y*yy + dy\n</code></pre></p> fields xx <p>Matrix coefficient.</p> xy <p>Matrix coefficient.</p> dx <p>x translation.</p> yx <p>Matrix coefficient.</p> yy <p>Matrix coefficient.</p> dy <p>y translation.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_composite_mode","title":"FT_Composite_Mode","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef enum  FT_Composite_Mode_\n  {\n    FT_COLR_COMPOSITE_CLEAR          = 0,\n    FT_COLR_COMPOSITE_SRC            = 1,\n    FT_COLR_COMPOSITE_DEST           = 2,\n    FT_COLR_COMPOSITE_SRC_OVER       = 3,\n    FT_COLR_COMPOSITE_DEST_OVER      = 4,\n    FT_COLR_COMPOSITE_SRC_IN         = 5,\n    FT_COLR_COMPOSITE_DEST_IN        = 6,\n    FT_COLR_COMPOSITE_SRC_OUT        = 7,\n    FT_COLR_COMPOSITE_DEST_OUT       = 8,\n    FT_COLR_COMPOSITE_SRC_ATOP       = 9,\n    FT_COLR_COMPOSITE_DEST_ATOP      = 10,\n    FT_COLR_COMPOSITE_XOR            = 11,\n    FT_COLR_COMPOSITE_PLUS           = 12,\n    FT_COLR_COMPOSITE_SCREEN         = 13,\n    FT_COLR_COMPOSITE_OVERLAY        = 14,\n    FT_COLR_COMPOSITE_DARKEN         = 15,\n    FT_COLR_COMPOSITE_LIGHTEN        = 16,\n    FT_COLR_COMPOSITE_COLOR_DODGE    = 17,\n    FT_COLR_COMPOSITE_COLOR_BURN     = 18,\n    FT_COLR_COMPOSITE_HARD_LIGHT     = 19,\n    FT_COLR_COMPOSITE_SOFT_LIGHT     = 20,\n    FT_COLR_COMPOSITE_DIFFERENCE     = 21,\n    FT_COLR_COMPOSITE_EXCLUSION      = 22,\n    FT_COLR_COMPOSITE_MULTIPLY       = 23,\n    FT_COLR_COMPOSITE_HSL_HUE        = 24,\n    FT_COLR_COMPOSITE_HSL_SATURATION = 25,\n    FT_COLR_COMPOSITE_HSL_COLOR      = 26,\n    FT_COLR_COMPOSITE_HSL_LUMINOSITY = 27,\n    FT_COLR_COMPOSITE_MAX            = 28\n\n  } FT_Composite_Mode;\n</code></pre> <p>An enumeration listing the \u2018COLR\u2019 v1 composite modes used in <code>FT_PaintComposite</code>. For more details on each paint mode, see \u2018https://www.w3.org/TR/compositing-1/#porterduffcompositingoperators\u2019.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_opaquepaint","title":"FT_OpaquePaint","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_Opaque_Paint_\n  {\n    FT_Byte*  p;\n    FT_Bool   insert_root_transform;\n  } FT_OpaquePaint;\n</code></pre> <p>A structure representing an offset to a <code>Paint</code> value stored in any of the paint tables of a \u2018COLR\u2019 v1 font. Compare Offset&lt;24&gt; there. When \u2018COLR\u2019 v1 paint tables represented by FreeType objects such as <code>FT_PaintColrLayers</code>, <code>FT_PaintComposite</code>, or <code>FT_PaintTransform</code> reference downstream nested paint tables, we do not immediately retrieve them but encapsulate their location in this type. Use <code>FT_Get_Paint</code> to retrieve the actual <code>FT_COLR_Paint</code> object that describes the details of the respective paint table.</p> fields p <p>An internal offset to a Paint table, needs to be set to NULL before passing this struct as an argument to <code>FT_Get_Paint</code>.</p> insert_root_transform <p>An internal boolean to track whether an initial root transform is to be provided. Do not set this value.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintcolrlayers","title":"FT_PaintColrLayers","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintColrLayers_\n  {\n    FT_LayerIterator  layer_iterator;\n\n  } FT_PaintColrLayers;\n</code></pre> <p>A structure representing a <code>PaintColrLayers</code> table of a \u2018COLR\u2019 v1 font. This table describes a set of layers that are to be composited with composite mode <code>FT_COLR_COMPOSITE_SRC_OVER</code>. The return value of this function is an <code>FT_LayerIterator</code> initialized so that it can be used with <code>FT_Get_Paint_Layers</code> to retrieve the <code>FT_OpaquePaint</code> objects as references to each layer.</p> fields layer_iterator <p>The layer iterator that describes the layers of this paint.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintsolid","title":"FT_PaintSolid","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintSolid_\n  {\n    FT_ColorIndex  color;\n\n  } FT_PaintSolid;\n</code></pre> <p>A structure representing a <code>PaintSolid</code> value of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. Using a <code>PaintSolid</code> value means that the glyph layer filled with this paint is solid-colored and does not contain a gradient.</p> fields color <p>The color information for this solid paint, see <code>FT_ColorIndex</code>.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintlineargradient","title":"FT_PaintLinearGradient","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintLinearGradient_\n  {\n    FT_ColorLine  colorline;\n\n    /* TODO: Potentially expose those as x0, y0 etc. */\n    FT_Vector  p0;\n    FT_Vector  p1;\n    FT_Vector  p2;\n\n  } FT_PaintLinearGradient;\n</code></pre> <p>A structure representing a <code>PaintLinearGradient</code> value of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. The glyph layer filled with this paint is drawn filled with a linear gradient.</p> fields colorline <p>The <code>FT_ColorLine</code> information for this paint, i.e., the list of color stops along the gradient.</p> p0 <p>The starting point of the gradient definition in font units represented as a 16.16 fixed-point <code>FT_Vector</code>.</p> p1 <p>The end point of the gradient definition in font units represented as a 16.16 fixed-point <code>FT_Vector</code>.</p> p2 <p>Optional point\u00a0p2 to rotate the gradient in font units represented as a 16.16 fixed-point <code>FT_Vector</code>. Otherwise equal to\u00a0p0.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintradialgradient","title":"FT_PaintRadialGradient","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintRadialGradient_\n  {\n    FT_ColorLine  colorline;\n\n    FT_Vector  c0;\n    FT_Pos     r0;\n    FT_Vector  c1;\n    FT_Pos     r1;\n\n  } FT_PaintRadialGradient;\n</code></pre> <p>A structure representing a <code>PaintRadialGradient</code> value of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. The glyph layer filled with this paint is drawn filled with a radial gradient.</p> fields colorline <p>The <code>FT_ColorLine</code> information for this paint, i.e., the list of color stops along the gradient.</p> c0 <p>The center of the starting point of the radial gradient in font units represented as a 16.16 fixed-point <code>FT_Vector</code>.</p> r0 <p>The radius of the starting circle of the radial gradient in font units represented as a 16.16 fixed-point value.</p> c1 <p>The center of the end point of the radial gradient in font units represented as a 16.16 fixed-point <code>FT_Vector</code>.</p> r1 <p>The radius of the end circle of the radial gradient in font units represented as a 16.16 fixed-point value.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintsweepgradient","title":"FT_PaintSweepGradient","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintSweepGradient_\n  {\n    FT_ColorLine  colorline;\n\n    FT_Vector  center;\n    FT_Fixed   start_angle;\n    FT_Fixed   end_angle;\n\n  } FT_PaintSweepGradient;\n</code></pre> <p>A structure representing a <code>PaintSweepGradient</code> value of the \u2018COLR\u2019 v1 extensions, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. The glyph layer filled with this paint is drawn filled with a sweep gradient from <code>start_angle</code> to <code>end_angle</code>.</p> fields colorline <p>The <code>FT_ColorLine</code> information for this paint, i.e., the list of color stops along the gradient.</p> center <p>The center of the sweep gradient in font units represented as a vector of 16.16 fixed-point values.</p> start_angle <p>The start angle of the sweep gradient in 16.16 fixed-point format specifying degrees divided by 180.0 (as in the spec). Multiply by 180.0f to receive degrees value. Values are given counter-clockwise, starting from the (positive) y\u00a0axis.</p> end_angle <p>The end angle of the sweep gradient in 16.16 fixed-point format specifying degrees divided by 180.0 (as in the spec). Multiply by 180.0f to receive degrees value. Values are given counter-clockwise, starting from the (positive) y\u00a0axis.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintglyph","title":"FT_PaintGlyph","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintGlyph_\n  {\n    FT_OpaquePaint  paint;\n    FT_UInt         glyphID;\n\n  } FT_PaintGlyph;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 <code>PaintGlyph</code> paint table.</p> fields paint <p>An opaque paint object pointing to a <code>Paint</code> table that serves as the fill for the glyph ID.</p> glyphID <p>The glyph ID from the \u2018glyf\u2019 table, which serves as the contour information that is filled with paint.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintcolrglyph","title":"FT_PaintColrGlyph","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintColrGlyph_\n  {\n    FT_UInt  glyphID;\n\n  } FT_PaintColrGlyph;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 <code>PaintColorGlyph</code> paint table.</p> fields glyphID <p>The glyph ID from the <code>BaseGlyphV1List</code> table that is drawn for this paint.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_painttransform","title":"FT_PaintTransform","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintTransform_\n  {\n    FT_OpaquePaint  paint;\n    FT_Affine23     affine;\n\n  } FT_PaintTransform;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 <code>PaintTransform</code> paint table.</p> fields paint <p>An opaque paint that is subject to being transformed.</p> affine <p>A 2x3 transformation matrix in <code>FT_Affine23</code> format containing 16.16 fixed-point values.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_painttranslate","title":"FT_PaintTranslate","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintTranslate_\n  {\n    FT_OpaquePaint  paint;\n\n    FT_Fixed  dx;\n    FT_Fixed  dy;\n\n  } FT_PaintTranslate;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 <code>PaintTranslate</code> paint table. Used for translating downstream paints by a given x and y\u00a0delta.</p> fields paint <p>An <code>FT_OpaquePaint</code> object referencing the paint that is to be rotated.</p> dx <p>Translation in x\u00a0direction in font units represented as a 16.16 fixed-point value.</p> dy <p>Translation in y\u00a0direction in font units represented as a 16.16 fixed-point value.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintscale","title":"FT_PaintScale","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintScale_\n  {\n    FT_OpaquePaint  paint;\n\n    FT_Fixed  scale_x;\n    FT_Fixed  scale_y;\n\n    FT_Fixed  center_x;\n    FT_Fixed  center_y;\n\n  } FT_PaintScale;\n</code></pre> <p>A structure representing all of the \u2018COLR\u2019 v1 \u2018PaintScale*\u2019 paint tables. Used for scaling downstream paints by a given x and y\u00a0scale, with a given center. This structure is used for all \u2018PaintScale*\u2019 types that are part of specification; fields of this structure are filled accordingly. If there is a center, the center values are set, otherwise they are set to the zero coordinate. If the source font file has \u2018PaintScaleUniform*\u2019 set, the scale values are set accordingly to the same value.</p> fields paint <p>An <code>FT_OpaquePaint</code> object referencing the paint that is to be scaled.</p> scale_x <p>Scale factor in x\u00a0direction represented as a 16.16 fixed-point value.</p> scale_y <p>Scale factor in y\u00a0direction represented as a 16.16 fixed-point value.</p> center_x <p>x\u00a0coordinate of center point to scale from represented as a 16.16 fixed-point value.</p> center_y <p>y\u00a0coordinate of center point to scale from represented as a 16.16 fixed-point value.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintrotate","title":"FT_PaintRotate","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintRotate_\n  {\n    FT_OpaquePaint  paint;\n\n    FT_Fixed  angle;\n\n    FT_Fixed  center_x;\n    FT_Fixed  center_y;\n\n  } FT_PaintRotate;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 <code>PaintRotate</code> paint table. Used for rotating downstream paints with a given center and angle.</p> fields paint <p>An <code>FT_OpaquePaint</code> object referencing the paint that is to be rotated.</p> angle <p>The rotation angle that is to be applied in degrees divided by 180.0 (as in the spec) represented as a 16.16 fixed-point value. Multiply by 180.0f to receive degrees value.</p> center_x <p>The x\u00a0coordinate of the pivot point of the rotation in font units represented as a 16.16 fixed-point value.</p> center_y <p>The y\u00a0coordinate of the pivot point of the rotation in font units represented as a 16.16 fixed-point value.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintskew","title":"FT_PaintSkew","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintSkew_\n  {\n    FT_OpaquePaint  paint;\n\n    FT_Fixed  x_skew_angle;\n    FT_Fixed  y_skew_angle;\n\n    FT_Fixed  center_x;\n    FT_Fixed  center_y;\n\n  } FT_PaintSkew;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 <code>PaintSkew</code> paint table. Used for skewing or shearing downstream paints by a given center and angle.</p> fields paint <p>An <code>FT_OpaquePaint</code> object referencing the paint that is to be skewed.</p> x_skew_angle <p>The skewing angle in x\u00a0direction in degrees divided by 180.0 (as in the spec) represented as a 16.16 fixed-point value. Multiply by 180.0f to receive degrees.</p> y_skew_angle <p>The skewing angle in y\u00a0direction in degrees divided by 180.0 (as in the spec) represented as a 16.16 fixed-point value. Multiply by 180.0f to receive degrees.</p> center_x <p>The x\u00a0coordinate of the pivot point of the skew in font units represented as a 16.16 fixed-point value.</p> center_y <p>The y\u00a0coordinate of the pivot point of the skew in font units represented as a 16.16 fixed-point value.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_paintcomposite","title":"FT_PaintComposite","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_PaintComposite_\n  {\n    FT_OpaquePaint     source_paint;\n    FT_Composite_Mode  composite_mode;\n    FT_OpaquePaint     backdrop_paint;\n\n  } FT_PaintComposite;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 <code>PaintComposite</code> paint table. Used for compositing two paints in a \u2018COLR\u2019 v1 directed acyclic graph.</p> fields source_paint <p>An <code>FT_OpaquePaint</code> object referencing the source that is to be composited.</p> composite_mode <p>An <code>FT_Composite_Mode</code> enum value determining the composition operation.</p> backdrop_paint <p>An <code>FT_OpaquePaint</code> object referencing the backdrop paint that <code>source_paint</code> is composited onto.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_colr_paint","title":"FT_COLR_Paint","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_COLR_Paint_\n  {\n    FT_PaintFormat format;\n\n    union\n    {\n      FT_PaintColrLayers      colr_layers;\n      FT_PaintGlyph           glyph;\n      FT_PaintSolid           solid;\n      FT_PaintLinearGradient  linear_gradient;\n      FT_PaintRadialGradient  radial_gradient;\n      FT_PaintSweepGradient   sweep_gradient;\n      FT_PaintTransform       transform;\n      FT_PaintTranslate       translate;\n      FT_PaintScale           scale;\n      FT_PaintRotate          rotate;\n      FT_PaintSkew            skew;\n      FT_PaintComposite       composite;\n      FT_PaintColrGlyph       colr_glyph;\n\n    } u;\n\n  } FT_COLR_Paint;\n</code></pre> <p>A union object representing format and details of a paint table of a \u2018COLR\u2019 v1 font, see \u2018https://github.com/googlefonts/colr-gradients-spec\u2019. Use <code>FT_Get_Paint</code> to retrieve a <code>FT_COLR_Paint</code> for an <code>FT_OpaquePaint</code> object.</p> fields format <p>The gradient format for this Paint structure.</p> u <p>Union of all paint table types:</p> <ul> <li><code>FT_PaintColrLayers</code> * <code>FT_PaintGlyph</code> * <code>FT_PaintSolid</code> * <code>FT_PaintLinearGradient</code> * <code>FT_PaintRadialGradient</code> * <code>FT_PaintSweepGradient</code> * <code>FT_PaintTransform</code> * <code>FT_PaintTranslate</code> * <code>FT_PaintRotate</code> * <code>FT_PaintSkew</code> * <code>FT_PaintComposite</code> * <code>FT_PaintColrGlyph</code></li> </ul> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_color_root_transform","title":"FT_Color_Root_Transform","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef enum  FT_Color_Root_Transform_\n  {\n    FT_COLOR_INCLUDE_ROOT_TRANSFORM,\n    FT_COLOR_NO_ROOT_TRANSFORM,\n\n    FT_COLOR_ROOT_TRANSFORM_MAX\n\n  } FT_Color_Root_Transform;\n</code></pre> <p>An enumeration to specify whether <code>FT_Get_Color_Glyph_Paint</code> is to return a root transform to configure the client's graphics context matrix.</p> values FT_COLOR_INCLUDE_ROOT_TRANSFORM <p>Do include the root transform as the initial <code>FT_COLR_Paint</code> object.</p> FT_COLOR_NO_ROOT_TRANSFORM <p>Do not output an initial root transform.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_clipbox","title":"FT_ClipBox","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  typedef struct  FT_ClipBox_\n  {\n    FT_Vector  bottom_left;\n    FT_Vector  top_left;\n    FT_Vector  top_right;\n    FT_Vector  bottom_right;\n\n  } FT_ClipBox;\n</code></pre> <p>A structure representing a \u2018COLR\u2019 v1 \u2018ClipBox\u2019 table. \u2018COLR\u2019 v1 glyphs may optionally define a clip box for aiding allocation or defining a maximum drawable region. Use <code>FT_Get_Color_Glyph_ClipBox</code> to retrieve it.</p> fields bottom_left <p>The bottom left corner of the clip box as an <code>FT_Vector</code> with fixed-point coordinates in 26.6 format.</p> top_left <p>The top left corner of the clip box as an <code>FT_Vector</code> with fixed-point coordinates in 26.6 format.</p> top_right <p>The top right corner of the clip box as an <code>FT_Vector</code> with fixed-point coordinates in 26.6 format.</p> bottom_right <p>The bottom right corner of the clip box as an <code>FT_Vector</code> with fixed-point coordinates in 26.6 format.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_get_color_glyph_paint","title":"FT_Get_Color_Glyph_Paint","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Get_Color_Glyph_Paint( FT_Face                  face,\n                            FT_UInt                  base_glyph,\n                            FT_Color_Root_Transform  root_transform,\n                            FT_OpaquePaint*          paint );\n</code></pre> <p>This is the starting point and interface to color gradient information in a \u2018COLR\u2019 v1 table in OpenType fonts to recursively retrieve the paint tables for the directed acyclic graph of a colored glyph, given a glyph ID.</p> <p>https://github.com/googlefonts/colr-gradients-spec</p> <p>In a \u2018COLR\u2019 v1 font, each color glyph defines a directed acyclic graph of nested paint tables, such as <code>PaintGlyph</code>, <code>PaintSolid</code>, <code>PaintLinearGradient</code>, <code>PaintRadialGradient</code>, and so on. Using this function and specifying a glyph ID, one retrieves the root paint table for this glyph ID.</p> <p>This function allows control whether an initial root transform is returned to configure scaling, transform, and translation correctly on the client's graphics context. The initial root transform is computed and returned according to the values configured for <code>FT_Size</code> and <code>FT_Set_Transform</code> on the <code>FT_Face</code> object, see below for details of the <code>root_transform</code> parameter. This has implications for a client \u2018COLR\u2019 v1 implementation: When this function returns an initially computed root transform, at the time of executing the <code>FT_PaintGlyph</code> operation, the contours should be retrieved using <code>FT_Load_Glyph</code> at unscaled, untransformed size. This is because the root transform applied to the graphics context will take care of correct scaling.</p> <p>Alternatively, to allow hinting of contours, at the time of executing <code>FT_Load_Glyph</code>, the current graphics context transformation matrix can be decomposed into a scaling matrix and a remainder, and <code>FT_Load_Glyph</code> can be used to retrieve the contours at scaled size. Care must then be taken to blit or clip to the graphics context with taking this remainder transformation into account.</p> input face <p>A handle to the parent face object.</p> base_glyph <p>The glyph index for which to retrieve the root paint table.</p> root_transform <p>Specifies whether an initially computed root is returned by the <code>FT_PaintTransform</code> operation to account for the activated size (see <code>FT_Activate_Size</code>) and the configured transform and translate (see <code>FT_Set_Transform</code>).</p> <p>This root transform is returned before nodes of the glyph graph of the font are returned. Subsequent <code>FT_COLR_Paint</code> structures contain unscaled and untransformed values. The inserted root transform enables the client application to apply an initial transform to its graphics context. When executing subsequent FT_COLR_Paint operations, values from <code>FT_COLR_Paint</code> operations will ultimately be correctly scaled because of the root transform applied to the graphics context. Use <code>FT_COLOR_INCLUDE_ROOT_TRANSFORM</code> to include the root transform, use <code>FT_COLOR_NO_ROOT_TRANSFORM</code> to not include it. The latter may be useful when traversing the \u2018COLR\u2019 v1 glyph graph and reaching a <code>FT_PaintColrGlyph</code>. When recursing into <code>FT_PaintColrGlyph</code> and painting that inline, no additional root transform is needed as it has already been applied to the graphics context at the beginning of drawing this glyph.</p> output paint <p>The <code>FT_OpaquePaint</code> object that references the actual paint table.</p> <p>The respective actual <code>FT_COLR_Paint</code> object is retrieved via <code>FT_Get_Paint</code>.</p> return <p>Value\u00a01 if everything is OK. If no color glyph is found, or the root paint could not be retrieved, value\u00a00 gets returned. In case of an error, value\u00a00 is returned also.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_get_color_glyph_clipbox","title":"FT_Get_Color_Glyph_ClipBox","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Get_Color_Glyph_ClipBox( FT_Face      face,\n                              FT_UInt      base_glyph,\n                              FT_ClipBox*  clip_box );\n</code></pre> <p>Search for a \u2018COLR\u2019 v1 clip box for the specified <code>base_glyph</code> and fill the <code>clip_box</code> parameter with the \u2018COLR\u2019 v1 \u2018ClipBox\u2019 information if one is found.</p> input face <p>A handle to the parent face object.</p> base_glyph <p>The glyph index for which to retrieve the clip box.</p> output clip_box <p>The clip box for the requested <code>base_glyph</code> if one is found. The clip box is computed taking scale and transformations configured on the <code>FT_Face</code> into account. <code>FT_ClipBox</code> contains <code>FT_Vector</code> values in 26.6 format.</p> return <p>Value\u00a01 if a clip box is found. If no clip box is found or an error occured, value\u00a00 is returned.</p> note <p>To retrieve the clip box in font units, reset scale to units-per-em and remove transforms configured using <code>FT_Set_Transform</code>.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_get_paint_layers","title":"FT_Get_Paint_Layers","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Get_Paint_Layers( FT_Face            face,\n                       FT_LayerIterator*  iterator,\n                       FT_OpaquePaint*    paint );\n</code></pre> <p>Access the layers of a <code>PaintColrLayers</code> table.</p> <p>If the root paint of a color glyph, or a nested paint of a \u2018COLR\u2019 glyph is a <code>PaintColrLayers</code> table, this function retrieves the layers of the <code>PaintColrLayers</code> table.</p> <p>The <code>FT_PaintColrLayers</code> object contains an <code>FT_LayerIterator</code>, which is used here to iterate over the layers. Each layer is returned as an <code>FT_OpaquePaint</code> object, which then can be used with <code>FT_Get_Paint</code> to retrieve the actual paint object.</p> input face <p>A handle to the parent face object.</p> inout iterator <p>The <code>FT_LayerIterator</code> from an <code>FT_PaintColrLayers</code> object, for which the layers are to be retrieved. The internal state of the iterator is incremented after one call to this function for retrieving one layer.</p> output paint <p>The <code>FT_OpaquePaint</code> object that references the actual paint table. The respective actual <code>FT_COLR_Paint</code> object is retrieved via <code>FT_Get_Paint</code>.</p> return <p>Value\u00a01 if everything is OK. Value\u00a00 gets returned when the paint object can not be retrieved or any other error occurs.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_get_colorline_stops","title":"FT_Get_Colorline_Stops","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Get_Colorline_Stops( FT_Face                face,\n                          FT_ColorStop*          color_stop,\n                          FT_ColorStopIterator*  iterator );\n</code></pre> <p>This is an interface to color gradient information in a \u2018COLR\u2019 v1 table in OpenType fonts to iteratively retrieve the gradient and solid fill information for colored glyph layers for a specified glyph ID.</p> <p>https://github.com/googlefonts/colr-gradients-spec</p> input face <p>A handle to the parent face object.</p> inout iterator <p>The retrieved <code>FT_ColorStopIterator</code>, configured on an <code>FT_ColorLine</code>, which in turn got retrieved via paint information in <code>FT_PaintLinearGradient</code> or <code>FT_PaintRadialGradient</code>.</p> output color_stop <p>Color index and alpha value for the retrieved color stop.</p> return <p>Value\u00a01 if everything is OK. If there are no more color stops, value\u00a00 gets returned. In case of an error, value\u00a00 is returned also.</p> since <p>2.13</p>"},{"location":"ft2-layer_management.html#ft_get_paint","title":"FT_Get_Paint","text":"<p>Defined in FT_COLOR_H (freetype/ftcolor.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Get_Paint( FT_Face         face,\n                FT_OpaquePaint  opaque_paint,\n                FT_COLR_Paint*  paint );\n</code></pre> <p>Access the details of a paint using an <code>FT_OpaquePaint</code> opaque paint object, which internally stores the offset to the respective <code>Paint</code> object in the \u2018COLR\u2019 table.</p> input face <p>A handle to the parent face object.</p> opaque_paint <p>The opaque paint object for which the underlying <code>FT_COLR_Paint</code> data is to be retrieved.</p> output paint <p>The specific <code>FT_COLR_Paint</code> object containing information coming from one of the font's <code>Paint*</code> tables.</p> return <p>Value\u00a01 if everything is OK. Value\u00a00 if no details can be found for this paint or any other error occured.</p> since <p>2.13</p>"},{"location":"ft2-lcd_rendering.html","title":"Subpixel Rendering","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb Subpixel Rendering</p>"},{"location":"ft2-lcd_rendering.html#subpixel-rendering","title":"Subpixel Rendering","text":""},{"location":"ft2-lcd_rendering.html#synopsis","title":"Synopsis","text":"<p>FreeType provides two alternative subpixel rendering technologies. Should you define <code>FT_CONFIG_OPTION_SUBPIXEL_RENDERING</code> in your <code>ftoption.h</code> file, this enables ClearType-style rendering. Otherwise, Harmony LCD rendering is enabled. These technologies are controlled differently and API described below, although always available, performs its function when appropriate method is enabled and does nothing otherwise.</p> <p>ClearType-style LCD rendering exploits the color-striped structure of LCD pixels, increasing the available resolution in the direction of the stripe (usually horizontal RGB) by a factor of\u00a03. Using the subpixel coverages unfiltered can create severe color fringes especially when rendering thin features. Indeed, to produce black-on-white text, the nearby color subpixels must be dimmed evenly. Therefore, an equalizing 5-tap FIR filter should be applied to subpixel coverages regardless of pixel boundaries and should have these properties:</p> <ol> <li> <p>It should be symmetrical, like {\u00a0a, b, c, b, a\u00a0}, to avoid any shifts in appearance.</p> </li> <li> <p>It should be color-balanced, meaning a\u00a0+ b\u00a0=\u00a0c, to reduce color fringes by distributing the computed coverage for one subpixel to all subpixels equally.</p> </li> <li> <p>It should be normalized, meaning 2a\u00a0+ 2b\u00a0+ c\u00a0=\u00a01.0 to maintain overall brightness.</p> </li> </ol> <p>Boxy 3-tap filter {0, \u2153, \u2153, \u2153, 0} is sharper but is less forgiving of non-ideal gamma curves of a screen (and viewing angles), beveled filters are fuzzier but more tolerant.</p> <p>Use the <code>FT_Library_SetLcdFilter</code> or <code>FT_Library_SetLcdFilterWeights</code> API to specify a low-pass filter, which is then applied to subpixel-rendered bitmaps generated through <code>FT_Render_Glyph</code>.</p> <p>Harmony LCD rendering is suitable to panels with any regular subpixel structure, not just monitors with 3 color striped subpixels, as long as the color subpixels have fixed positions relative to the pixel center. In this case, each color channel can be rendered separately after shifting the outline opposite to the subpixel shift so that the coverage maps are aligned. This method is immune to color fringes because the shifts do not change integral coverage.</p> <p>The subpixel geometry must be specified by xy-coordinates for each subpixel. By convention they may come in the RGB order: {{-\u2153, 0}, {0, 0}, {\u2153, 0}} for standard RGB striped panel or {{-\u2159, \u00bc}, {-\u2159, -\u00bc}, {\u2153, 0}} for a certain PenTile panel.</p> <p>Use the <code>FT_Library_SetLcdGeometry</code> API to specify subpixel positions. If one follows the RGB order convention, the same order applies to the resulting <code>FT_PIXEL_MODE_LCD</code> and <code>FT_PIXEL_MODE_LCD_V</code> bitmaps. Note, however, that the coordinate frame for the latter must be rotated clockwise. Harmony with default LCD geometry is equivalent to ClearType with light filter.</p> <p>As a result of ClearType filtering or Harmony shifts, the resulting dimensions of LCD bitmaps can be slightly wider or taller than the dimensions the original outline with regard to the pixel grid. For example, for <code>FT_RENDER_MODE_LCD</code>, the filter adds 2\u00a0subpixels to the left, and 2\u00a0subpixels to the right. The bitmap offset values are adjusted accordingly, so clients shouldn't need to modify their layout and glyph positioning code when enabling the filter.</p> <p>The ClearType and Harmony rendering is applicable to glyph bitmaps rendered through <code>FT_Render_Glyph</code>, <code>FT_Load_Glyph</code>, <code>FT_Load_Char</code>, and <code>FT_Glyph_To_Bitmap</code>, when <code>FT_RENDER_MODE_LCD</code> or <code>FT_RENDER_MODE_LCD_V</code> is specified. This API does not control <code>FT_Outline_Render</code> and <code>FT_Outline_Get_Bitmap</code>.</p> <p>The described algorithms can completely remove color artefacts when combined with gamma-corrected alpha blending in linear space. Each of the 3\u00a0alpha values (subpixels) must by independently used to blend one color channel. That is, red alpha blends the red channel of the text color with the red channel of the background pixel.</p>"},{"location":"ft2-lcd_rendering.html#ft_lcdfilter","title":"FT_LcdFilter","text":"<p>Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).</p> <pre><code>  typedef enum  FT_LcdFilter_\n  {\n    FT_LCD_FILTER_NONE    = 0,\n    FT_LCD_FILTER_DEFAULT = 1,\n    FT_LCD_FILTER_LIGHT   = 2,\n    FT_LCD_FILTER_LEGACY1 = 3,\n    FT_LCD_FILTER_LEGACY  = 16,\n\n    FT_LCD_FILTER_MAX   /* do not remove */\n\n  } FT_LcdFilter;\n</code></pre> <p>A list of values to identify various types of LCD filters.</p> values FT_LCD_FILTER_NONE <p>Do not perform filtering. When used with subpixel rendering, this results in sometimes severe color fringes.</p> FT_LCD_FILTER_DEFAULT <p>This is a beveled, normalized, and color-balanced five-tap filter with weights of [0x08 0x4D 0x56 0x4D 0x08] in 1/256 units.</p> FT_LCD_FILTER_LIGHT <p>this is a boxy, normalized, and color-balanced three-tap filter with weights of [0x00 0x55 0x56 0x55 0x00] in 1/256 units.</p> FT_LCD_FILTER_LEGACY FT_LCD_FILTER_LEGACY1 <p>This filter corresponds to the original libXft color filter. It provides high contrast output but can exhibit really bad color fringes if glyphs are not extremely well hinted to the pixel grid. This filter is only provided for comparison purposes, and might be disabled or stay unsupported in the future. The second value is provided for compatibility with FontConfig, which historically used different enumeration, sometimes incorrectly forwarded to FreeType.</p> since <p>2.3.0 (<code>FT_LCD_FILTER_LEGACY1</code> since 2.6.2)</p>"},{"location":"ft2-lcd_rendering.html#ft_library_setlcdfilter","title":"FT_Library_SetLcdFilter","text":"<p>Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Library_SetLcdFilter( FT_Library    library,\n                           FT_LcdFilter  filter );\n</code></pre> <p>This function is used to change filter applied to LCD decimated bitmaps, like the ones used when calling <code>FT_Render_Glyph</code> with <code>FT_RENDER_MODE_LCD</code> or <code>FT_RENDER_MODE_LCD_V</code>.</p> input library <p>A handle to the target library instance.</p> filter <p>The filter type.</p> <p>You can use <code>FT_LCD_FILTER_NONE</code> here to disable this feature, or <code>FT_LCD_FILTER_DEFAULT</code> to use a default filter that should work well on most LCD screens.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Since 2.10.3 the LCD filtering is enabled with <code>FT_LCD_FILTER_DEFAULT</code>. It is no longer necessary to call this function explicitly except to choose a different filter or disable filtering altogether with <code>FT_LCD_FILTER_NONE</code>.</p> <p>This function does nothing but returns <code>FT_Err_Unimplemented_Feature</code> if the configuration macro <code>FT_CONFIG_OPTION_SUBPIXEL_RENDERING</code> is not defined in your build of the library.</p> since <p>2.3.0</p>"},{"location":"ft2-lcd_rendering.html#ft_library_setlcdfilterweights","title":"FT_Library_SetLcdFilterWeights","text":"<p>Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Library_SetLcdFilterWeights( FT_Library      library,\n                                  unsigned char  *weights );\n</code></pre> <p>This function can be used to enable LCD filter with custom weights, instead of using presets in <code>FT_Library_SetLcdFilter</code>.</p> input library <p>A handle to the target library instance.</p> weights <p>A pointer to an array; the function copies the first five bytes and uses them to specify the filter weights in 1/256 units.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function does nothing but returns <code>FT_Err_Unimplemented_Feature</code> if the configuration macro <code>FT_CONFIG_OPTION_SUBPIXEL_RENDERING</code> is not defined in your build of the library.</p> <p>LCD filter weights can also be set per face using <code>FT_Face_Properties</code> with <code>FT_PARAM_TAG_LCD_FILTER_WEIGHTS</code>.</p> since <p>2.4.0</p>"},{"location":"ft2-lcd_rendering.html#ft_lcdfivetapfilter","title":"FT_LcdFiveTapFilter","text":"<p>Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).</p> <pre><code>#define FT_LCD_FILTER_FIVE_TAPS  5\n\n  typedef FT_Byte  FT_LcdFiveTapFilter[FT_LCD_FILTER_FIVE_TAPS];\n</code></pre> <p>A typedef for passing the five LCD filter weights to <code>FT_Face_Properties</code> within an <code>FT_Parameter</code> structure.</p> since <p>2.8</p>"},{"location":"ft2-lcd_rendering.html#ft_library_setlcdgeometry","title":"FT_Library_SetLcdGeometry","text":"<p>Defined in FT_LCD_FILTER_H (freetype/ftlcdfil.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Library_SetLcdGeometry( FT_Library  library,\n                             FT_Vector   sub[3] );\n</code></pre> <p>This function can be used to modify default positions of color subpixels, which controls Harmony LCD rendering.</p> input library <p>A handle to the target library instance.</p> sub <p>A pointer to an array of 3 vectors in 26.6 fractional pixel format; the function modifies the default values, see the note below.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Subpixel geometry examples:</p> <ul> <li> <p>{{-21, 0}, {0, 0}, {21, 0}} is the default, corresponding to 3 color stripes shifted by a third of a pixel. This could be an RGB panel.</p> </li> <li> <p>{{21, 0}, {0, 0}, {-21, 0}} looks the same as the default but can specify a BGR panel instead, while keeping the bitmap in the same RGB888 format.</p> </li> <li> <p>{{0, 21}, {0, 0}, {0, -21}} is the vertical RGB, but the bitmap stays RGB888 as a result.</p> </li> <li> <p>{{-11, 16}, {-11, -16}, {22, 0}} is a certain PenTile arrangement.</p> </li> </ul> <p>This function does nothing and returns <code>FT_Err_Unimplemented_Feature</code> in the context of ClearType-style subpixel rendering when <code>FT_CONFIG_OPTION_SUBPIXEL_RENDERING</code> is defined in your build of the library.</p> since <p>2.10.0</p>"},{"location":"ft2-library_setup.html","title":"Library Setup","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Library Setup</p>"},{"location":"ft2-library_setup.html#library-setup","title":"Library Setup","text":""},{"location":"ft2-library_setup.html#synopsis","title":"Synopsis","text":"<p>Functions to start and end the usage of the FreeType library.</p> <p>Note that <code>FT_Library_Version</code> and <code>FREETYPE_XXX</code> are of limited use because even a new release of FreeType with only documentation changes increases the version number.</p>"},{"location":"ft2-library_setup.html#ft_library","title":"FT_Library","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_LibraryRec_  *FT_Library;\n</code></pre> <p>A handle to a FreeType library instance. Each \u2018library\u2019 is completely independent from the others; it is the \u2018root\u2019 of a set of objects like fonts, faces, sizes, etc.</p> <p>It also embeds a memory manager (see <code>FT_Memory</code>), as well as a scan-line converter object (see <code>FT_Raster</code>).</p> <p>[Since 2.5.6] In multi-threaded applications it is easiest to use one <code>FT_Library</code> object per thread. In case this is too cumbersome, a single <code>FT_Library</code> object across threads is possible also, as long as a mutex lock is used around <code>FT_New_Face</code> and <code>FT_Done_Face</code>.</p> note <p>Library objects are normally created by <code>FT_Init_FreeType</code>, and destroyed with <code>FT_Done_FreeType</code>. If you need reference-counting (cf. <code>FT_Reference_Library</code>), use <code>FT_New_Library</code> and <code>FT_Done_Library</code>.</p>"},{"location":"ft2-library_setup.html#ft_init_freetype","title":"FT_Init_FreeType","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Init_FreeType( FT_Library  *alibrary );\n</code></pre> <p>Initialize a new FreeType library object. The set of modules that are registered by this function is determined at build time.</p> output alibrary <p>A handle to a new library object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>In case you want to provide your own memory allocating routines, use <code>FT_New_Library</code> instead, followed by a call to <code>FT_Add_Default_Modules</code> (or a series of calls to <code>FT_Add_Module</code>) and <code>FT_Set_Default_Properties</code>.</p> <p>See the documentation of <code>FT_Library</code> and <code>FT_Face</code> for multi-threading issues.</p> <p>If you need reference-counting (cf. <code>FT_Reference_Library</code>), use <code>FT_New_Library</code> and <code>FT_Done_Library</code>.</p> <p>If compilation option <code>FT_CONFIG_OPTION_ENVIRONMENT_PROPERTIES</code> is set, this function reads the <code>FREETYPE_PROPERTIES</code> environment variable to control driver properties. See section \u2018Driver properties\u2019 for more.</p>"},{"location":"ft2-library_setup.html#ft_done_freetype","title":"FT_Done_FreeType","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Done_FreeType( FT_Library  library );\n</code></pre> <p>Destroy a given FreeType library object and all of its children, including resources, drivers, faces, sizes, etc.</p> input library <p>A handle to the target library object.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-library_setup.html#ft_library_version","title":"FT_Library_Version","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Library_Version( FT_Library   library,\n                      FT_Int      *amajor,\n                      FT_Int      *aminor,\n                      FT_Int      *apatch );\n</code></pre> <p>Return the version of the FreeType library being used. This is useful when dynamically linking to the library, since one cannot use the macros <code>FREETYPE_MAJOR</code>, <code>FREETYPE_MINOR</code>, and <code>FREETYPE_PATCH</code>.</p> input library <p>A source library handle.</p> output amajor <p>The major version number.</p> aminor <p>The minor version number.</p> apatch <p>The patch version number.</p> note <p>The reason why this function takes a <code>library</code> argument is because certain programs implement library initialization in a custom way that doesn't use <code>FT_Init_FreeType</code>.</p> <p>In such cases, the library version might not be available before the library object has been created.</p>"},{"location":"ft2-library_setup.html#freetype_xxx","title":"FREETYPE_XXX","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FREETYPE_MAJOR  2\n#define FREETYPE_MINOR  13\n#define FREETYPE_PATCH  3\n</code></pre> <p>These three macros identify the FreeType source code version. Use <code>FT_Library_Version</code> to access them at runtime.</p> values FREETYPE_MAJOR <p>The major version number.</p> FREETYPE_MINOR <p>The minor version number.</p> FREETYPE_PATCH <p>The patch level.</p> note <p>The version number of FreeType if built as a dynamic link library with the \u2018libtool\u2019 package is not controlled by these three macros.</p>"},{"location":"ft2-list_processing.html","title":"List Processing","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb List Processing</p>"},{"location":"ft2-list_processing.html#list-processing","title":"List Processing","text":""},{"location":"ft2-list_processing.html#synopsis","title":"Synopsis","text":"<p>This section contains various definitions related to list processing using doubly-linked nodes.</p>"},{"location":"ft2-list_processing.html#ft_list","title":"FT_List","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct FT_ListRec_*  FT_List;\n</code></pre> <p>A handle to a list record (see <code>FT_ListRec</code>).</p>"},{"location":"ft2-list_processing.html#ft_listnode","title":"FT_ListNode","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct FT_ListNodeRec_*  FT_ListNode;\n</code></pre> <p>Many elements and objects in FreeType are listed through an <code>FT_List</code> record (see <code>FT_ListRec</code>). As its name suggests, an FT_ListNode is a handle to a single list element.</p>"},{"location":"ft2-list_processing.html#ft_listrec","title":"FT_ListRec","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct  FT_ListRec_\n  {\n    FT_ListNode  head;\n    FT_ListNode  tail;\n\n  } FT_ListRec;\n</code></pre> <p>A structure used to hold a simple doubly-linked list. These are used in many parts of FreeType.</p> fields head <p>The head (first element) of doubly-linked list.</p> tail <p>The tail (last element) of doubly-linked list.</p>"},{"location":"ft2-list_processing.html#ft_listnoderec","title":"FT_ListNodeRec","text":"<p>Defined in FT_TYPES_H (freetype/fttypes.h).</p> <pre><code>  typedef struct  FT_ListNodeRec_\n  {\n    FT_ListNode  prev;\n    FT_ListNode  next;\n    void*        data;\n\n  } FT_ListNodeRec;\n</code></pre> <p>A structure used to hold a single list element.</p> fields prev <p>The previous element in the list. <code>NULL</code> if first.</p> next <p>The next element in the list. <code>NULL</code> if last.</p> data <p>A typeless pointer to the listed object.</p>"},{"location":"ft2-list_processing.html#ft_list_add","title":"FT_List_Add","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_List_Add( FT_List      list,\n               FT_ListNode  node );\n</code></pre> <p>Append an element to the end of a list.</p> inout list <p>A pointer to the parent list.</p> node <p>The node to append.</p>"},{"location":"ft2-list_processing.html#ft_list_insert","title":"FT_List_Insert","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_List_Insert( FT_List      list,\n                  FT_ListNode  node );\n</code></pre> <p>Insert an element at the head of a list.</p> inout list <p>A pointer to parent list.</p> node <p>The node to insert.</p>"},{"location":"ft2-list_processing.html#ft_list_find","title":"FT_List_Find","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  FT_EXPORT( FT_ListNode )\n  FT_List_Find( FT_List  list,\n                void*    data );\n</code></pre> <p>Find the list node for a given listed object.</p> input list <p>A pointer to the parent list.</p> data <p>The address of the listed object.</p> return <p>List node. <code>NULL</code> if it wasn't found.</p>"},{"location":"ft2-list_processing.html#ft_list_remove","title":"FT_List_Remove","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_List_Remove( FT_List      list,\n                  FT_ListNode  node );\n</code></pre> <p>Remove a node from a list. This function doesn't check whether the node is in the list!</p> input node <p>The node to remove.</p> inout list <p>A pointer to the parent list.</p>"},{"location":"ft2-list_processing.html#ft_list_up","title":"FT_List_Up","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_List_Up( FT_List      list,\n              FT_ListNode  node );\n</code></pre> <p>Move a node to the head/top of a list. Used to maintain LRU lists.</p> inout list <p>A pointer to the parent list.</p> node <p>The node to move.</p>"},{"location":"ft2-list_processing.html#ft_list_iterate","title":"FT_List_Iterate","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_List_Iterate( FT_List           list,\n                   FT_List_Iterator  iterator,\n                   void*             user );\n</code></pre> <p>Parse a list and calls a given iterator function on each element. Note that parsing is stopped as soon as one of the iterator calls returns a non-zero value.</p> input list <p>A handle to the list.</p> iterator <p>An iterator function, called on each node of the list.</p> user <p>A user-supplied field that is passed as the second argument to the iterator.</p> return <p>The result (a FreeType error code) of the last iterator call.</p>"},{"location":"ft2-list_processing.html#ft_list_iterator","title":"FT_List_Iterator","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  typedef FT_Error\n  (*FT_List_Iterator)( FT_ListNode  node,\n                       void*        user );\n</code></pre> <p>An FT_List iterator function that is called during a list parse by <code>FT_List_Iterate</code>.</p> input node <p>The current iteration list node.</p> user <p>A typeless pointer passed to <code>FT_List_Iterate</code>. Can be used to point to the iteration's state.</p>"},{"location":"ft2-list_processing.html#ft_list_finalize","title":"FT_List_Finalize","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_List_Finalize( FT_List             list,\n                    FT_List_Destructor  destroy,\n                    FT_Memory           memory,\n                    void*               user );\n</code></pre> <p>Destroy all elements in the list as well as the list itself.</p> input list <p>A handle to the list.</p> destroy <p>A list destructor that will be applied to each element of the list. Set this to <code>NULL</code> if not needed.</p> memory <p>The current memory object that handles deallocation.</p> user <p>A user-supplied field that is passed as the last argument to the destructor.</p> note <p>This function expects that all nodes added by <code>FT_List_Add</code> or <code>FT_List_Insert</code> have been dynamically allocated.</p>"},{"location":"ft2-list_processing.html#ft_list_destructor","title":"FT_List_Destructor","text":"<p>Defined in FT_LIST_H (freetype/ftlist.h).</p> <pre><code>  typedef void\n  (*FT_List_Destructor)( FT_Memory  memory,\n                         void*      data,\n                         void*      user );\n</code></pre> <p>An <code>FT_List</code> iterator function that is called during a list finalization by <code>FT_List_Finalize</code> to destroy all elements in a given list.</p> input system <p>The current system object.</p> data <p>The current object to destroy.</p> user <p>A typeless pointer passed to <code>FT_List_Iterate</code>. It can be used to point to the iteration's state.</p>"},{"location":"ft2-lzw.html","title":"LZW Streams","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb LZW Streams</p>"},{"location":"ft2-lzw.html#lzw-streams","title":"LZW Streams","text":""},{"location":"ft2-lzw.html#synopsis","title":"Synopsis","text":"<p>In certain builds of the library, LZW compression recognition is automatically handled when calling <code>FT_New_Face</code> or <code>FT_Open_Face</code>. This means that if no font driver is capable of handling the raw compressed file, the library will try to open a LZW stream from it and re-open the face with it.</p> <p>The stream implementation is very basic and resets the decompression process each time seeking backwards is needed within the stream, which significantly undermines the performance.</p> <p>This section contains the declaration of LZW-specific functions.</p>"},{"location":"ft2-lzw.html#ft_stream_openlzw","title":"FT_Stream_OpenLZW","text":"<p>Defined in FT_LZW_H (freetype/ftlzw.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Stream_OpenLZW( FT_Stream  stream,\n                     FT_Stream  source );\n</code></pre> <p>Open a new stream to parse LZW-compressed font files. This is mainly used to support the compressed <code>*.pcf.Z</code> fonts that come with XFree86.</p> input stream <p>The target embedding stream.</p> source <p>The source stream.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The source stream must be opened before calling this function.</p> <p>Calling the internal function <code>FT_Stream_Close</code> on the new stream will not call <code>FT_Stream_Close</code> on the source stream. None of the stream objects will be released to the heap.</p> <p>This function may return <code>FT_Err_Unimplemented_Feature</code> if your build of FreeType was not compiled with LZW support.</p>"},{"location":"ft2-mac_specific.html","title":"Mac Specific Interface","text":"<p>FreeType \u00bb Docs \u00bb Extended API \u00bb Mac Specific Interface</p>"},{"location":"ft2-mac_specific.html#mac-specific-interface","title":"Mac Specific Interface","text":""},{"location":"ft2-mac_specific.html#synopsis","title":"Synopsis","text":"<p>The following definitions are only available if FreeType is compiled on a Macintosh.</p>"},{"location":"ft2-mac_specific.html#ft_new_face_from_fond","title":"FT_New_Face_From_FOND","text":"<p>Defined in FT_MAC_H (freetype/ftmac.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Face_From_FOND( FT_Library  library,\n                         Handle      fond,\n                         FT_Long     face_index,\n                         FT_Face    *aface )\n                       FT_DEPRECATED_ATTRIBUTE;\n</code></pre> <p>Create a new face object from a FOND resource.</p> inout library <p>A handle to the library resource.</p> input fond <p>A FOND resource.</p> face_index <p>Only supported for the -1 \u2018sanity check\u2019 special case.</p> output aface <p>A handle to a new face object.</p> return <p>FreeType error code. 0\u00a0means success.</p> example <p>This function can be used to create <code>FT_Face</code> objects from fonts that are installed in the system as follows. <pre><code>  fond  = GetResource( 'FOND', fontName );\n  error = FT_New_Face_From_FOND( library, fond, 0, &amp;face );\n</code></pre></p>"},{"location":"ft2-mac_specific.html#ft_getfile_from_mac_name","title":"FT_GetFile_From_Mac_Name","text":"<p>Defined in FT_MAC_H (freetype/ftmac.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_GetFile_From_Mac_Name( const char*  fontName,\n                            FSSpec*      pathSpec,\n                            FT_Long*     face_index )\n                          FT_DEPRECATED_ATTRIBUTE;\n</code></pre> <p>Return an FSSpec for the disk file containing the named font.</p> input fontName <p>Mac OS name of the font (e.g., Times New Roman Bold).</p> output pathSpec <p>FSSpec to the file. For passing to <code>FT_New_Face_From_FSSpec</code>.</p> face_index <p>Index of the face. For passing to <code>FT_New_Face_From_FSSpec</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-mac_specific.html#ft_getfile_from_mac_ats_name","title":"FT_GetFile_From_Mac_ATS_Name","text":"<p>Defined in FT_MAC_H (freetype/ftmac.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_GetFile_From_Mac_ATS_Name( const char*  fontName,\n                                FSSpec*      pathSpec,\n                                FT_Long*     face_index )\n                              FT_DEPRECATED_ATTRIBUTE;\n</code></pre> <p>Return an FSSpec for the disk file containing the named font.</p> input fontName <p>Mac OS name of the font in ATS framework.</p> output pathSpec <p>FSSpec to the file. For passing to <code>FT_New_Face_From_FSSpec</code>.</p> face_index <p>Index of the face. For passing to <code>FT_New_Face_From_FSSpec</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-mac_specific.html#ft_getfilepath_from_mac_ats_name","title":"FT_GetFilePath_From_Mac_ATS_Name","text":"<p>Defined in FT_MAC_H (freetype/ftmac.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_GetFilePath_From_Mac_ATS_Name( const char*  fontName,\n                                    UInt8*       path,\n                                    UInt32       maxPathSize,\n                                    FT_Long*     face_index )\n                                  FT_DEPRECATED_ATTRIBUTE;\n</code></pre> <p>Return a pathname of the disk file and face index for given font name that is handled by ATS framework.</p> input fontName <p>Mac OS name of the font in ATS framework.</p> output path <p>Buffer to store pathname of the file. For passing to <code>FT_New_Face</code>. The client must allocate this buffer before calling this function.</p> maxPathSize <p>Lengths of the buffer <code>path</code> that client allocated.</p> face_index <p>Index of the face. For passing to <code>FT_New_Face</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-mac_specific.html#ft_new_face_from_fsspec","title":"FT_New_Face_From_FSSpec","text":"<p>Defined in FT_MAC_H (freetype/ftmac.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Face_From_FSSpec( FT_Library     library,\n                           const FSSpec  *spec,\n                           FT_Long        face_index,\n                           FT_Face       *aface )\n                         FT_DEPRECATED_ATTRIBUTE;\n</code></pre> <p>Create a new face object from a given resource and typeface index using an FSSpec to the font file.</p> inout library <p>A handle to the library resource.</p> input spec <p>FSSpec to the font file.</p> face_index <p>The index of the face within the resource. The first face has index\u00a00.</p> output aface <p>A handle to a new face object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p><code>FT_New_Face_From_FSSpec</code> is identical to <code>FT_New_Face</code> except it accepts an FSSpec instead of a path.</p>"},{"location":"ft2-mac_specific.html#ft_new_face_from_fsref","title":"FT_New_Face_From_FSRef","text":"<p>Defined in FT_MAC_H (freetype/ftmac.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Face_From_FSRef( FT_Library    library,\n                          const FSRef  *ref,\n                          FT_Long       face_index,\n                          FT_Face      *aface )\n                        FT_DEPRECATED_ATTRIBUTE;\n</code></pre> <p>Create a new face object from a given resource and typeface index using an FSRef to the font file.</p> inout library <p>A handle to the library resource.</p> input spec <p>FSRef to the font file.</p> face_index <p>The index of the face within the resource. The first face has index\u00a00.</p> output aface <p>A handle to a new face object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p><code>FT_New_Face_From_FSRef</code> is identical to <code>FT_New_Face</code> except it accepts an FSRef instead of a path.</p>"},{"location":"ft2-module_management.html","title":"Module Management","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb Module Management</p>"},{"location":"ft2-module_management.html#module-management","title":"Module Management","text":""},{"location":"ft2-module_management.html#synopsis","title":"Synopsis","text":"<p>The definitions below are used to manage modules within FreeType. Internal and external modules can be added, upgraded, and removed at runtime. For example, an alternative renderer or proprietary font driver can be registered and prioritized. Additionally, some module properties can also be controlled.</p> <p>Here is a list of existing values of the <code>module_name</code> field in the <code>FT_Module_Class</code> structure. <pre><code>  autofitter\n  bdf\n  cff\n  gxvalid\n  otvalid\n  pcf\n  pfr\n  psaux\n  pshinter\n  psnames\n  raster1\n  sfnt\n  smooth\n  truetype\n  type1\n  type42\n  t1cid\n  winfonts\n</code></pre></p> <p>Note that the FreeType Cache sub-system is not a FreeType module.</p>"},{"location":"ft2-module_management.html#ft_module","title":"FT_Module","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_ModuleRec_*  FT_Module;\n</code></pre> <p>A handle to a given FreeType module object. A module can be a font driver, a renderer, or anything else that provides services to the former.</p>"},{"location":"ft2-module_management.html#ft_module_constructor","title":"FT_Module_Constructor","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  typedef FT_Error\n  (*FT_Module_Constructor)( FT_Module  module );\n</code></pre> <p>A function used to initialize (not create) a new module object.</p> input module <p>The module to initialize.</p>"},{"location":"ft2-module_management.html#ft_module_destructor","title":"FT_Module_Destructor","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  typedef void\n  (*FT_Module_Destructor)( FT_Module  module );\n</code></pre> <p>A function used to finalize (not destroy) a given module object.</p> input module <p>The module to finalize.</p>"},{"location":"ft2-module_management.html#ft_module_requester","title":"FT_Module_Requester","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  typedef FT_Module_Interface\n  (*FT_Module_Requester)( FT_Module    module,\n                          const char*  name );\n</code></pre> <p>A function used to query a given module for a specific interface.</p> input module <p>The module to be searched.</p> name <p>The name of the interface in the module.</p>"},{"location":"ft2-module_management.html#ft_module_class","title":"FT_Module_Class","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  typedef struct  FT_Module_Class_\n  {\n    FT_ULong               module_flags;\n    FT_Long                module_size;\n    const FT_String*       module_name;\n    FT_Fixed               module_version;\n    FT_Fixed               module_requires;\n\n    const void*            module_interface;\n\n    FT_Module_Constructor  module_init;\n    FT_Module_Destructor   module_done;\n    FT_Module_Requester    get_interface;\n\n  } FT_Module_Class;\n</code></pre> <p>The module class descriptor. While being a public structure necessary for FreeType's module bookkeeping, most of the fields are essentially internal, not to be used directly by an application.</p> fields module_flags <p>Bit flags describing the module.</p> module_size <p>The size of one module object/instance in bytes.</p> module_name <p>The name of the module.</p> module_version <p>The version, as a 16.16 fixed number (major.minor).</p> module_requires <p>The version of FreeType this module requires, as a 16.16 fixed number (major.minor). Starts at version 2.0, i.e., 0x20000.</p> module_interface <p>A typeless pointer to a structure (which varies between different modules) that holds the module's interface functions. This is essentially what <code>get_interface</code> returns.</p> module_init <p>The initializing function.</p> module_done <p>The finalizing function.</p> get_interface <p>The interface requesting function.</p>"},{"location":"ft2-module_management.html#ft_add_module","title":"FT_Add_Module","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Add_Module( FT_Library              library,\n                 const FT_Module_Class*  clazz );\n</code></pre> <p>Add a new module to a given library instance.</p> inout library <p>A handle to the library object.</p> input clazz <p>A pointer to class descriptor for the module.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>An error will be returned if a module already exists by that name, or if the module requires a version of FreeType that is too great.</p>"},{"location":"ft2-module_management.html#ft_get_module","title":"FT_Get_Module","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Module )\n  FT_Get_Module( FT_Library   library,\n                 const char*  module_name );\n</code></pre> <p>Find a module by its name.</p> input library <p>A handle to the library object.</p> module_name <p>The module's name (as an ASCII string).</p> return <p>A module handle. 0\u00a0if none was found.</p> note <p>FreeType's internal modules aren't documented very well, and you should look up the source code for details.</p>"},{"location":"ft2-module_management.html#ft_remove_module","title":"FT_Remove_Module","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Remove_Module( FT_Library  library,\n                    FT_Module   module );\n</code></pre> <p>Remove a given module from a library instance.</p> inout library <p>A handle to a library object.</p> input module <p>A handle to a module object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The module object is destroyed by the function in case of success.</p>"},{"location":"ft2-module_management.html#ft_add_default_modules","title":"FT_Add_Default_Modules","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Add_Default_Modules( FT_Library  library );\n</code></pre> <p>Add the set of default drivers to a given library object. This is only useful when you create a library object with <code>FT_New_Library</code> (usually to plug a custom memory manager).</p> inout library <p>A handle to a new library object.</p>"},{"location":"ft2-module_management.html#ft_face_driver_name","title":"FT_FACE_DRIVER_NAME","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>#define FT_FACE_DRIVER_NAME( face )                                     \\\n          ( ( *FT_REINTERPRET_CAST( FT_Module_Class**,                  \\\n                                    ( face )-&gt;driver ) )-&gt;module_name )\n</code></pre> <p>A macro that retrieves the name of a font driver from a face object.</p> note <p>The font driver name is a valid <code>module_name</code> for <code>FT_Property_Set</code> and <code>FT_Property_Get</code>. This is not the same as <code>FT_Get_Font_Format</code>.</p> since <p>2.11</p>"},{"location":"ft2-module_management.html#ft_property_set","title":"FT_Property_Set","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Property_Set( FT_Library        library,\n                   const FT_String*  module_name,\n                   const FT_String*  property_name,\n                   const void*       value );\n</code></pre> <p>Set a property for a given module.</p> input library <p>A handle to the library the module is part of.</p> module_name <p>The module name.</p> property_name <p>The property name. Properties are described in section \u2018Driver properties\u2019.</p> <p>Note that only a few modules have properties.</p> value <p>A generic pointer to a variable or structure that gives the new value of the property. The exact definition of <code>value</code> is dependent on the property; see section \u2018Driver properties\u2019.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If <code>module_name</code> isn't a valid module name, or <code>property_name</code> doesn't specify a valid property, or if <code>value</code> doesn't represent a valid value for the given property, an error is returned.</p> <p>The following example sets property \u2018bar\u2019 (a simple integer) in module \u2018foo\u2019 to value\u00a01. <pre><code>  FT_UInt  bar;\n\n\n  bar = 1;\n  FT_Property_Set( library, \"foo\", \"bar\", &amp;bar );\n</code></pre></p> <p>Note that the FreeType Cache sub-system doesn't recognize module property changes. To avoid glyph lookup confusion within the cache you should call <code>FTC_Manager_Reset</code> to completely flush the cache if a module property gets changed after <code>FTC_Manager_New</code> has been called.</p> <p>It is not possible to set properties of the FreeType Cache sub-system itself with FT_Property_Set; use ?FTC_Property_Set? instead.</p> since <p>2.4.11</p>"},{"location":"ft2-module_management.html#ft_property_get","title":"FT_Property_Get","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Property_Get( FT_Library        library,\n                   const FT_String*  module_name,\n                   const FT_String*  property_name,\n                   void*             value );\n</code></pre> <p>Get a module's property value.</p> input library <p>A handle to the library the module is part of.</p> module_name <p>The module name.</p> property_name <p>The property name. Properties are described in section \u2018Driver properties\u2019.</p> inout value <p>A generic pointer to a variable or structure that gives the value of the property. The exact definition of <code>value</code> is dependent on the property; see section \u2018Driver properties\u2019.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If <code>module_name</code> isn't a valid module name, or <code>property_name</code> doesn't specify a valid property, or if <code>value</code> doesn't represent a valid value for the given property, an error is returned.</p> <p>The following example gets property \u2018baz\u2019 (a range) in module \u2018foo\u2019. <pre><code>  typedef  range_\n  {\n    FT_Int32  min;\n    FT_Int32  max;\n\n  } range;\n\n  range  baz;\n\n\n  FT_Property_Get( library, \"foo\", \"baz\", &amp;baz );\n</code></pre></p> <p>It is not possible to retrieve properties of the FreeType Cache sub-system with FT_Property_Get; use ?FTC_Property_Get? instead.</p> since <p>2.4.11</p>"},{"location":"ft2-module_management.html#ft_set_default_properties","title":"FT_Set_Default_Properties","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Set_Default_Properties( FT_Library  library );\n</code></pre> <p>If compilation option <code>FT_CONFIG_OPTION_ENVIRONMENT_PROPERTIES</code> is set, this function reads the <code>FREETYPE_PROPERTIES</code> environment variable to control driver properties. See section \u2018Driver properties\u2019 for more.</p> <p>If the compilation option is not set, this function does nothing.</p> <p><code>FREETYPE_PROPERTIES</code> has the following syntax form (broken here into multiple lines for better readability). <pre><code>  &lt;optional whitespace&gt;\n  &lt;module-name1&gt; ':'\n  &lt;property-name1&gt; '=' &lt;property-value1&gt;\n  &lt;whitespace&gt;\n  &lt;module-name2&gt; ':'\n  &lt;property-name2&gt; '=' &lt;property-value2&gt;\n  ...\n</code></pre></p> <p>Example: <pre><code>  FREETYPE_PROPERTIES=truetype:interpreter-version=35 \\\n                      cff:no-stem-darkening=0\n</code></pre></p> inout library <p>A handle to a new library object.</p> since <p>2.8</p>"},{"location":"ft2-module_management.html#ft_new_library","title":"FT_New_Library","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Library( FT_Memory    memory,\n                  FT_Library  *alibrary );\n</code></pre> <p>This function is used to create a new FreeType library instance from a given memory object. It is thus possible to use libraries with distinct memory allocators within the same program. Note, however, that the used <code>FT_Memory</code> structure is expected to remain valid for the life of the <code>FT_Library</code> object.</p> <p>Normally, you would call this function (followed by a call to <code>FT_Add_Default_Modules</code> or a series of calls to <code>FT_Add_Module</code>, and a call to <code>FT_Set_Default_Properties</code>) instead of <code>FT_Init_FreeType</code> to initialize the FreeType library.</p> <p>Don't use <code>FT_Done_FreeType</code> but <code>FT_Done_Library</code> to destroy a library instance.</p> input memory <p>A handle to the original memory object.</p> output alibrary <p>A pointer to handle of a new library object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>See the discussion of reference counters in the description of <code>FT_Reference_Library</code>.</p>"},{"location":"ft2-module_management.html#ft_done_library","title":"FT_Done_Library","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Done_Library( FT_Library  library );\n</code></pre> <p>Discard a given library object. This closes all drivers and discards all resource objects.</p> input library <p>A handle to the target library.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>See the discussion of reference counters in the description of <code>FT_Reference_Library</code>.</p>"},{"location":"ft2-module_management.html#ft_reference_library","title":"FT_Reference_Library","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Reference_Library( FT_Library  library );\n</code></pre> <p>A counter gets initialized to\u00a01 at the time an <code>FT_Library</code> structure is created. This function increments the counter. <code>FT_Done_Library</code> then only destroys a library if the counter is\u00a01, otherwise it simply decrements the counter.</p> <p>This function helps in managing life-cycles of structures that reference <code>FT_Library</code> objects.</p> input library <p>A handle to a target library object.</p> return <p>FreeType error code. 0\u00a0means success.</p> since <p>2.4.2</p>"},{"location":"ft2-module_management.html#ft_renderer","title":"FT_Renderer","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_RendererRec_*  FT_Renderer;\n</code></pre> <p>A handle to a given FreeType renderer. A renderer is a module in charge of converting a glyph's outline image to a bitmap. It supports a single glyph image format, and one or more target surface depths.</p>"},{"location":"ft2-module_management.html#ft_renderer_class","title":"FT_Renderer_Class","text":"<p>Defined in FT_RENDER_H (freetype/ftrender.h).</p> <pre><code>  typedef struct  FT_Renderer_Class_\n  {\n    FT_Module_Class            root;\n\n    FT_Glyph_Format            glyph_format;\n\n    FT_Renderer_RenderFunc     render_glyph;\n    FT_Renderer_TransformFunc  transform_glyph;\n    FT_Renderer_GetCBoxFunc    get_glyph_cbox;\n    FT_Renderer_SetModeFunc    set_mode;\n\n    const FT_Raster_Funcs*     raster_class;\n\n  } FT_Renderer_Class;\n</code></pre> <p>The renderer module class descriptor.</p> fields root <p>The root <code>FT_Module_Class</code> fields.</p> glyph_format <p>The glyph image format this renderer handles.</p> render_glyph <p>A method used to render the image that is in a given glyph slot into a bitmap.</p> transform_glyph <p>A method used to transform the image that is in a given glyph slot.</p> get_glyph_cbox <p>A method used to access the glyph's cbox.</p> set_mode <p>A method used to pass additional parameters.</p> raster_class <p>For <code>FT_GLYPH_FORMAT_OUTLINE</code> renderers only. This is a pointer to its raster's class.</p>"},{"location":"ft2-module_management.html#ft_get_renderer","title":"FT_Get_Renderer","text":"<p>Defined in FT_RENDER_H (freetype/ftrender.h).</p> <pre><code>  FT_EXPORT( FT_Renderer )\n  FT_Get_Renderer( FT_Library       library,\n                   FT_Glyph_Format  format );\n</code></pre> <p>Retrieve the current renderer for a given glyph format.</p> input library <p>A handle to the library object.</p> format <p>The glyph format.</p> return <p>A renderer handle. 0\u00a0if none found.</p> note <p>An error will be returned if a module already exists by that name, or if the module requires a version of FreeType that is too great.</p> <p>To add a new renderer, simply use <code>FT_Add_Module</code>. To retrieve a renderer by its name, use <code>FT_Get_Module</code>.</p>"},{"location":"ft2-module_management.html#ft_set_renderer","title":"FT_Set_Renderer","text":"<p>Defined in FT_RENDER_H (freetype/ftrender.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_Renderer( FT_Library     library,\n                   FT_Renderer    renderer,\n                   FT_UInt        num_params,\n                   FT_Parameter*  parameters );\n</code></pre> <p>Set the current renderer to use, and set additional mode.</p> inout library <p>A handle to the library object.</p> input renderer <p>A handle to the renderer object.</p> num_params <p>The number of additional parameters.</p> parameters <p>Additional parameters.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>In case of success, the renderer will be used to convert glyph images in the renderer's known format into bitmaps.</p> <p>This doesn't change the current renderer for other formats.</p> <p>Currently, no FreeType renderer module uses <code>parameters</code>; you should thus always pass <code>NULL</code> as the value.</p>"},{"location":"ft2-module_management.html#ft_set_debug_hook","title":"FT_Set_Debug_Hook","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Set_Debug_Hook( FT_Library         library,\n                     FT_UInt            hook_index,\n                     FT_DebugHook_Func  debug_hook );\n</code></pre> <p>Set a debug hook function for debugging the interpreter of a font format.</p> <p>While this is a public API function, an application needs access to FreeType's internal header files to do something useful.</p> <p>Have a look at the source code of the <code>ttdebug</code> FreeType demo program for an example of its usage.</p> inout library <p>A handle to the library object.</p> input hook_index <p>The index of the debug hook. You should use defined enumeration macros like <code>FT_DEBUG_HOOK_TRUETYPE</code>.</p> debug_hook <p>The function used to debug the interpreter.</p> note <p>Currently, four debug hook slots are available, but only one (for the TrueType interpreter) is defined.</p>"},{"location":"ft2-module_management.html#ft_driver","title":"FT_Driver","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_DriverRec_*  FT_Driver;\n</code></pre> <p>A handle to a given FreeType font driver object. A font driver is a module capable of creating faces from font files.</p>"},{"location":"ft2-module_management.html#ft_debughook_func","title":"FT_DebugHook_Func","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  typedef FT_Error\n  (*FT_DebugHook_Func)( void*  arg );\n</code></pre> <p>A drop-in replacement (or rather a wrapper) for the bytecode or charstring interpreter's main loop function.</p> <p>Its job is essentially</p> <ul> <li> <p>to activate debug mode to enforce single-stepping,</p> </li> <li> <p>to call the main loop function to interpret the next opcode, and</p> </li> <li> <p>to show the changed context to the user.</p> </li> </ul> <p>An example for such a main loop function is <code>TT_RunIns</code> (declared in FreeType's internal header file <code>src/truetype/ttinterp.h</code>).</p> <p>Have a look at the source code of the <code>ttdebug</code> FreeType demo program for an example of a drop-in replacement.</p> inout arg <p>A typeless pointer, to be cast to the main loop function's data structure (which depends on the font module). For TrueType fonts it is bytecode interpreter's execution context, <code>TT_ExecContext</code>, which is declared in FreeType's internal header file <code>tttypes.h</code>.</p>"},{"location":"ft2-module_management.html#ft_debug_hook_xxx","title":"FT_DEBUG_HOOK_XXX","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>#define FT_DEBUG_HOOK_TRUETYPE  0\n</code></pre> <p>A list of named debug hook indices.</p> values FT_DEBUG_HOOK_TRUETYPE <p>This hook index identifies the TrueType bytecode debugger.</p>"},{"location":"ft2-multiple_masters.html","title":"Multiple Masters","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb Multiple Masters</p>"},{"location":"ft2-multiple_masters.html#multiple-masters","title":"Multiple Masters","text":""},{"location":"ft2-multiple_masters.html#synopsis","title":"Synopsis","text":"<p>The following types and functions are used to manage Multiple Master fonts, i.e., the selection of specific design instances by setting design axis coordinates.</p> <p>Besides Adobe MM fonts, the interface supports Apple's TrueType GX and OpenType variation fonts. Some of the routines only work with Adobe MM fonts, others will work with all three types. They are similar enough that a consistent interface makes sense.</p> <p>For Adobe MM fonts, macro <code>FT_IS_SFNT</code> returns false. For GX and OpenType variation fonts, it returns true.</p>"},{"location":"ft2-multiple_masters.html#t1_max_mm_xxx","title":"T1_MAX_MM_XXX","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>#define T1_MAX_MM_AXIS         4\n#define T1_MAX_MM_DESIGNS     16\n#define T1_MAX_MM_MAP_POINTS  20\n</code></pre> <p>Multiple Masters limits as defined in their specifications.</p> values T1_MAX_MM_AXIS <p>The maximum number of Multiple Masters axes.</p> T1_MAX_MM_DESIGNS <p>The maximum number of Multiple Masters designs.</p> T1_MAX_MM_MAP_POINTS <p>The maximum number of elements in a design map.</p>"},{"location":"ft2-multiple_masters.html#ft_mm_axis","title":"FT_MM_Axis","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  typedef struct  FT_MM_Axis_\n  {\n    FT_String*  name;\n    FT_Long     minimum;\n    FT_Long     maximum;\n\n  } FT_MM_Axis;\n</code></pre> <p>A structure to model a given axis in design space for Multiple Masters fonts.</p> <p>This structure can't be used for TrueType GX or OpenType variation fonts.</p> fields name <p>The axis's name.</p> minimum <p>The axis's minimum design coordinate.</p> maximum <p>The axis's maximum design coordinate.</p>"},{"location":"ft2-multiple_masters.html#ft_multi_master","title":"FT_Multi_Master","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  typedef struct  FT_Multi_Master_\n  {\n    FT_UInt     num_axis;\n    FT_UInt     num_designs;\n    FT_MM_Axis  axis[T1_MAX_MM_AXIS];\n\n  } FT_Multi_Master;\n</code></pre> <p>A structure to model the axes and space of a Multiple Masters font.</p> <p>This structure can't be used for TrueType GX or OpenType variation fonts.</p> fields num_axis <p>Number of axes. Cannot exceed\u00a04.</p> num_designs <p>Number of designs; should be normally 2^num_axis even though the Type\u00a01 specification strangely allows for intermediate designs to be present. This number cannot exceed\u00a016.</p> axis <p>A table of axis descriptors.</p>"},{"location":"ft2-multiple_masters.html#ft_var_axis","title":"FT_Var_Axis","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  typedef struct  FT_Var_Axis_\n  {\n    FT_String*  name;\n\n    FT_Fixed    minimum;\n    FT_Fixed    def;\n    FT_Fixed    maximum;\n\n    FT_ULong    tag;\n    FT_UInt     strid;\n\n  } FT_Var_Axis;\n</code></pre> <p>A structure to model a given axis in design space for Multiple Masters, TrueType GX, and OpenType variation fonts.</p> fields name <p>The axis's name. Not always meaningful for TrueType GX or OpenType variation fonts.</p> minimum <p>The axis's minimum design coordinate.</p> def <p>The axis's default design coordinate. FreeType computes meaningful default values for Adobe MM fonts.</p> maximum <p>The axis's maximum design coordinate.</p> tag <p>The axis's tag (the equivalent to \u2018name\u2019 for TrueType GX and OpenType variation fonts). FreeType provides default values for Adobe MM fonts if possible.</p> strid <p>The axis name entry in the font's \u2018name\u2019 table. This is another (and often better) version of the \u2018name\u2019 field for TrueType GX or OpenType variation fonts. Not meaningful for Adobe MM fonts.</p> note <p>The fields <code>minimum</code>, <code>def</code>, and <code>maximum</code> are 16.16 fractional values for TrueType GX and OpenType variation fonts. For Adobe MM fonts, the values are whole numbers (i.e., the fractional part is zero).</p>"},{"location":"ft2-multiple_masters.html#ft_var_named_style","title":"FT_Var_Named_Style","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  typedef struct  FT_Var_Named_Style_\n  {\n    FT_Fixed*  coords;\n    FT_UInt    strid;\n    FT_UInt    psid;   /* since 2.7.1 */\n\n  } FT_Var_Named_Style;\n</code></pre> <p>A structure to model a named instance in a TrueType GX or OpenType variation font.</p> <p>This structure can't be used for Adobe MM fonts.</p> fields coords <p>The design coordinates for this instance. This is an array with one entry for each axis.</p> strid <p>The entry in \u2018name\u2019 table identifying this instance.</p> psid <p>The entry in \u2018name\u2019 table identifying a PostScript name for this instance. Value 0xFFFF indicates a missing entry.</p>"},{"location":"ft2-multiple_masters.html#ft_mm_var","title":"FT_MM_Var","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  typedef struct  FT_MM_Var_\n  {\n    FT_UInt              num_axis;\n    FT_UInt              num_designs;\n    FT_UInt              num_namedstyles;\n    FT_Var_Axis*         axis;\n    FT_Var_Named_Style*  namedstyle;\n\n  } FT_MM_Var;\n</code></pre> <p>A structure to model the axes and space of an Adobe MM, TrueType GX, or OpenType variation font.</p> <p>Some fields are specific to one format and not to the others.</p> fields num_axis <p>The number of axes. The maximum value is\u00a04 for Adobe MM fonts; no limit in TrueType GX or OpenType variation fonts.</p> num_designs <p>The number of designs; should be normally 2^num_axis for Adobe MM fonts. Not meaningful for TrueType GX or OpenType variation fonts (where every glyph could have a different number of designs).</p> num_namedstyles <p>The number of named styles; a \u2018named style\u2019 is a tuple of design coordinates that has a string ID (in the \u2018name\u2019 table) associated with it. The font can tell the user that, for example, [Weight=1.5,Width=1.1] is \u2018Bold\u2019. Another name for \u2018named style\u2019 is \u2018named instance\u2019.</p> <p>For Adobe Multiple Masters fonts, this value is always zero because the format does not support named styles.</p> axis <p>An axis descriptor table. TrueType GX and OpenType variation fonts contain slightly more data than Adobe MM fonts. Memory management of this pointer is done internally by FreeType.</p> namedstyle <p>A named style (instance) table. Only meaningful for TrueType GX and OpenType variation fonts. Memory management of this pointer is done internally by FreeType.</p>"},{"location":"ft2-multiple_masters.html#ft_get_multi_master","title":"FT_Get_Multi_Master","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Multi_Master( FT_Face           face,\n                       FT_Multi_Master  *amaster );\n</code></pre> <p>Retrieve a variation descriptor of a given Adobe MM font.</p> <p>This function can't be used with TrueType GX or OpenType variation fonts.</p> input face <p>A handle to the source face.</p> output amaster <p>The Multiple Masters descriptor.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-multiple_masters.html#ft_get_mm_var","title":"FT_Get_MM_Var","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_MM_Var( FT_Face      face,\n                 FT_MM_Var*  *amaster );\n</code></pre> <p>Retrieve a variation descriptor for a given font.</p> <p>This function works with all supported variation formats.</p> input face <p>A handle to the source face.</p> output amaster <p>The variation descriptor. Allocates a data structure, which the user must deallocate with a call to <code>FT_Done_MM_Var</code> after use.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-multiple_masters.html#ft_done_mm_var","title":"FT_Done_MM_Var","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Done_MM_Var( FT_Library   library,\n                  FT_MM_Var   *amaster );\n</code></pre> <p>Free the memory allocated by <code>FT_Get_MM_Var</code>.</p> input library <p>A handle of the face's parent library object that was used in the call to <code>FT_Get_MM_Var</code> to create <code>amaster</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-multiple_masters.html#ft_set_mm_design_coordinates","title":"FT_Set_MM_Design_Coordinates","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_MM_Design_Coordinates( FT_Face   face,\n                                FT_UInt   num_coords,\n                                FT_Long*  coords );\n</code></pre> <p>For Adobe MM fonts, choose an interpolated font design through design coordinates.</p> <p>This function can't be used with TrueType GX or OpenType variation fonts.</p> inout face <p>A handle to the source face.</p> input num_coords <p>The number of available design coordinates. If it is larger than the number of axes, ignore the excess values. If it is smaller than the number of axes, use default values for the remaining axes.</p> coords <p>An array of design coordinates.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>[Since 2.8.1] To reset all axes to the default values, call the function with <code>num_coords</code> set to zero and <code>coords</code> set to <code>NULL</code>.</p> <p>[Since 2.9] If <code>num_coords</code> is larger than zero, this function sets the <code>FT_FACE_FLAG_VARIATION</code> bit in <code>FT_Face</code>'s <code>face_flags</code> field (i.e., <code>FT_IS_VARIATION</code> will return true). If <code>num_coords</code> is zero, this bit flag gets unset.</p>"},{"location":"ft2-multiple_masters.html#ft_set_var_design_coordinates","title":"FT_Set_Var_Design_Coordinates","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_Var_Design_Coordinates( FT_Face    face,\n                                 FT_UInt    num_coords,\n                                 FT_Fixed*  coords );\n</code></pre> <p>Choose an interpolated font design through design coordinates.</p> <p>This function works with all supported variation formats.</p> inout face <p>A handle to the source face.</p> input num_coords <p>The number of available design coordinates. If it is larger than the number of axes, ignore the excess values. If it is smaller than the number of axes, use default values for the remaining axes.</p> coords <p>An array of design coordinates.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The design coordinates are 16.16 fractional values for TrueType GX and OpenType variation fonts. For Adobe MM fonts, the values are supposed to be whole numbers (i.e., the fractional part is zero).</p> <p>[Since 2.8.1] To reset all axes to the default values, call the function with <code>num_coords</code> set to zero and <code>coords</code> set to <code>NULL</code>. [Since 2.9] \u2018Default values\u2019 means the currently selected named instance (or the base font if no named instance is selected).</p> <p>[Since 2.9] If <code>num_coords</code> is larger than zero, this function sets the <code>FT_FACE_FLAG_VARIATION</code> bit in <code>FT_Face</code>'s <code>face_flags</code> field (i.e., <code>FT_IS_VARIATION</code> will return true). If <code>num_coords</code> is zero, this bit flag gets unset.</p>"},{"location":"ft2-multiple_masters.html#ft_get_var_design_coordinates","title":"FT_Get_Var_Design_Coordinates","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Var_Design_Coordinates( FT_Face    face,\n                                 FT_UInt    num_coords,\n                                 FT_Fixed*  coords );\n</code></pre> <p>Get the design coordinates of the currently selected interpolated font.</p> <p>This function works with all supported variation formats.</p> input face <p>A handle to the source face.</p> num_coords <p>The number of design coordinates to retrieve. If it is larger than the number of axes, set the excess values to\u00a00.</p> output coords <p>The design coordinates array.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The design coordinates are 16.16 fractional values for TrueType GX and OpenType variation fonts. For Adobe MM fonts, the values are whole numbers (i.e., the fractional part is zero).</p> since <p>2.7.1</p>"},{"location":"ft2-multiple_masters.html#ft_set_mm_blend_coordinates","title":"FT_Set_MM_Blend_Coordinates","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_MM_Blend_Coordinates( FT_Face    face,\n                               FT_UInt    num_coords,\n                               FT_Fixed*  coords );\n</code></pre> <p>Choose an interpolated font design through normalized blend coordinates.</p> <p>This function works with all supported variation formats.</p> inout face <p>A handle to the source face.</p> input num_coords <p>The number of available design coordinates. If it is larger than the number of axes, ignore the excess values. If it is smaller than the number of axes, use default values for the remaining axes.</p> coords <p>The design coordinates array. Each element is a 16.16 fractional value and must be between 0 and 1.0 for Adobe MM fonts, and between -1.0 and 1.0 for TrueType GX and OpenType variation fonts.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>[Since 2.8.1] To reset all axes to the default values, call the function with <code>num_coords</code> set to zero and <code>coords</code> set to <code>NULL</code>. [Since 2.9] \u2018Default values\u2019 means the currently selected named instance (or the base font if no named instance is selected).</p> <p>[Since 2.9] If <code>num_coords</code> is larger than zero, this function sets the <code>FT_FACE_FLAG_VARIATION</code> bit in <code>FT_Face</code>'s <code>face_flags</code> field (i.e., <code>FT_IS_VARIATION</code> will return true). If <code>num_coords</code> is zero, this bit flag gets unset.</p>"},{"location":"ft2-multiple_masters.html#ft_get_mm_blend_coordinates","title":"FT_Get_MM_Blend_Coordinates","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_MM_Blend_Coordinates( FT_Face    face,\n                               FT_UInt    num_coords,\n                               FT_Fixed*  coords );\n</code></pre> <p>Get the normalized blend coordinates of the currently selected interpolated font.</p> <p>This function works with all supported variation formats.</p> input face <p>A handle to the source face.</p> num_coords <p>The number of normalized blend coordinates to retrieve. If it is larger than the number of axes, set the excess values to\u00a00.5 for Adobe MM fonts, and to\u00a00 for TrueType GX and OpenType variation fonts.</p> output coords <p>The normalized blend coordinates array (as 16.16 fractional values).</p> return <p>FreeType error code. 0\u00a0means success.</p> since <p>2.7.1</p>"},{"location":"ft2-multiple_masters.html#ft_set_var_blend_coordinates","title":"FT_Set_Var_Blend_Coordinates","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_Var_Blend_Coordinates( FT_Face    face,\n                                FT_UInt    num_coords,\n                                FT_Fixed*  coords );\n</code></pre> <p>This is another name of <code>FT_Set_MM_Blend_Coordinates</code>.</p>"},{"location":"ft2-multiple_masters.html#ft_get_var_blend_coordinates","title":"FT_Get_Var_Blend_Coordinates","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Var_Blend_Coordinates( FT_Face    face,\n                                FT_UInt    num_coords,\n                                FT_Fixed*  coords );\n</code></pre> <p>This is another name of <code>FT_Get_MM_Blend_Coordinates</code>.</p> since <p>2.7.1</p>"},{"location":"ft2-multiple_masters.html#ft_set_mm_weightvector","title":"FT_Set_MM_WeightVector","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_MM_WeightVector( FT_Face    face,\n                          FT_UInt    len,\n                          FT_Fixed*  weightvector );\n</code></pre> <p>For Adobe MM fonts, choose an interpolated font design by directly setting the weight vector.</p> <p>This function can't be used with TrueType GX or OpenType variation fonts.</p> inout face <p>A handle to the source face.</p> input len <p>The length of the weight vector array. If it is larger than the number of designs, the extra values are ignored. If it is less than the number of designs, the remaining values are set to zero.</p> weightvector <p>An array representing the weight vector.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Adobe Multiple Master fonts limit the number of designs, and thus the length of the weight vector to 16\u00a0elements.</p> <p>If <code>len</code> is larger than zero, this function sets the <code>FT_FACE_FLAG_VARIATION</code> bit in <code>FT_Face</code>'s <code>face_flags</code> field (i.e., <code>FT_IS_VARIATION</code> will return true). If <code>len</code> is zero, this bit flag is unset and the weight vector array is reset to the default values.</p> <p>The Adobe documentation also states that the values in the WeightVector array must total 1.0 \u00b1\u00a00.001. In practice this does not seem to be enforced, so is not enforced here, either.</p> since <p>2.10</p>"},{"location":"ft2-multiple_masters.html#ft_get_mm_weightvector","title":"FT_Get_MM_WeightVector","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_MM_WeightVector( FT_Face    face,\n                          FT_UInt*   len,\n                          FT_Fixed*  weightvector );\n</code></pre> <p>For Adobe MM fonts, retrieve the current weight vector of the font.</p> <p>This function can't be used with TrueType GX or OpenType variation fonts.</p> inout face <p>A handle to the source face.</p> len <p>A pointer to the size of the array to be filled. If the size of the array is less than the number of designs, <code>FT_Err_Invalid_Argument</code> is returned, and <code>len</code> is set to the required size (the number of designs). If the size of the array is greater than the number of designs, the remaining entries are set to\u00a00. On successful completion, <code>len</code> is set to the number of designs (i.e., the number of values written to the array).</p> output weightvector <p>An array to be filled.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Adobe Multiple Master fonts limit the number of designs, and thus the length of the WeightVector to\u00a016.</p> since <p>2.10</p>"},{"location":"ft2-multiple_masters.html#ft_var_axis_flag_xxx","title":"FT_VAR_AXIS_FLAG_XXX","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>#define FT_VAR_AXIS_FLAG_HIDDEN  1\n</code></pre> <p>A list of bit flags used in the return value of <code>FT_Get_Var_Axis_Flags</code>.</p> values FT_VAR_AXIS_FLAG_HIDDEN <p>The variation axis should not be exposed to user interfaces.</p> since <p>2.8.1</p>"},{"location":"ft2-multiple_masters.html#ft_get_var_axis_flags","title":"FT_Get_Var_Axis_Flags","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Var_Axis_Flags( FT_MM_Var*  master,\n                         FT_UInt     axis_index,\n                         FT_UInt*    flags );\n</code></pre> <p>Get the \u2018flags\u2019 field of an OpenType Variation Axis Record.</p> <p>Not meaningful for Adobe MM fonts (<code>*flags</code> is always zero).</p> input master <p>The variation descriptor.</p> axis_index <p>The index of the requested variation axis.</p> output flags <p>The \u2018flags\u2019 field. See <code>FT_VAR_AXIS_FLAG_XXX</code> for possible values.</p> return <p>FreeType error code. 0\u00a0means success.</p> since <p>2.8.1</p>"},{"location":"ft2-multiple_masters.html#ft_set_named_instance","title":"FT_Set_Named_Instance","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_Named_Instance( FT_Face  face,\n                         FT_UInt  instance_index );\n</code></pre> <p>Set or change the current named instance.</p> input face <p>A handle to the source face.</p> instance_index <p>The index of the requested instance, starting with value 1. If set to value 0, FreeType switches to font access without a named instance.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The function uses the value of <code>instance_index</code> to set bits 16-30 of the face's <code>face_index</code> field. It also resets any variation applied to the font, and the <code>FT_FACE_FLAG_VARIATION</code> bit of the face's <code>face_flags</code> field gets reset to zero (i.e., <code>FT_IS_VARIATION</code> will return false).</p> <p>For Adobe MM fonts (which don't have named instances) this function simply resets the current face to the default instance.</p> since <p>2.9</p>"},{"location":"ft2-multiple_masters.html#ft_get_default_named_instance","title":"FT_Get_Default_Named_Instance","text":"<p>Defined in FT_MULTIPLE_MASTERS_H (freetype/ftmm.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Default_Named_Instance( FT_Face   face,\n                                 FT_UInt  *instance_index );\n</code></pre> <p>Retrieve the index of the default named instance, to be used with <code>FT_Set_Named_Instance</code>.</p> <p>The default instance of a variation font is that instance for which the nth axis coordinate is equal to <code>axis[n].def</code> (as specified in the <code>FT_MM_Var</code> structure), with\u00a0n covering all axes.</p> <p>FreeType synthesizes a named instance for the default instance if the font does not contain such an entry.</p> input face <p>A handle to the source face.</p> output instance_index <p>The index of the default named instance.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>For Adobe MM fonts (which don't have named instances) this function always returns zero for <code>instance_index</code>.</p> since <p>2.13.1</p>"},{"location":"ft2-ot_svg_driver.html","title":"The SVG driver","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb The SVG driver</p>"},{"location":"ft2-ot_svg_driver.html#the-svg-driver","title":"The SVG driver","text":""},{"location":"ft2-ot_svg_driver.html#synopsis","title":"Synopsis","text":"<p>By default, FreeType can only load the \u2018SVG\u00a0\u2019 table of OpenType fonts if configuration macro <code>FT_CONFIG_OPTION_SVG</code> is defined. To make it render SVG glyphs, an external SVG rendering library is needed. All details on the interface between FreeType and the external library via function hooks can be found in section \u2018OpenType SVG Fonts\u2019.</p> <p>The OT-SVG driver's module name is \u2018ot-svg\u2019; it supports a single property called <code>svg-hooks</code>, documented below in the \u2018Driver properties\u2019 section.</p>"},{"location":"ft2-ot_validation.html","title":"OpenType Validation","text":"<p>FreeType \u00bb Docs \u00bb Miscellaneous \u00bb OpenType Validation</p>"},{"location":"ft2-ot_validation.html#opentype-validation","title":"OpenType Validation","text":""},{"location":"ft2-ot_validation.html#synopsis","title":"Synopsis","text":"<p>This section contains the declaration of functions to validate some OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF, MATH).</p>"},{"location":"ft2-ot_validation.html#ft_opentype_validate","title":"FT_OpenType_Validate","text":"<p>Defined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_OpenType_Validate( FT_Face    face,\n                        FT_UInt    validation_flags,\n                        FT_Bytes  *BASE_table,\n                        FT_Bytes  *GDEF_table,\n                        FT_Bytes  *GPOS_table,\n                        FT_Bytes  *GSUB_table,\n                        FT_Bytes  *JSTF_table );\n</code></pre> <p>Validate various OpenType tables to assure that all offsets and indices are valid. The idea is that a higher-level library that actually does the text layout can access those tables without error checking (which can be quite time consuming).</p> input face <p>A handle to the input face.</p> validation_flags <p>A bit field that specifies the tables to be validated. See <code>FT_VALIDATE_OTXXX</code> for possible values.</p> output BASE_table <p>A pointer to the BASE table.</p> GDEF_table <p>A pointer to the GDEF table.</p> GPOS_table <p>A pointer to the GPOS table.</p> GSUB_table <p>A pointer to the GSUB table.</p> JSTF_table <p>A pointer to the JSTF table.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function only works with OpenType fonts, returning an error otherwise.</p> <p>After use, the application should deallocate the five tables with <code>FT_OpenType_Free</code>. A <code>NULL</code> value indicates that the table either doesn't exist in the font, or the application hasn't asked for validation.</p>"},{"location":"ft2-ot_validation.html#ft_opentype_free","title":"FT_OpenType_Free","text":"<p>Defined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_OpenType_Free( FT_Face   face,\n                    FT_Bytes  table );\n</code></pre> <p>Free the buffer allocated by OpenType validator.</p> input face <p>A handle to the input face.</p> table <p>The pointer to the buffer that is allocated by <code>FT_OpenType_Validate</code>.</p> note <p>This function must be used to free the buffer allocated by <code>FT_OpenType_Validate</code> only.</p>"},{"location":"ft2-ot_validation.html#ft_validate_otxxx","title":"FT_VALIDATE_OTXXX","text":"<p>Defined in FT_OPENTYPE_VALIDATE_H (freetype/ftotval.h).</p> <pre><code>#define FT_VALIDATE_BASE  0x0100\n#define FT_VALIDATE_GDEF  0x0200\n#define FT_VALIDATE_GPOS  0x0400\n#define FT_VALIDATE_GSUB  0x0800\n#define FT_VALIDATE_JSTF  0x1000\n#define FT_VALIDATE_MATH  0x2000\n\n#define FT_VALIDATE_OT  ( FT_VALIDATE_BASE | \\\n                          FT_VALIDATE_GDEF | \\\n                          FT_VALIDATE_GPOS | \\\n                          FT_VALIDATE_GSUB | \\\n                          FT_VALIDATE_JSTF | \\\n                          FT_VALIDATE_MATH )\n</code></pre> <p>A list of bit-field constants used with <code>FT_OpenType_Validate</code> to indicate which OpenType tables should be validated.</p> values FT_VALIDATE_BASE <p>Validate BASE table.</p> FT_VALIDATE_GDEF <p>Validate GDEF table.</p> FT_VALIDATE_GPOS <p>Validate GPOS table.</p> FT_VALIDATE_GSUB <p>Validate GSUB table.</p> FT_VALIDATE_JSTF <p>Validate JSTF table.</p> FT_VALIDATE_MATH <p>Validate MATH table.</p> FT_VALIDATE_OT <p>Validate all OpenType tables (BASE, GDEF, GPOS, GSUB, JSTF, MATH).</p>"},{"location":"ft2-other_api_data.html","title":"Other API Data","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Other API Data</p>"},{"location":"ft2-other_api_data.html#other-api-data","title":"Other API Data","text":""},{"location":"ft2-other_api_data.html#synopsis","title":"Synopsis","text":"<p>Other structures, enumerations, and macros. Deprecated functions are also listed here.</p>"},{"location":"ft2-other_api_data.html#ft_face_internal","title":"FT_Face_Internal","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_Face_InternalRec_*  FT_Face_Internal;\n</code></pre> <p>An opaque handle to an <code>FT_Face_InternalRec</code> structure that models the private data of a given <code>FT_Face</code> object.</p> <p>This structure might change between releases of FreeType\u00a02 and is not generally available to client applications.</p>"},{"location":"ft2-other_api_data.html#ft_size_internal","title":"FT_Size_Internal","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_Size_InternalRec_*  FT_Size_Internal;\n</code></pre> <p>An opaque handle to an <code>FT_Size_InternalRec</code> structure, used to model private data of a given <code>FT_Size</code> object.</p>"},{"location":"ft2-other_api_data.html#ft_slot_internal","title":"FT_Slot_Internal","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_Slot_InternalRec_*  FT_Slot_Internal;\n</code></pre> <p>An opaque handle to an <code>FT_Slot_InternalRec</code> structure, used to model private data of a given <code>FT_GlyphSlot</code> object.</p>"},{"location":"ft2-other_api_data.html#ft_subglyph","title":"FT_SubGlyph","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_SubGlyphRec_*  FT_SubGlyph;\n</code></pre> <p>The subglyph structure is an internal object used to describe subglyphs (for example, in the case of composites).</p> note <p>The subglyph implementation is not part of the high-level API, hence the forward structure declaration.</p> <p>You can however retrieve subglyph information with <code>FT_Get_SubGlyph_Info</code>.</p>"},{"location":"ft2-other_api_data.html#ft_has_fast_glyphs","title":"FT_HAS_FAST_GLYPHS","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>#define FT_HAS_FAST_GLYPHS( face )  0\n</code></pre> <p>Deprecated.</p>"},{"location":"ft2-other_api_data.html#ft_face_checktruetypepatents","title":"FT_Face_CheckTrueTypePatents","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Face_CheckTrueTypePatents( FT_Face  face );\n</code></pre> <p>Deprecated, does nothing.</p> input face <p>A face handle.</p> return <p>Always returns false.</p> note <p>Since May 2010, TrueType hinting is no longer patented.</p> since <p>2.3.5</p>"},{"location":"ft2-other_api_data.html#ft_face_setunpatentedhinting","title":"FT_Face_SetUnpatentedHinting","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Bool )\n  FT_Face_SetUnpatentedHinting( FT_Face  face,\n                                FT_Bool  value );\n</code></pre> <p>Deprecated, does nothing.</p> input face <p>A face handle.</p> value <p>New boolean setting.</p> return <p>Always returns false.</p> note <p>Since May 2010, TrueType hinting is no longer patented.</p> since <p>2.3.5</p>"},{"location":"ft2-outline_processing.html","title":"Outline Processing","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb Outline Processing</p>"},{"location":"ft2-outline_processing.html#outline-processing","title":"Outline Processing","text":""},{"location":"ft2-outline_processing.html#synopsis","title":"Synopsis","text":"<p>This section contains routines used to create and destroy scalable glyph images known as \u2018outlines\u2019. These can also be measured, transformed, and converted into bitmaps and pixmaps.</p>"},{"location":"ft2-outline_processing.html#ft_outline","title":"FT_Outline","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_Outline_\n  {\n    unsigned short   n_contours;  /* number of contours in glyph        */\n    unsigned short   n_points;    /* number of points in the glyph      */\n\n    FT_Vector*       points;      /* the outline's points               */\n    unsigned char*   tags;        /* the points flags                   */\n    unsigned short*  contours;    /* the contour end points             */\n\n    int              flags;       /* outline masks                      */\n\n  } FT_Outline;\n</code></pre> <p>This structure is used to describe an outline to the scan-line converter.</p> fields n_contours <p>The number of contours in the outline.</p> n_points <p>The number of points in the outline.</p> points <p>A pointer to an array of <code>n_points</code> <code>FT_Vector</code> elements, giving the outline's point coordinates.</p> tags <p>A pointer to an array of <code>n_points</code> chars, giving each outline point's type.</p> <p>If bit\u00a00 is unset, the point is \u2018off\u2019 the curve, i.e., a Bezier control point, while it is \u2018on\u2019 if set.</p> <p>Bit\u00a01 is meaningful for \u2018off\u2019 points only. If set, it indicates a third-order Bezier arc control point; and a second-order control point if unset.</p> <p>If bit\u00a02 is set, bits 5-7 contain the drop-out mode (as defined in the OpenType specification; the value is the same as the argument to the \u2018SCANTYPE\u2019 instruction).</p> <p>Bits 3 and\u00a04 are reserved for internal purposes.</p> contours <p>An array of <code>n_contours</code> shorts, giving the end point of each contour within the outline. For example, the first contour is defined by the points \u20180\u2019 to <code>contours[0]</code>, the second one is defined by the points <code>contours[0]+1</code> to <code>contours[1]</code>, etc.</p> flags <p>A set of bit flags used to characterize the outline and give hints to the scan-converter and hinter on how to convert/grid-fit it. See <code>FT_OUTLINE_XXX</code>.</p> note <p>The B/W rasterizer only checks bit\u00a02 in the <code>tags</code> array for the first point of each contour. The drop-out mode as given with <code>FT_OUTLINE_IGNORE_DROPOUTS</code>, <code>FT_OUTLINE_SMART_DROPOUTS</code>, and <code>FT_OUTLINE_INCLUDE_STUBS</code> in <code>flags</code> is then overridden.</p>"},{"location":"ft2-outline_processing.html#ft_outline_new","title":"FT_Outline_New","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_New( FT_Library   library,\n                  FT_UInt      numPoints,\n                  FT_Int       numContours,\n                  FT_Outline  *anoutline );\n</code></pre> <p>Create a new outline of a given size.</p> input library <p>A handle to the library object from where the outline is allocated. Note however that the new outline will not necessarily be freed, when destroying the library, by <code>FT_Done_FreeType</code>.</p> numPoints <p>The maximum number of points within the outline. Must be smaller than or equal to 0xFFFF (65535).</p> numContours <p>The maximum number of contours within the outline. This value must be in the range 0 to <code>numPoints</code>.</p> output anoutline <p>A handle to the new outline.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The reason why this function takes a <code>library</code> parameter is simply to use the library's memory allocator.</p>"},{"location":"ft2-outline_processing.html#ft_outline_done","title":"FT_Outline_Done","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Done( FT_Library   library,\n                   FT_Outline*  outline );\n</code></pre> <p>Destroy an outline created with <code>FT_Outline_New</code>.</p> input library <p>A handle of the library object used to allocate the outline.</p> outline <p>A pointer to the outline object to be discarded.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If the outline's \u2018owner\u2019 field is not set, only the outline descriptor will be released.</p>"},{"location":"ft2-outline_processing.html#ft_outline_copy","title":"FT_Outline_Copy","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Copy( const FT_Outline*  source,\n                   FT_Outline        *target );\n</code></pre> <p>Copy an outline into another one. Both objects must have the same sizes (number of points &amp; number of contours) when this function is called.</p> input source <p>A handle to the source outline.</p> output target <p>A handle to the target outline.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-outline_processing.html#ft_outline_translate","title":"FT_Outline_Translate","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Outline_Translate( const FT_Outline*  outline,\n                        FT_Pos             xOffset,\n                        FT_Pos             yOffset );\n</code></pre> <p>Apply a simple translation to the points of an outline.</p> inout outline <p>A pointer to the target outline descriptor.</p> input xOffset <p>The horizontal offset.</p> yOffset <p>The vertical offset.</p>"},{"location":"ft2-outline_processing.html#ft_outline_transform","title":"FT_Outline_Transform","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Outline_Transform( const FT_Outline*  outline,\n                        const FT_Matrix*   matrix );\n</code></pre> <p>Apply a simple 2x2 matrix to all of an outline's points. Useful for applying rotations, slanting, flipping, etc.</p> inout outline <p>A pointer to the target outline descriptor.</p> input matrix <p>A pointer to the transformation matrix.</p> note <p>You can use <code>FT_Outline_Translate</code> if you need to translate the outline's points.</p>"},{"location":"ft2-outline_processing.html#ft_outline_embolden","title":"FT_Outline_Embolden","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Embolden( FT_Outline*  outline,\n                       FT_Pos       strength );\n</code></pre> <p>Embolden an outline. The new outline will be at most 4\u00a0times <code>strength</code> pixels wider and higher. You may think of the left and bottom borders as unchanged.</p> <p>Negative <code>strength</code> values to reduce the outline thickness are possible also.</p> inout outline <p>A handle to the target outline.</p> input strength <p>How strong the glyph is emboldened. Expressed in 26.6 pixel format.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The used algorithm to increase or decrease the thickness of the glyph doesn't change the number of points; this means that certain situations like acute angles or intersections are sometimes handled incorrectly.</p> <p>If you need \u2018better\u2019 metrics values you should call <code>FT_Outline_Get_CBox</code> or <code>FT_Outline_Get_BBox</code>.</p> <p>To get meaningful results, font scaling values must be set with functions like <code>FT_Set_Char_Size</code> before calling FT_Render_Glyph.</p> example <pre><code>  FT_Load_Glyph( face, index, FT_LOAD_DEFAULT );\n\n  if ( face-&gt;glyph-&gt;format == FT_GLYPH_FORMAT_OUTLINE )\n    FT_Outline_Embolden( &amp;face-&gt;glyph-&gt;outline, strength );\n</code></pre>"},{"location":"ft2-outline_processing.html#ft_outline_emboldenxy","title":"FT_Outline_EmboldenXY","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_EmboldenXY( FT_Outline*  outline,\n                         FT_Pos       xstrength,\n                         FT_Pos       ystrength );\n</code></pre> <p>Embolden an outline. The new outline will be <code>xstrength</code> pixels wider and <code>ystrength</code> pixels higher. Otherwise, it is similar to <code>FT_Outline_Embolden</code>, which uses the same strength in both directions.</p> since <p>2.4.10</p>"},{"location":"ft2-outline_processing.html#ft_outline_reverse","title":"FT_Outline_Reverse","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Outline_Reverse( FT_Outline*  outline );\n</code></pre> <p>Reverse the drawing direction of an outline. This is used to ensure consistent fill conventions for mirrored glyphs.</p> inout outline <p>A pointer to the target outline descriptor.</p> note <p>This function toggles the bit flag <code>FT_OUTLINE_REVERSE_FILL</code> in the outline's <code>flags</code> field.</p> <p>It shouldn't be used by a normal client application, unless it knows what it is doing.</p>"},{"location":"ft2-outline_processing.html#ft_outline_check","title":"FT_Outline_Check","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Check( FT_Outline*  outline );\n</code></pre> <p>Check the contents of an outline descriptor.</p> input outline <p>A handle to a source outline.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>An empty outline, or an outline with a single point only is also valid.</p>"},{"location":"ft2-outline_processing.html#ft_outline_get_cbox","title":"FT_Outline_Get_CBox","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Outline_Get_CBox( const FT_Outline*  outline,\n                       FT_BBox           *acbox );\n</code></pre> <p>Return an outline's \u2018control box\u2019. The control box encloses all the outline's points, including Bezier control points. Though it coincides with the exact bounding box for most glyphs, it can be slightly larger in some situations (like when rotating an outline that contains Bezier outside arcs).</p> <p>Computing the control box is very fast, while getting the bounding box can take much more time as it needs to walk over all segments and arcs in the outline. To get the latter, you can use the \u2018ftbbox\u2019 component, which is dedicated to this single task.</p> input outline <p>A pointer to the source outline descriptor.</p> output acbox <p>The outline's control box.</p> note <p>See <code>FT_Glyph_Get_CBox</code> for a discussion of tricky fonts.</p>"},{"location":"ft2-outline_processing.html#ft_outline_get_bbox","title":"FT_Outline_Get_BBox","text":"<p>Defined in FT_BBOX_H (freetype/ftbbox.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Get_BBox( FT_Outline*  outline,\n                       FT_BBox     *abbox );\n</code></pre> <p>Compute the exact bounding box of an outline. This is slower than computing the control box. However, it uses an advanced algorithm that returns very quickly when the two boxes coincide. Otherwise, the outline Bezier arcs are traversed to extract their extrema.</p> input outline <p>A pointer to the source outline.</p> output abbox <p>The outline's exact bounding box.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If the font is tricky and the glyph has been loaded with <code>FT_LOAD_NO_SCALE</code>, the resulting BBox is meaningless. To get reasonable values for the BBox it is necessary to load the glyph at a large ppem value (so that the hinting instructions can properly shift and scale the subglyphs), then extracting the BBox, which can be eventually converted back to font units.</p>"},{"location":"ft2-outline_processing.html#ft_outline_get_bitmap","title":"FT_Outline_Get_Bitmap","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Get_Bitmap( FT_Library        library,\n                         FT_Outline*       outline,\n                         const FT_Bitmap  *abitmap );\n</code></pre> <p>Render an outline within a bitmap. The outline's image is simply OR-ed to the target bitmap.</p> input library <p>A handle to a FreeType library object.</p> outline <p>A pointer to the source outline descriptor.</p> inout abitmap <p>A pointer to the target bitmap descriptor.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function does not create the bitmap, it only renders an outline image within the one you pass to it! Consequently, the various fields in <code>abitmap</code> should be set accordingly.</p> <p>It will use the raster corresponding to the default glyph format.</p> <p>The value of the <code>num_grays</code> field in <code>abitmap</code> is ignored. If you select the gray-level rasterizer, and you want less than 256 gray levels, you have to use <code>FT_Outline_Render</code> directly.</p>"},{"location":"ft2-outline_processing.html#ft_outline_render","title":"FT_Outline_Render","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Render( FT_Library         library,\n                     FT_Outline*        outline,\n                     FT_Raster_Params*  params );\n</code></pre> <p>Render an outline within a bitmap using the current scan-convert.</p> input library <p>A handle to a FreeType library object.</p> outline <p>A pointer to the source outline descriptor.</p> inout params <p>A pointer to an <code>FT_Raster_Params</code> structure used to describe the rendering operation.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This advanced function uses <code>FT_Raster_Params</code> as an argument. The field <code>params.source</code> will be set to <code>outline</code> before the scan converter is called, which means that the value you give to it is actually ignored. Either <code>params.target</code> must point to preallocated bitmap, or <code>FT_RASTER_FLAG_DIRECT</code> must be set in <code>params.flags</code> allowing FreeType rasterizer to be used for direct composition, translucency, etc. See <code>FT_Raster_Params</code> for more details.</p>"},{"location":"ft2-outline_processing.html#ft_outline_decompose","title":"FT_Outline_Decompose","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Outline_Decompose( FT_Outline*              outline,\n                        const FT_Outline_Funcs*  func_interface,\n                        void*                    user );\n</code></pre> <p>Walk over an outline's structure to decompose it into individual segments and Bezier arcs. This function also emits \u2018move to\u2019 operations to indicate the start of new contours in the outline.</p> input outline <p>A pointer to the source target.</p> func_interface <p>A table of \u2018emitters\u2019, i.e., function pointers called during decomposition to indicate path operations.</p> inout user <p>A typeless pointer that is passed to each emitter during the decomposition. It can be used to store the state during the decomposition.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Degenerate contours, segments, and Bezier arcs may be reported. In most cases, it is best to filter these out before using the outline for stroking or other path modification purposes (which may cause degenerate segments to become non-degenerate and visible, like when stroke caps are used or the path is otherwise outset). Some glyph outlines may contain deliberate degenerate single points for mark attachement.</p> <p>Similarly, the function returns success for an empty outline also (doing nothing, that is, not calling any emitter); if necessary, you should filter this out, too.</p>"},{"location":"ft2-outline_processing.html#ft_outline_funcs","title":"FT_Outline_Funcs","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_Outline_Funcs_\n  {\n    FT_Outline_MoveToFunc   move_to;\n    FT_Outline_LineToFunc   line_to;\n    FT_Outline_ConicToFunc  conic_to;\n    FT_Outline_CubicToFunc  cubic_to;\n\n    int                     shift;\n    FT_Pos                  delta;\n\n  } FT_Outline_Funcs;\n</code></pre> <p>A structure to hold various function pointers used during outline decomposition in order to emit segments, conic, and cubic Beziers.</p> fields move_to <p>The \u2018move to\u2019 emitter.</p> line_to <p>The segment emitter.</p> conic_to <p>The second-order Bezier arc emitter.</p> cubic_to <p>The third-order Bezier arc emitter.</p> shift <p>The shift that is applied to coordinates before they are sent to the emitter.</p> delta <p>The delta that is applied to coordinates before they are sent to the emitter, but after the shift.</p> note <p>The point coordinates sent to the emitters are the transformed version of the original coordinates (this is important for high accuracy during scan-conversion). The transformation is simple: <pre><code>  x' = (x &lt;&lt; shift) - delta\n  y' = (y &lt;&lt; shift) - delta\n</code></pre></p> <p>Set the values of <code>shift</code> and <code>delta</code> to\u00a00 to get the original point coordinates.</p>"},{"location":"ft2-outline_processing.html#ft_outline_movetofunc","title":"FT_Outline_MoveToFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Outline_MoveToFunc)( const FT_Vector*  to,\n                            void*             user );\n\n#define FT_Outline_MoveTo_Func  FT_Outline_MoveToFunc\n</code></pre> <p>A function pointer type used to describe the signature of a \u2018move to\u2019 function during outline walking/decomposition.</p> <p>A \u2018move to\u2019 is emitted to start a new contour in an outline.</p> input to <p>A pointer to the target point of the \u2018move to\u2019.</p> user <p>A typeless pointer, which is passed from the caller of the decomposition function.</p> return <p>Error code. 0\u00a0means success.</p>"},{"location":"ft2-outline_processing.html#ft_outline_linetofunc","title":"FT_Outline_LineToFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Outline_LineToFunc)( const FT_Vector*  to,\n                            void*             user );\n\n#define FT_Outline_LineTo_Func  FT_Outline_LineToFunc\n</code></pre> <p>A function pointer type used to describe the signature of a \u2018line to\u2019 function during outline walking/decomposition.</p> <p>A \u2018line to\u2019 is emitted to indicate a segment in the outline.</p> input to <p>A pointer to the target point of the \u2018line to\u2019.</p> user <p>A typeless pointer, which is passed from the caller of the decomposition function.</p> return <p>Error code. 0\u00a0means success.</p>"},{"location":"ft2-outline_processing.html#ft_outline_conictofunc","title":"FT_Outline_ConicToFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Outline_ConicToFunc)( const FT_Vector*  control,\n                             const FT_Vector*  to,\n                             void*             user );\n\n#define FT_Outline_ConicTo_Func  FT_Outline_ConicToFunc\n</code></pre> <p>A function pointer type used to describe the signature of a \u2018conic to\u2019 function during outline walking or decomposition.</p> <p>A \u2018conic to\u2019 is emitted to indicate a second-order Bezier arc in the outline.</p> input control <p>An intermediate control point between the last position and the new target in <code>to</code>.</p> to <p>A pointer to the target end point of the conic arc.</p> user <p>A typeless pointer, which is passed from the caller of the decomposition function.</p> return <p>Error code. 0\u00a0means success.</p>"},{"location":"ft2-outline_processing.html#ft_outline_cubictofunc","title":"FT_Outline_CubicToFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Outline_CubicToFunc)( const FT_Vector*  control1,\n                             const FT_Vector*  control2,\n                             const FT_Vector*  to,\n                             void*             user );\n\n#define FT_Outline_CubicTo_Func  FT_Outline_CubicToFunc\n</code></pre> <p>A function pointer type used to describe the signature of a \u2018cubic to\u2019 function during outline walking or decomposition.</p> <p>A \u2018cubic to\u2019 is emitted to indicate a third-order Bezier arc.</p> input control1 <p>A pointer to the first Bezier control point.</p> control2 <p>A pointer to the second Bezier control point.</p> to <p>A pointer to the target end point.</p> user <p>A typeless pointer, which is passed from the caller of the decomposition function.</p> return <p>Error code. 0\u00a0means success.</p>"},{"location":"ft2-outline_processing.html#ft_orientation","title":"FT_Orientation","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  typedef enum  FT_Orientation_\n  {\n    FT_ORIENTATION_TRUETYPE   = 0,\n    FT_ORIENTATION_POSTSCRIPT = 1,\n    FT_ORIENTATION_FILL_RIGHT = FT_ORIENTATION_TRUETYPE,\n    FT_ORIENTATION_FILL_LEFT  = FT_ORIENTATION_POSTSCRIPT,\n    FT_ORIENTATION_NONE\n\n  } FT_Orientation;\n</code></pre> <p>A list of values used to describe an outline's contour orientation.</p> <p>The TrueType and PostScript specifications use different conventions to determine whether outline contours should be filled or unfilled.</p> values FT_ORIENTATION_TRUETYPE <p>According to the TrueType specification, clockwise contours must be filled, and counter-clockwise ones must be unfilled.</p> FT_ORIENTATION_POSTSCRIPT <p>According to the PostScript specification, counter-clockwise contours must be filled, and clockwise ones must be unfilled.</p> FT_ORIENTATION_FILL_RIGHT <p>This is identical to <code>FT_ORIENTATION_TRUETYPE</code>, but is used to remember that in TrueType, everything that is to the right of the drawing direction of a contour must be filled.</p> FT_ORIENTATION_FILL_LEFT <p>This is identical to <code>FT_ORIENTATION_POSTSCRIPT</code>, but is used to remember that in PostScript, everything that is to the left of the drawing direction of a contour must be filled.</p> FT_ORIENTATION_NONE <p>The orientation cannot be determined. That is, different parts of the glyph have different orientation.</p>"},{"location":"ft2-outline_processing.html#ft_outline_get_orientation","title":"FT_Outline_Get_Orientation","text":"<p>Defined in FT_OUTLINE_H (freetype/ftoutln.h).</p> <pre><code>  FT_EXPORT( FT_Orientation )\n  FT_Outline_Get_Orientation( FT_Outline*  outline );\n</code></pre> <p>This function analyzes a glyph outline and tries to compute its fill orientation (see <code>FT_Orientation</code>). This is done by integrating the total area covered by the outline. The positive integral corresponds to the clockwise orientation and <code>FT_ORIENTATION_POSTSCRIPT</code> is returned. The negative integral corresponds to the counter-clockwise orientation and <code>FT_ORIENTATION_TRUETYPE</code> is returned.</p> <p>Note that this will return <code>FT_ORIENTATION_TRUETYPE</code> for empty outlines.</p> input outline <p>A handle to the source outline.</p> return <p>The orientation.</p>"},{"location":"ft2-outline_processing.html#ft_outline_xxx","title":"FT_OUTLINE_XXX","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>#define FT_OUTLINE_NONE             0x0\n#define FT_OUTLINE_OWNER            0x1\n#define FT_OUTLINE_EVEN_ODD_FILL    0x2\n#define FT_OUTLINE_REVERSE_FILL     0x4\n#define FT_OUTLINE_IGNORE_DROPOUTS  0x8\n#define FT_OUTLINE_SMART_DROPOUTS   0x10\n#define FT_OUTLINE_INCLUDE_STUBS    0x20\n#define FT_OUTLINE_OVERLAP          0x40\n\n#define FT_OUTLINE_HIGH_PRECISION   0x100\n#define FT_OUTLINE_SINGLE_PASS      0x200\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `FT_OUTLINE_XXX` values instead                       */\n#define ft_outline_none             FT_OUTLINE_NONE\n#define ft_outline_owner            FT_OUTLINE_OWNER\n#define ft_outline_even_odd_fill    FT_OUTLINE_EVEN_ODD_FILL\n#define ft_outline_reverse_fill     FT_OUTLINE_REVERSE_FILL\n#define ft_outline_ignore_dropouts  FT_OUTLINE_IGNORE_DROPOUTS\n#define ft_outline_high_precision   FT_OUTLINE_HIGH_PRECISION\n#define ft_outline_single_pass      FT_OUTLINE_SINGLE_PASS\n</code></pre> <p>A list of bit-field constants used for the flags in an outline's <code>flags</code> field.</p> values FT_OUTLINE_NONE <p>Value\u00a00 is reserved.</p> FT_OUTLINE_OWNER <p>If set, this flag indicates that the outline's field arrays (i.e., <code>points</code>, <code>flags</code>, and <code>contours</code>) are \u2018owned\u2019 by the outline object, and should thus be freed when it is destroyed.</p> FT_OUTLINE_EVEN_ODD_FILL <p>By default, outlines are filled using the non-zero winding rule. If set to 1, the outline will be filled using the even-odd fill rule (only works with the smooth rasterizer).</p> FT_OUTLINE_REVERSE_FILL <p>By default, outside contours of an outline are oriented in clock-wise direction, as defined in the TrueType specification. This flag is set if the outline uses the opposite direction (typically for Type\u00a01 fonts). This flag is ignored by the scan converter.</p> FT_OUTLINE_IGNORE_DROPOUTS <p>By default, the scan converter will try to detect drop-outs in an outline and correct the glyph bitmap to ensure consistent shape continuity. If set, this flag hints the scan-line converter to ignore such cases. See below for more information.</p> FT_OUTLINE_SMART_DROPOUTS <p>Select smart dropout control. If unset, use simple dropout control. Ignored if <code>FT_OUTLINE_IGNORE_DROPOUTS</code> is set. See below for more information.</p> FT_OUTLINE_INCLUDE_STUBS <p>If set, turn pixels on for \u2018stubs\u2019, otherwise exclude them. Ignored if <code>FT_OUTLINE_IGNORE_DROPOUTS</code> is set. See below for more information.</p> FT_OUTLINE_OVERLAP <p>[Since 2.10.3] This flag indicates that this outline contains overlapping contours and the anti-aliased renderer should perform oversampling to mitigate possible artifacts. This flag should not be set for well designed glyphs without overlaps because it quadruples the rendering time.</p> FT_OUTLINE_HIGH_PRECISION <p>This flag indicates that the scan-line converter should try to convert this outline to bitmaps with the highest possible quality. It is typically set for small character sizes. Note that this is only a hint that might be completely ignored by a given scan-converter.</p> FT_OUTLINE_SINGLE_PASS <p>This flag is set to force a given scan-converter to only use a single pass over the outline to render a bitmap glyph image. Normally, it is set for very large character sizes. It is only a hint that might be completely ignored by a given scan-converter.</p> note <p>The flags <code>FT_OUTLINE_IGNORE_DROPOUTS</code>, <code>FT_OUTLINE_SMART_DROPOUTS</code>, and <code>FT_OUTLINE_INCLUDE_STUBS</code> are ignored by the smooth rasterizer.</p> <p>There exists a second mechanism to pass the drop-out mode to the B/W rasterizer; see the <code>tags</code> field in <code>FT_Outline</code>.</p> <p>Please refer to the description of the \u2018SCANTYPE\u2019 instruction in the OpenType specification how simple drop-outs, smart drop-outs, and stubs are defined.</p>"},{"location":"ft2-parameter_tags.html","title":"Parameter Tags","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb Parameter Tags</p>"},{"location":"ft2-parameter_tags.html#parameter-tags","title":"Parameter Tags","text":""},{"location":"ft2-parameter_tags.html#synopsis","title":"Synopsis","text":"<p>This section contains macros for the <code>FT_Parameter</code> structure that are used with various functions to activate some special functionality or different behaviour of various components of FreeType.</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_ignore_typographic_family","title":"FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY","text":"<pre><code>#define FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY \\\n          FT_MAKE_TAG( 'i', 'g', 'p', 'f' )\n\n\n  /* this constant is deprecated */\n#define FT_PARAM_TAG_IGNORE_PREFERRED_FAMILY \\\n          FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_FAMILY\n</code></pre> <p>A tag for <code>FT_Parameter</code> to make <code>FT_Open_Face</code> ignore typographic family names in the \u2018name\u2019 table (introduced in OpenType version 1.4). Use this for backward compatibility with legacy systems that have a four-faces-per-family restriction.</p> since <p>2.8</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_ignore_typographic_subfamily","title":"FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY","text":"<pre><code>#define FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY \\\n          FT_MAKE_TAG( 'i', 'g', 'p', 's' )\n\n\n  /* this constant is deprecated */\n#define FT_PARAM_TAG_IGNORE_PREFERRED_SUBFAMILY \\\n          FT_PARAM_TAG_IGNORE_TYPOGRAPHIC_SUBFAMILY\n</code></pre> <p>A tag for <code>FT_Parameter</code> to make <code>FT_Open_Face</code> ignore typographic subfamily names in the \u2018name\u2019 table (introduced in OpenType version 1.4). Use this for backward compatibility with legacy systems that have a four-faces-per-family restriction.</p> since <p>2.8</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_incremental","title":"FT_PARAM_TAG_INCREMENTAL","text":"<pre><code>#define FT_PARAM_TAG_INCREMENTAL \\\n          FT_MAKE_TAG( 'i', 'n', 'c', 'r' )\n</code></pre> <p>An <code>FT_Parameter</code> tag to be used with <code>FT_Open_Face</code> to indicate incremental glyph loading.</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_ignore_sbix","title":"FT_PARAM_TAG_IGNORE_SBIX","text":"<pre><code>#define FT_PARAM_TAG_IGNORE_SBIX \\\n          FT_MAKE_TAG( 'i', 's', 'b', 'x' )\n</code></pre> <p>A tag for <code>FT_Parameter</code> to make <code>FT_Open_Face</code> ignore an \u2018sbix\u2019 table while loading a font. Use this if <code>FT_FACE_FLAG_SBIX</code> is set and you want to access the outline glyphs in the font.</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_lcd_filter_weights","title":"FT_PARAM_TAG_LCD_FILTER_WEIGHTS","text":"<pre><code>#define FT_PARAM_TAG_LCD_FILTER_WEIGHTS \\\n          FT_MAKE_TAG( 'l', 'c', 'd', 'f' )\n</code></pre> <p>An <code>FT_Parameter</code> tag to be used with <code>FT_Face_Properties</code>. The corresponding argument specifies the five LCD filter weights for a given face (if using <code>FT_LOAD_TARGET_LCD</code>, for example), overriding the global default values or the values set up with <code>FT_Library_SetLcdFilterWeights</code>.</p> since <p>2.8</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_random_seed","title":"FT_PARAM_TAG_RANDOM_SEED","text":"<pre><code>#define FT_PARAM_TAG_RANDOM_SEED \\\n          FT_MAKE_TAG( 's', 'e', 'e', 'd' )\n</code></pre> <p>An <code>FT_Parameter</code> tag to be used with <code>FT_Face_Properties</code>. The corresponding 32bit signed integer argument overrides the font driver's random seed value with a face-specific one; see <code>random-seed</code>.</p> since <p>2.8</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_stem_darkening","title":"FT_PARAM_TAG_STEM_DARKENING","text":"<pre><code>#define FT_PARAM_TAG_STEM_DARKENING \\\n          FT_MAKE_TAG( 'd', 'a', 'r', 'k' )\n</code></pre> <p>An <code>FT_Parameter</code> tag to be used with <code>FT_Face_Properties</code>. The corresponding Boolean argument specifies whether to apply stem darkening, overriding the global default values or the values set up with <code>FT_Property_Set</code> (see <code>no-stem-darkening</code>).</p> <p>This is a passive setting that only takes effect if the font driver or autohinter honors it, which the CFF, Type\u00a01, and CID drivers always do, but the autohinter only in \u2018light\u2019 hinting mode (as of version 2.9).</p> since <p>2.8</p>"},{"location":"ft2-parameter_tags.html#ft_param_tag_unpatented_hinting","title":"FT_PARAM_TAG_UNPATENTED_HINTING","text":"<pre><code>#define FT_PARAM_TAG_UNPATENTED_HINTING \\\n          FT_MAKE_TAG( 'u', 'n', 'p', 'a' )\n</code></pre> <p>Deprecated, no effect.</p> <p>Previously: A constant used as the tag of an <code>FT_Parameter</code> structure to indicate that unpatented methods only should be used by the TrueType bytecode interpreter for a typeface opened by <code>FT_Open_Face</code>.</p>"},{"location":"ft2-pcf_driver.html","title":"The PCF driver","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb The PCF driver</p>"},{"location":"ft2-pcf_driver.html#the-pcf-driver","title":"The PCF driver","text":""},{"location":"ft2-pcf_driver.html#synopsis","title":"Synopsis","text":"<p>While FreeType's PCF driver doesn't expose API functions by itself, it is possible to control its behaviour with <code>FT_Property_Set</code> and <code>FT_Property_Get</code>. Right now, there is a single property <code>no-long-family-names</code> available if FreeType is compiled with PCF_CONFIG_OPTION_LONG_FAMILY_NAMES.</p> <p>The PCF driver's module name is \u2018pcf\u2019.</p>"},{"location":"ft2-pfr_fonts.html","title":"PFR Fonts","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb PFR Fonts</p>"},{"location":"ft2-pfr_fonts.html#pfr-fonts","title":"PFR Fonts","text":""},{"location":"ft2-pfr_fonts.html#synopsis","title":"Synopsis","text":"<p>This section contains the declaration of PFR-specific functions.</p>"},{"location":"ft2-pfr_fonts.html#ft_get_pfr_metrics","title":"FT_Get_PFR_Metrics","text":"<p>Defined in FT_PFR_H (freetype/ftpfr.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_PFR_Metrics( FT_Face    face,\n                      FT_UInt   *aoutline_resolution,\n                      FT_UInt   *ametrics_resolution,\n                      FT_Fixed  *ametrics_x_scale,\n                      FT_Fixed  *ametrics_y_scale );\n</code></pre> <p>Return the outline and metrics resolutions of a given PFR face.</p> input face <p>Handle to the input face. It can be a non-PFR face.</p> output aoutline_resolution <p>Outline resolution. This is equivalent to <code>face-&gt;units_per_EM</code> for non-PFR fonts. Optional (parameter can be <code>NULL</code>).</p> ametrics_resolution <p>Metrics resolution. This is equivalent to <code>outline_resolution</code> for non-PFR fonts. Optional (parameter can be <code>NULL</code>).</p> ametrics_x_scale <p>A 16.16 fixed-point number used to scale distance expressed in metrics units to device subpixels. This is equivalent to <code>face-&gt;size-&gt;x_scale</code>, but for metrics only. Optional (parameter can be <code>NULL</code>).</p> ametrics_y_scale <p>Same as <code>ametrics_x_scale</code> but for the vertical direction. optional (parameter can be <code>NULL</code>).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If the input face is not a PFR, this function will return an error. However, in all cases, it will return valid values.</p>"},{"location":"ft2-pfr_fonts.html#ft_get_pfr_kerning","title":"FT_Get_PFR_Kerning","text":"<p>Defined in FT_PFR_H (freetype/ftpfr.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_PFR_Kerning( FT_Face     face,\n                      FT_UInt     left,\n                      FT_UInt     right,\n                      FT_Vector  *avector );\n</code></pre> <p>Return the kerning pair corresponding to two glyphs in a PFR face. The distance is expressed in metrics units, unlike the result of <code>FT_Get_Kerning</code>.</p> input face <p>A handle to the input face.</p> left <p>Index of the left glyph.</p> right <p>Index of the right glyph.</p> output avector <p>A kerning vector.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function always return distances in original PFR metrics units. This is unlike <code>FT_Get_Kerning</code> with the <code>FT_KERNING_UNSCALED</code> mode, which always returns distances converted to outline units.</p> <p>You can use the value of the <code>x_scale</code> and <code>y_scale</code> parameters returned by <code>FT_Get_PFR_Metrics</code> to scale these to device subpixels.</p>"},{"location":"ft2-pfr_fonts.html#ft_get_pfr_advance","title":"FT_Get_PFR_Advance","text":"<p>Defined in FT_PFR_H (freetype/ftpfr.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_PFR_Advance( FT_Face   face,\n                      FT_UInt   gindex,\n                      FT_Pos   *aadvance );\n</code></pre> <p>Return a given glyph advance, expressed in original metrics units, from a PFR font.</p> input face <p>A handle to the input face.</p> gindex <p>The glyph index.</p> output aadvance <p>The glyph advance in metrics units.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You can use the <code>x_scale</code> or <code>y_scale</code> results of <code>FT_Get_PFR_Metrics</code> to convert the advance to device subpixels (i.e., 1/64 of pixels).</p>"},{"location":"ft2-preamble.html","title":"Preamble","text":"<p>FreeType \u00bb Docs \u00bb General Remarks \u00bb Preamble</p>"},{"location":"ft2-preamble.html#preamble","title":"Preamble","text":""},{"location":"ft2-preamble.html#synopsis","title":"Synopsis","text":"<p>FreeType is a library that provides access to glyphs in font files. It scales the glyph images and their metrics to a requested size, and it rasterizes the glyph images to produce pixel or subpixel alpha coverage bitmaps.</p> <p>Note that FreeType is not a text layout engine. You have to use higher-level libraries like HarfBuzz, Pango, or ICU for that.</p> <p>Note also that FreeType does not perform alpha blending or compositing the resulting bitmaps or pixmaps by itself. Use your favourite graphics library (for example, Cairo or Skia) to further process FreeType's output.</p>"},{"location":"ft2-properties.html","title":"Driver properties","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb Driver properties</p>"},{"location":"ft2-properties.html#driver-properties","title":"Driver properties","text":""},{"location":"ft2-properties.html#synopsis","title":"Synopsis","text":"<p>Driver modules can be controlled by setting and unsetting properties, using the functions <code>FT_Property_Set</code> and <code>FT_Property_Get</code>. This section documents the available properties, together with auxiliary macros and structures.</p>"},{"location":"ft2-properties.html#ft_hinting_xxx","title":"FT_HINTING_XXX","text":"<p>Defined in FT_DRIVER_H (freetype/ftdriver.h).</p> <pre><code>#define FT_HINTING_FREETYPE  0\n#define FT_HINTING_ADOBE     1\n\n  /* these constants (introduced in 2.4.12) are deprecated */\n#define FT_CFF_HINTING_FREETYPE  FT_HINTING_FREETYPE\n#define FT_CFF_HINTING_ADOBE     FT_HINTING_ADOBE\n</code></pre> <p>A list of constants used for the <code>hinting-engine</code> property to select the hinting engine for CFF, Type\u00a01, and CID fonts.</p> values FT_HINTING_FREETYPE <p>Use the old FreeType hinting engine.</p> FT_HINTING_ADOBE <p>Use the hinting engine contributed by Adobe.</p> since <p>2.9</p>"},{"location":"ft2-properties.html#hinting-engine","title":"hinting-engine","text":"<p>Thanks to Adobe, which contributed a new hinting (and parsing) engine, an application can select between \u2018freetype\u2019 and \u2018adobe\u2019 if compiled with <code>CFF_CONFIG_OPTION_OLD_ENGINE</code>. If this configuration macro isn't defined, \u2018hinting-engine\u2019 does nothing.</p> <p>The same holds for the Type\u00a01 and CID modules if compiled with <code>T1_CONFIG_OPTION_OLD_ENGINE</code>.</p> <p>For the \u2018cff\u2019 module, the default engine is \u2018adobe\u2019. For both the \u2018type1\u2019 and \u2018t1cid\u2019 modules, the default engine is \u2018adobe\u2019, too.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>This property can be set via the <code>FREETYPE_PROPERTIES</code> environment variable (using values \u2018adobe\u2019 or \u2018freetype\u2019).</p> example <p>The following example code demonstrates how to select Adobe's hinting engine for the \u2018cff\u2019 module (omitting the error handling). <pre><code>  FT_Library  library;\n  FT_UInt     hinting_engine = FT_HINTING_ADOBE;\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"cff\",\n                            \"hinting-engine\", &amp;hinting_engine );\n</code></pre></p> since <p>2.4.12 (for \u2018cff\u2019 module)</p> <p>2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)</p>"},{"location":"ft2-properties.html#no-stem-darkening","title":"no-stem-darkening","text":"<p>All glyphs that pass through the auto-hinter will be emboldened unless this property is set to TRUE. The same is true for the CFF, Type\u00a01, and CID font modules if the \u2018Adobe\u2019 engine is selected (which is the default).</p> <p>Stem darkening emboldens glyphs at smaller sizes to make them more readable on common low-DPI screens when using linear alpha blending and gamma correction, see <code>FT_Render_Glyph</code>. When not using linear alpha blending and gamma correction, glyphs will appear heavy and fuzzy!</p> <p>Gamma correction essentially lightens fonts since shades of grey are shifted to higher pixel values (=\u00a0higher brightness) to match the original intention to the reality of our screens. The side-effect is that glyphs \u2018thin out\u2019. Mac OS\u00a0X and Adobe's proprietary font rendering library implement a counter-measure: stem darkening at smaller sizes where shades of gray dominate. By emboldening a glyph slightly in relation to its pixel size, individual pixels get higher coverage of filled-in outlines and are therefore \u2018blacker\u2019. This counteracts the \u2018thinning out\u2019 of glyphs, making text remain readable at smaller sizes.</p> <p>For the auto-hinter, stem-darkening is experimental currently and thus switched off by default (that is, <code>no-stem-darkening</code> is set to TRUE by default). Total consistency with the CFF driver is not achieved right now because the emboldening method differs and glyphs must be scaled down on the Y-axis to keep outline points inside their precomputed blue zones. The smaller the size (especially 9ppem and down), the higher the loss of emboldening versus the CFF driver.</p> <p>Note that stem darkening is never applied if <code>FT_LOAD_NO_SCALE</code> is set.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>This property can be set via the <code>FREETYPE_PROPERTIES</code> environment variable (using values 1 and 0 for \u2018on\u2019 and \u2018off\u2019, respectively). It can also be set per face using <code>FT_Face_Properties</code> with <code>FT_PARAM_TAG_STEM_DARKENING</code>.</p> example <pre><code>  FT_Library  library;\n  FT_Bool     no_stem_darkening = TRUE;\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"cff\",\n                            \"no-stem-darkening\", &amp;no_stem_darkening );\n</code></pre> since <p>2.4.12 (for \u2018cff\u2019 module)</p> <p>2.6.2 (for \u2018autofitter\u2019 module)</p> <p>2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)</p>"},{"location":"ft2-properties.html#darkening-parameters","title":"darkening-parameters","text":"<p>By default, the Adobe hinting engine, as used by the CFF, Type\u00a01, and CID font drivers, darkens stems as follows (if the <code>no-stem-darkening</code> property isn't set): <pre><code>  stem width &lt;= 0.5px:   darkening amount = 0.4px\n  stem width  = 1px:     darkening amount = 0.275px\n  stem width  = 1.667px: darkening amount = 0.275px\n  stem width &gt;= 2.333px: darkening amount = 0px\n</code></pre></p> <p>and piecewise linear in-between. At configuration time, these four control points can be set with the macro <code>CFF_CONFIG_OPTION_DARKENING_PARAMETERS</code>; the CFF, Type\u00a01, and CID drivers share these values. At runtime, the control points can be changed using the <code>darkening-parameters</code> property (see the example below that demonstrates this for the Type\u00a01 driver).</p> <p>The x\u00a0values give the stem width, and the y\u00a0values the darkening amount. The unit is 1000<sup>th</sup> of pixels. All coordinate values must be positive; the x\u00a0values must be monotonically increasing; the y\u00a0values must be monotonically decreasing and smaller than or equal to 500 (corresponding to half a pixel); the slope of each linear piece must be shallower than -1 (e.g., -.4).</p> <p>The auto-hinter provides this property, too, as an experimental feature. See <code>no-stem-darkening</code> for more.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>This property can be set via the <code>FREETYPE_PROPERTIES</code> environment variable, using eight comma-separated integers without spaces. Here the above example, using <code>\\</code> to break the line for readability. <pre><code>  FREETYPE_PROPERTIES=\\\n  type1:darkening-parameters=500,300,1000,200,1500,100,2000,0\n</code></pre></p> example <pre><code>  FT_Library  library;\n  FT_Int      darken_params[8] = {  500, 300,   // x1, y1\n                                   1000, 200,   // x2, y2\n                                   1500, 100,   // x3, y3\n                                   2000,   0 }; // x4, y4\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"type1\",\n                            \"darkening-parameters\", darken_params );\n</code></pre> since <p>2.5.1 (for \u2018cff\u2019 module)</p> <p>2.6.2 (for \u2018autofitter\u2019 module)</p> <p>2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)</p>"},{"location":"ft2-properties.html#random-seed","title":"random-seed","text":"<p>By default, the seed value for the CFF \u2018random\u2019 operator and the similar \u20180 28 callothersubr pop\u2019 command for the Type\u00a01 and CID drivers is set to a random value. However, mainly for debugging purposes, it is often necessary to use a known value as a seed so that the pseudo-random number sequences generated by \u2018random\u2019 are repeatable.</p> <p>The <code>random-seed</code> property does that. Its argument is a signed 32bit integer; if the value is zero or negative, the seed given by the <code>intitialRandomSeed</code> private DICT operator in a CFF file gets used (or a default value if there is no such operator). If the value is positive, use it instead of <code>initialRandomSeed</code>, which is consequently ignored.</p> note <p>This property can be set via the <code>FREETYPE_PROPERTIES</code> environment variable. It can also be set per face using <code>FT_Face_Properties</code> with <code>FT_PARAM_TAG_RANDOM_SEED</code>.</p> since <p>2.8 (for \u2018cff\u2019 module)</p> <p>2.9 (for \u2018type1\u2019 and \u2018t1cid\u2019 modules)</p>"},{"location":"ft2-properties.html#no-long-family-names","title":"no-long-family-names","text":"<p>If <code>PCF_CONFIG_OPTION_LONG_FAMILY_NAMES</code> is active while compiling FreeType, the PCF driver constructs long family names.</p> <p>There are many PCF fonts just called \u2018Fixed\u2019 which look completely different, and which have nothing to do with each other. When selecting \u2018Fixed\u2019 in KDE or Gnome one gets results that appear rather random, the style changes often if one changes the size and one cannot select some fonts at all. The improve this situation, the PCF module prepends the foundry name (plus a space) to the family name. It also checks whether there are \u2018wide\u2019 characters; all put together, family names like \u2018Sony Fixed\u2019 or \u2018Misc Fixed Wide\u2019 are constructed.</p> <p>If <code>no-long-family-names</code> is set, this feature gets switched off.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>This property can be set via the <code>FREETYPE_PROPERTIES</code> environment variable (using values 1 and 0 for \u2018on\u2019 and \u2018off\u2019, respectively).</p> example <pre><code>  FT_Library  library;\n  FT_Bool     no_long_family_names = TRUE;\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"pcf\",\n                            \"no-long-family-names\",\n                            &amp;no_long_family_names );\n</code></pre> since <p>2.8</p>"},{"location":"ft2-properties.html#tt_interpreter_version_xxx","title":"TT_INTERPRETER_VERSION_XXX","text":"<p>Defined in FT_DRIVER_H (freetype/ftdriver.h).</p> <pre><code>#define TT_INTERPRETER_VERSION_35  35\n#define TT_INTERPRETER_VERSION_38  38\n#define TT_INTERPRETER_VERSION_40  40\n</code></pre> <p>A list of constants used for the <code>interpreter-version</code> property to select the hinting engine for Truetype fonts.</p> <p>The numeric value in the constant names represents the version number as returned by the \u2018GETINFO\u2019 bytecode instruction.</p> values TT_INTERPRETER_VERSION_35 <p>Version\u00a035 corresponds to MS rasterizer v.1.7 as used e.g. in Windows\u00a098; only grayscale and B/W rasterizing is supported.</p> TT_INTERPRETER_VERSION_38 <p>Version\u00a038 is the same Version\u00a040. The original \u2018Infinality\u2019 code is no longer available.</p> TT_INTERPRETER_VERSION_40 <p>Version\u00a040 corresponds to MS rasterizer v.2.1; it is roughly equivalent to the hinting provided by DirectWrite ClearType (as can be found, for example, in Microsoft's Edge Browser on Windows\u00a010). It is used in FreeType to select the \u2018minimal\u2019 subpixel hinting code, a stripped-down and higher performance version of the \u2018Infinality\u2019 code.</p> note <p>This property controls the behaviour of the bytecode interpreter and thus how outlines get hinted. It does not control how glyph get rasterized! In particular, it does not control subpixel color filtering.</p> <p>If FreeType has not been compiled with the configuration option <code>TT_CONFIG_OPTION_SUBPIXEL_HINTING</code>, selecting version\u00a038 or\u00a040 causes an <code>FT_Err_Unimplemented_Feature</code> error.</p> <p>Depending on the graphics framework, Microsoft uses different bytecode and rendering engines. As a consequence, the version numbers returned by a call to the \u2018GETINFO\u2019 bytecode instruction are more convoluted than desired.</p> <p>Here are two tables that try to shed some light on the possible values for the MS rasterizer engine, together with the additional features introduced by it. <pre><code>  GETINFO framework               version feature\n  -------------------------------------------------------------------\n      3   GDI (Win 3.1),            v1.0  16-bit, first version\n          TrueImage\n     33   GDI (Win NT 3.1),         v1.5  32-bit\n          HP Laserjet\n     34   GDI (Win 95)              v1.6  font smoothing,\n                                          new SCANTYPE opcode\n     35   GDI (Win 98/2000)         v1.7  (UN)SCALED_COMPONENT_OFFSET\n                                            bits in composite glyphs\n     36   MGDI (Win CE 2)           v1.6+ classic ClearType\n     37   GDI (XP and later),       v1.8  ClearType\n          GDI+ old (before Vista)\n     38   GDI+ old (Vista, Win 7),  v1.9  subpixel ClearType,\n          WPF                             Y-direction ClearType,\n                                          additional error checking\n     39   DWrite (before Win 8)     v2.0  subpixel ClearType flags\n                                            in GETINFO opcode,\n                                          bug fixes\n     40   GDI+ (after Win 7),       v2.1  Y-direction ClearType flag\n          DWrite (Win 8)                    in GETINFO opcode,\n                                          Gray ClearType\n</code></pre></p> <p>The \u2018version\u2019 field gives a rough orientation only, since some applications provided certain features much earlier (as an example, Microsoft Reader used subpixel and Y-direction ClearType already in Windows 2000). Similarly, updates to a given framework might include improved hinting support. <pre><code>   version   sampling          rendering        comment\n            x        y       x           y\n  --------------------------------------------------------------\n    v1.0   normal  normal  B/W           B/W    bi-level\n    v1.6   high    high    gray          gray   grayscale\n    v1.8   high    normal  color-filter  B/W    (GDI) ClearType\n    v1.9   high    high    color-filter  gray   Color ClearType\n    v2.1   high    normal  gray          B/W    Gray ClearType\n    v2.1   high    high    gray          gray   Gray ClearType\n</code></pre></p> <p>Color and Gray ClearType are the two available variants of \u2018Y-direction ClearType\u2019, meaning grayscale rasterization along the Y-direction; the name used in the TrueType specification for this feature is \u2018symmetric smoothing\u2019. \u2018Classic ClearType\u2019 is the original algorithm used before introducing a modified version in Win\u00a0XP. Another name for v1.6's grayscale rendering is \u2018font smoothing\u2019, and \u2018Color ClearType\u2019 is sometimes also called \u2018DWrite ClearType\u2019. To differentiate between today's Color ClearType and the earlier ClearType variant with B/W rendering along the vertical axis, the latter is sometimes called \u2018GDI ClearType\u2019.</p> <p>\u2018Normal\u2019 and \u2018high\u2019 sampling describe the (virtual) resolution to access the rasterized outline after the hinting process. \u2018Normal\u2019 means 1 sample per grid line (i.e., B/W). In the current Microsoft implementation, \u2018high\u2019 means an extra virtual resolution of 16x16 (or 16x1) grid lines per pixel for bytecode instructions like \u2018MIRP\u2019. After hinting, these 16 grid lines are mapped to 6x5 (or 6x1) grid lines for color filtering if Color ClearType is activated.</p> <p>Note that \u2018Gray ClearType\u2019 is essentially the same as v1.6's grayscale rendering. However, the GETINFO instruction handles it differently: v1.6 returns bit\u00a012 (hinting for grayscale), while v2.1 returns bits\u00a013 (hinting for ClearType), 18 (symmetrical smoothing), and\u00a019 (Gray ClearType). Also, this mode respects bits 2 and\u00a03 for the version\u00a01 gasp table exclusively (like Color ClearType), while v1.6 only respects the values of version\u00a00 (bits 0 and\u00a01).</p> <p>Keep in mind that the features of the above interpreter versions might not map exactly to FreeType features or behavior because it is a fundamentally different library with different internals.</p>"},{"location":"ft2-properties.html#interpreter-version","title":"interpreter-version","text":"<p>Currently, three versions are available, two representing the bytecode interpreter with subpixel hinting support (old \u2018Infinality\u2019 code and new stripped-down and higher performance \u2018minimal\u2019 code) and one without, respectively. The default is subpixel support if <code>TT_CONFIG_OPTION_SUBPIXEL_HINTING</code> is defined, and no subpixel support otherwise (since it isn't available then).</p> <p>If subpixel hinting is on, many TrueType bytecode instructions behave differently compared to B/W or grayscale rendering (except if \u2018native ClearType\u2019 is selected by the font). Microsoft's main idea is to render at a much increased horizontal resolution, then sampling down the created output to subpixel precision. However, many older fonts are not suited to this and must be specially taken care of by applying (hardcoded) tweaks in Microsoft's interpreter.</p> <p>Details on subpixel hinting and some of the necessary tweaks can be found in Greg Hitchcock's whitepaper at \u2018https://www.microsoft.com/typography/cleartype/truetypecleartype.aspx\u2019. Note that FreeType currently doesn't really \u2018subpixel hint\u2019 (6x1, 6x2, or 6x5 supersampling) like discussed in the paper. Depending on the chosen interpreter, it simply ignores instructions on vertical stems to arrive at very similar results.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>This property can be set via the <code>FREETYPE_PROPERTIES</code> environment variable (using values \u201835\u2019, \u201838\u2019, or \u201840\u2019).</p> example <p>The following example code demonstrates how to deactivate subpixel hinting (omitting the error handling). <pre><code>  FT_Library  library;\n  FT_Face     face;\n  FT_UInt     interpreter_version = TT_INTERPRETER_VERSION_35;\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"truetype\",\n                            \"interpreter-version\",\n                            &amp;interpreter_version );\n</code></pre></p> since <p>2.5</p>"},{"location":"ft2-properties.html#spread","title":"spread","text":"<p>This property of the \u2018sdf\u2019 and \u2018bsdf\u2019 renderers defines how the signed distance field (SDF) is represented in the output bitmap. The output values are calculated as follows, \u2018128 * ( SDF / spread + 1 )\u2019, with the result clamped to the 8-bit range [0..255]. Therefore, \u2018spread\u2019 is also the maximum euclidean distance from the edge after which the values are clamped. The spread is specified in pixels with the default value of 8. For accurate SDF texture mapping (interpolation), the spread should be large enough to accommodate the target grid unit.</p> example <p>The following example code demonstrates how to set the SDF spread (omitting the error handling). <pre><code>  FT_Library  library;\n  FT_Int      spread = 2;\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"sdf\", \"spread\", &amp;spread );\n</code></pre></p> note <p>FreeType has two rasterizers for generating SDF, namely:</p> <ol> <li> <p><code>sdf</code> for generating SDF directly from glyph's outline, and</p> </li> <li> <p><code>bsdf</code> for generating SDF from rasterized bitmaps.</p> </li> </ol> <p>Depending on the glyph type (i.e., outline or bitmap), one of the two rasterizers is chosen at runtime and used for generating SDFs. To force the use of <code>bsdf</code> you should render the glyph with any of the FreeType's other rendering modes (e.g., <code>FT_RENDER_MODE_NORMAL</code>) and then re-render with <code>FT_RENDER_MODE_SDF</code>.</p> <p>There are some issues with stability and possible failures of the SDF renderers (specifically <code>sdf</code>).</p> <ol> <li> <p>The <code>sdf</code> rasterizer is sensitive to really small features (e.g., sharp turns that are less than 1\u00a0pixel) and imperfections in the glyph's outline, causing artifacts in the final output.</p> </li> <li> <p>The <code>sdf</code> rasterizer has limited support for handling intersecting contours and cannot handle self-intersecting contours whatsoever. Self-intersection happens when a single connected contour intersects itself at some point; having these in your font definitely poses a problem to the rasterizer and cause artifacts, too.</p> </li> <li> <p>Generating SDF for really small glyphs may result in undesirable output; the pixel grid (which stores distance information) becomes too coarse.</p> </li> <li> <p>Since the output buffer is normalized, precision at smaller spreads is greater than precision at larger spread values because the output range of [0..255] gets mapped to a smaller SDF range. A spread of\u00a02 should be sufficient in most cases.</p> </li> </ol> <p>Points (1) and (2) can be avoided by using the <code>bsdf</code> rasterizer, which is more stable than the <code>sdf</code> rasterizer in general.</p> since <p>2.11</p>"},{"location":"ft2-properties.html#svg-hooks","title":"svg-hooks","text":"<p>Set up the interface between FreeType and an extern SVG rendering library like \u2018librsvg\u2019. All details on the function hooks can be found in section \u2018OpenType SVG Fonts\u2019.</p> example <p>The following example code expects that the four hook functions <code>svg_*</code> are defined elsewhere. Error handling is omitted, too. <pre><code>  FT_Library  library;\n  SVG_RendererHooks  hooks = {\n                       (SVG_Lib_Init_Func)svg_init,\n                       (SVG_Lib_Free_Func)svg_free,\n                       (SVG_Lib_Render_Func)svg_render,\n                       (SVG_Lib_Preset_Slot_Func)svg_preset_slot };\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"ot-svg\",\n                            \"svg-hooks\", &amp;hooks );\n</code></pre></p> since <p>2.12</p>"},{"location":"ft2-properties.html#glyph-to-script-map","title":"glyph-to-script-map","text":"<p>Experimental only</p> <p>The auto-hinter provides various script modules to hint glyphs. Examples of supported scripts are Latin or CJK. Before a glyph is auto-hinted, the Unicode character map of the font gets examined, and the script is then determined based on Unicode character ranges, see below.</p> <p>OpenType fonts, however, often provide much more glyphs than character codes (small caps, superscripts, ligatures, swashes, etc.), to be controlled by so-called \u2018features\u2019. Handling OpenType features can be quite complicated and thus needs a separate library on top of FreeType.</p> <p>The mapping between glyph indices and scripts (in the auto-hinter sense, see the <code>FT_AUTOHINTER_SCRIPT_XXX</code> values) is stored as an array with <code>num_glyphs</code> elements, as found in the font's <code>FT_Face</code> structure. The <code>glyph-to-script-map</code> property returns a pointer to this array, which can be modified as needed. Note that the modification should happen before the first glyph gets processed by the auto-hinter so that the global analysis of the font shapes actually uses the modified mapping.</p> example <p>The following example code demonstrates how to access it (omitting the error handling). <pre><code>  FT_Library                library;\n  FT_Face                   face;\n  FT_Prop_GlyphToScriptMap  prop;\n\n\n  FT_Init_FreeType( &amp;library );\n  FT_New_Face( library, \"foo.ttf\", 0, &amp;face );\n\n  prop.face = face;\n\n  FT_Property_Get( library, \"autofitter\",\n                            \"glyph-to-script-map\", &amp;prop );\n\n  // adjust `prop.map' as needed right here\n\n  FT_Load_Glyph( face, ..., FT_LOAD_FORCE_AUTOHINT );\n</code></pre></p> since <p>2.4.11</p>"},{"location":"ft2-properties.html#ft_autohinter_script_xxx","title":"FT_AUTOHINTER_SCRIPT_XXX","text":"<p>Defined in FT_DRIVER_H (freetype/ftdriver.h).</p> <pre><code>#define FT_AUTOHINTER_SCRIPT_NONE   0\n#define FT_AUTOHINTER_SCRIPT_LATIN  1\n#define FT_AUTOHINTER_SCRIPT_CJK    2\n#define FT_AUTOHINTER_SCRIPT_INDIC  3\n</code></pre> <p>Experimental only</p> <p>A list of constants used for the <code>glyph-to-script-map</code> property to specify the script submodule the auto-hinter should use for hinting a particular glyph.</p> values FT_AUTOHINTER_SCRIPT_NONE <p>Don't auto-hint this glyph.</p> FT_AUTOHINTER_SCRIPT_LATIN <p>Apply the latin auto-hinter. For the auto-hinter, \u2018latin\u2019 is a very broad term, including Cyrillic and Greek also since characters from those scripts share the same design constraints.</p> <p>By default, characters from the following Unicode ranges are assigned to this submodule.</p> <pre><code>  U+0020 - U+007F  // Basic Latin (no control characters)\n  U+00A0 - U+00FF  // Latin-1 Supplement (no control characters)\n  U+0100 - U+017F  // Latin Extended-A\n  U+0180 - U+024F  // Latin Extended-B\n  U+0250 - U+02AF  // IPA Extensions\n  U+02B0 - U+02FF  // Spacing Modifier Letters\n  U+0300 - U+036F  // Combining Diacritical Marks\n  U+0370 - U+03FF  // Greek and Coptic\n  U+0400 - U+04FF  // Cyrillic\n  U+0500 - U+052F  // Cyrillic Supplement\n  U+1D00 - U+1D7F  // Phonetic Extensions\n  U+1D80 - U+1DBF  // Phonetic Extensions Supplement\n  U+1DC0 - U+1DFF  // Combining Diacritical Marks Supplement\n  U+1E00 - U+1EFF  // Latin Extended Additional\n  U+1F00 - U+1FFF  // Greek Extended\n  U+2000 - U+206F  // General Punctuation\n  U+2070 - U+209F  // Superscripts and Subscripts\n  U+20A0 - U+20CF  // Currency Symbols\n  U+2150 - U+218F  // Number Forms\n  U+2460 - U+24FF  // Enclosed Alphanumerics\n  U+2C60 - U+2C7F  // Latin Extended-C\n  U+2DE0 - U+2DFF  // Cyrillic Extended-A\n  U+2E00 - U+2E7F  // Supplemental Punctuation\n  U+A640 - U+A69F  // Cyrillic Extended-B\n  U+A720 - U+A7FF  // Latin Extended-D\n  U+FB00 - U+FB06  // Alphab. Present. Forms (Latin Ligatures)\n U+1D400 - U+1D7FF // Mathematical Alphanumeric Symbols\n U+1F100 - U+1F1FF // Enclosed Alphanumeric Supplement\n</code></pre> FT_AUTOHINTER_SCRIPT_CJK <p>Apply the CJK auto-hinter, covering Chinese, Japanese, Korean, old Vietnamese, and some other scripts.</p> <p>By default, characters from the following Unicode ranges are assigned to this submodule.</p> <pre><code>  U+1100 - U+11FF  // Hangul Jamo\n  U+2E80 - U+2EFF  // CJK Radicals Supplement\n  U+2F00 - U+2FDF  // Kangxi Radicals\n  U+2FF0 - U+2FFF  // Ideographic Description Characters\n  U+3000 - U+303F  // CJK Symbols and Punctuation\n  U+3040 - U+309F  // Hiragana\n  U+30A0 - U+30FF  // Katakana\n  U+3100 - U+312F  // Bopomofo\n  U+3130 - U+318F  // Hangul Compatibility Jamo\n  U+3190 - U+319F  // Kanbun\n  U+31A0 - U+31BF  // Bopomofo Extended\n  U+31C0 - U+31EF  // CJK Strokes\n  U+31F0 - U+31FF  // Katakana Phonetic Extensions\n  U+3200 - U+32FF  // Enclosed CJK Letters and Months\n  U+3300 - U+33FF  // CJK Compatibility\n  U+3400 - U+4DBF  // CJK Unified Ideographs Extension A\n  U+4DC0 - U+4DFF  // Yijing Hexagram Symbols\n  U+4E00 - U+9FFF  // CJK Unified Ideographs\n  U+A960 - U+A97F  // Hangul Jamo Extended-A\n  U+AC00 - U+D7AF  // Hangul Syllables\n  U+D7B0 - U+D7FF  // Hangul Jamo Extended-B\n  U+F900 - U+FAFF  // CJK Compatibility Ideographs\n  U+FE10 - U+FE1F  // Vertical forms\n  U+FE30 - U+FE4F  // CJK Compatibility Forms\n  U+FF00 - U+FFEF  // Halfwidth and Fullwidth Forms\n U+1B000 - U+1B0FF // Kana Supplement\n U+1D300 - U+1D35F // Tai Xuan Hing Symbols\n U+1F200 - U+1F2FF // Enclosed Ideographic Supplement\n U+20000 - U+2A6DF // CJK Unified Ideographs Extension B\n U+2A700 - U+2B73F // CJK Unified Ideographs Extension C\n U+2B740 - U+2B81F // CJK Unified Ideographs Extension D\n U+2F800 - U+2FA1F // CJK Compatibility Ideographs Supplement\n</code></pre> FT_AUTOHINTER_SCRIPT_INDIC <p>Apply the indic auto-hinter, covering all major scripts from the Indian sub-continent and some other related scripts like Thai, Lao, or Tibetan.</p> <p>By default, characters from the following Unicode ranges are assigned to this submodule.</p> <pre><code>  U+0900 - U+0DFF  // Indic Range\n  U+0F00 - U+0FFF  // Tibetan\n  U+1900 - U+194F  // Limbu\n  U+1B80 - U+1BBF  // Sundanese\n  U+A800 - U+A82F  // Syloti Nagri\n  U+ABC0 - U+ABFF  // Meetei Mayek\n U+11800 - U+118DF // Sharada\n</code></pre> <p>Note that currently Indic support is rudimentary only, missing blue zone support.</p> since <p>2.4.11</p>"},{"location":"ft2-properties.html#ft_prop_glyphtoscriptmap","title":"FT_Prop_GlyphToScriptMap","text":"<p>Defined in FT_DRIVER_H (freetype/ftdriver.h).</p> <pre><code>  typedef struct  FT_Prop_GlyphToScriptMap_\n  {\n    FT_Face     face;\n    FT_UShort*  map;\n\n  } FT_Prop_GlyphToScriptMap;\n</code></pre> <p>Experimental only</p> <p>The data exchange structure for the <code>glyph-to-script-map</code> property.</p> since <p>2.4.11</p>"},{"location":"ft2-properties.html#fallback-script","title":"fallback-script","text":"<p>Experimental only</p> <p>If no auto-hinter script module can be assigned to a glyph, a fallback script gets assigned to it (see also the <code>glyph-to-script-map</code> property). By default, this is <code>FT_AUTOHINTER_SCRIPT_CJK</code>. Using the <code>fallback-script</code> property, this fallback value can be changed.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>It's important to use the right timing for changing this value: The creation of the glyph-to-script map that eventually uses the fallback script value gets triggered either by setting or reading a face-specific property like <code>glyph-to-script-map</code>, or by auto-hinting any glyph from that face. In particular, if you have already created an <code>FT_Face</code> structure but not loaded any glyph (using the auto-hinter), a change of the fallback script will affect this face.</p> example <pre><code>  FT_Library  library;\n  FT_UInt     fallback_script = FT_AUTOHINTER_SCRIPT_NONE;\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"autofitter\",\n                            \"fallback-script\", &amp;fallback_script );\n</code></pre> since <p>2.4.11</p>"},{"location":"ft2-properties.html#default-script","title":"default-script","text":"<p>Experimental only</p> <p>If FreeType gets compiled with <code>FT_CONFIG_OPTION_USE_HARFBUZZ</code> to make the HarfBuzz library access OpenType features for getting better glyph coverages, this property sets the (auto-fitter) script to be used for the default (OpenType) script data of a font's GSUB table. Features for the default script are intended for all scripts not explicitly handled in GSUB; an example is a \u2018dlig\u2019 feature, containing the combination of the characters \u2018T\u2019, \u2018E\u2019, and \u2018L\u2019 to form a \u2018TEL\u2019 ligature.</p> <p>By default, this is <code>FT_AUTOHINTER_SCRIPT_LATIN</code>. Using the <code>default-script</code> property, this default value can be changed.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>It's important to use the right timing for changing this value: The creation of the glyph-to-script map that eventually uses the default script value gets triggered either by setting or reading a face-specific property like <code>glyph-to-script-map</code>, or by auto-hinting any glyph from that face. In particular, if you have already created an <code>FT_Face</code> structure but not loaded any glyph (using the auto-hinter), a change of the default script will affect this face.</p> example <pre><code>  FT_Library  library;\n  FT_UInt     default_script = FT_AUTOHINTER_SCRIPT_NONE;\n\n\n  FT_Init_FreeType( &amp;library );\n\n  FT_Property_Set( library, \"autofitter\",\n                            \"default-script\", &amp;default_script );\n</code></pre> since <p>2.5.3</p>"},{"location":"ft2-properties.html#increase-x-height","title":"increase-x-height","text":"<p>For ppem values in the range 6\u00a0&lt;= ppem &lt;= <code>increase-x-height</code>, round up the font's x\u00a0height much more often than normally. If the value is set to\u00a00, which is the default, this feature is switched off. Use this property to improve the legibility of small font sizes if necessary.</p> note <p>This property can be used with <code>FT_Property_Get</code> also.</p> <p>Set this value right after calling <code>FT_Set_Char_Size</code>, but before loading any glyph (using the auto-hinter).</p> example <pre><code>  FT_Library               library;\n  FT_Face                  face;\n  FT_Prop_IncreaseXHeight  prop;\n\n\n  FT_Init_FreeType( &amp;library );\n  FT_New_Face( library, \"foo.ttf\", 0, &amp;face );\n  FT_Set_Char_Size( face, 10 * 64, 0, 72, 0 );\n\n  prop.face  = face;\n  prop.limit = 14;\n\n  FT_Property_Set( library, \"autofitter\",\n                            \"increase-x-height\", &amp;prop );\n</code></pre> since <p>2.4.11</p>"},{"location":"ft2-properties.html#ft_prop_increasexheight","title":"FT_Prop_IncreaseXHeight","text":"<p>Defined in FT_DRIVER_H (freetype/ftdriver.h).</p> <pre><code>  typedef struct  FT_Prop_IncreaseXHeight_\n  {\n    FT_Face  face;\n    FT_UInt  limit;\n\n  } FT_Prop_IncreaseXHeight;\n</code></pre> <p>The data exchange structure for the <code>increase-x-height</code> property.</p>"},{"location":"ft2-properties.html#warping","title":"warping","text":"<p>Obsolete</p> <p>This property was always experimental and probably never worked correctly. It was entirely removed from the FreeType\u00a02 sources. This entry is only here for historical reference.</p> <p>Warping only worked in \u2018normal\u2019 auto-hinting mode replacing it. The idea of the code was to slightly scale and shift a glyph along the non-hinted dimension (which is usually the horizontal axis) so that as much of its segments were aligned (more or less) to the grid. To find out a glyph's optimal scaling and shifting value, various parameter combinations were tried and scored.</p> since <p>2.6</p>"},{"location":"ft2-quick_advance.html","title":"Quick retrieval of advance values","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb Quick retrieval of advance values</p>"},{"location":"ft2-quick_advance.html#quick-retrieval-of-advance-values","title":"Quick retrieval of advance values","text":""},{"location":"ft2-quick_advance.html#synopsis","title":"Synopsis","text":"<p>This section contains functions to quickly extract advance values without handling glyph outlines, if possible.</p>"},{"location":"ft2-quick_advance.html#ft_get_advance","title":"FT_Get_Advance","text":"<p>Defined in FT_ADVANCES_H (freetype/ftadvanc.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Advance( FT_Face    face,\n                  FT_UInt    gindex,\n                  FT_Int32   load_flags,\n                  FT_Fixed  *padvance );\n</code></pre> <p>Retrieve the advance value of a given glyph outline in an <code>FT_Face</code>.</p> input face <p>The source <code>FT_Face</code> handle.</p> gindex <p>The glyph index.</p> load_flags <p>A set of bit flags similar to those used when calling <code>FT_Load_Glyph</code>, used to determine what kind of advances you need.</p> output padvance <p>The advance value. If scaling is performed (based on the value of <code>load_flags</code>), the advance value is in 16.16 format. Otherwise, it is in font units.</p> <p>If <code>FT_LOAD_VERTICAL_LAYOUT</code> is set, this is the vertical advance corresponding to a vertical layout. Otherwise, it is the horizontal advance in a horizontal layout.</p> return <p>FreeType error code. 0 means success.</p> note <p>This function may fail if you use <code>FT_ADVANCE_FLAG_FAST_ONLY</code> and if the corresponding font backend doesn't have a quick way to retrieve the advances.</p> <p>A scaled advance is returned in 16.16 format but isn't transformed by the affine transformation specified by <code>FT_Set_Transform</code>.</p>"},{"location":"ft2-quick_advance.html#ft_get_advances","title":"FT_Get_Advances","text":"<p>Defined in FT_ADVANCES_H (freetype/ftadvanc.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Advances( FT_Face    face,\n                   FT_UInt    start,\n                   FT_UInt    count,\n                   FT_Int32   load_flags,\n                   FT_Fixed  *padvances );\n</code></pre> <p>Retrieve the advance values of several glyph outlines in an <code>FT_Face</code>.</p> input face <p>The source <code>FT_Face</code> handle.</p> start <p>The first glyph index.</p> count <p>The number of advance values you want to retrieve.</p> load_flags <p>A set of bit flags similar to those used when calling <code>FT_Load_Glyph</code>.</p> output padvance <p>The advance values. This array, to be provided by the caller, must contain at least <code>count</code> elements.</p> <p>If scaling is performed (based on the value of <code>load_flags</code>), the advance values are in 16.16 format. Otherwise, they are in font units.</p> <p>If <code>FT_LOAD_VERTICAL_LAYOUT</code> is set, these are the vertical advances corresponding to a vertical layout. Otherwise, they are the horizontal advances in a horizontal layout.</p> return <p>FreeType error code. 0 means success.</p> note <p>This function may fail if you use <code>FT_ADVANCE_FLAG_FAST_ONLY</code> and if the corresponding font backend doesn't have a quick way to retrieve the advances.</p> <p>Scaled advances are returned in 16.16 format but aren't transformed by the affine transformation specified by <code>FT_Set_Transform</code>.</p>"},{"location":"ft2-quick_advance.html#ft_advance_flag_fast_only","title":"FT_ADVANCE_FLAG_FAST_ONLY","text":"<p>Defined in FT_ADVANCES_H (freetype/ftadvanc.h).</p> <pre><code>#define FT_ADVANCE_FLAG_FAST_ONLY  0x20000000L\n</code></pre> <p>A bit-flag to be OR-ed with the <code>flags</code> parameter of the <code>FT_Get_Advance</code> and <code>FT_Get_Advances</code> functions.</p> <p>If set, it indicates that you want these functions to fail if the corresponding hinting mode or font driver doesn't allow for very quick advance computation.</p> <p>Typically, glyphs that are either unscaled, unhinted, bitmapped, or light-hinted can have their advance width computed very quickly.</p> <p>Normal and bytecode hinted modes that require loading, scaling, and hinting of the glyph outline, are extremely slow by comparison.</p>"},{"location":"ft2-raster.html","title":"Scanline Converter","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb Scanline Converter</p>"},{"location":"ft2-raster.html#scanline-converter","title":"Scanline Converter","text":""},{"location":"ft2-raster.html#synopsis","title":"Synopsis","text":"<p>A raster or a rasterizer is a scan converter in charge of producing a pixel coverage bitmap that can be used as an alpha channel when compositing a glyph with a background. FreeType comes with two rasterizers: bilevel <code>raster1</code> and anti-aliased <code>smooth</code> are two separate modules. They are usually called from the high-level <code>FT_Load_Glyph</code> or <code>FT_Render_Glyph</code> functions and produce the entire coverage bitmap at once, while staying largely invisible to users.</p> <p>Instead of working with complete coverage bitmaps, it is also possible to intercept consecutive pixel runs on the same scanline with the same coverage, called spans, and process them individually. Only the <code>smooth</code> rasterizer permits this when calling <code>FT_Outline_Render</code> with <code>FT_Raster_Params</code> as described below.</p> <p>Working with either complete bitmaps or spans it is important to think of them as colorless coverage objects suitable as alpha channels to blend arbitrary colors with a background. For best results, it is recommended to use gamma correction, too.</p> <p>This section also describes the public API needed to set up alternative <code>FT_Renderer</code> modules.</p>"},{"location":"ft2-raster.html#ft_span","title":"FT_Span","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_Span_\n  {\n    short           x;\n    unsigned short  len;\n    unsigned char   coverage;\n\n  } FT_Span;\n</code></pre> <p>A structure to model a single span of consecutive pixels when rendering an anti-aliased bitmap.</p> fields x <p>The span's horizontal start position.</p> len <p>The span's length in pixels.</p> coverage <p>The span color/coverage, ranging from 0 (background) to 255 (foreground).</p> note <p>This structure is used by the span drawing callback type named <code>FT_SpanFunc</code> that takes the y\u00a0coordinate of the span as a parameter.</p> <p>The anti-aliased rasterizer produces coverage values from 0 to 255, that is, from completely transparent to completely opaque.</p>"},{"location":"ft2-raster.html#ft_spanfunc","title":"FT_SpanFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef void\n  (*FT_SpanFunc)( int             y,\n                  int             count,\n                  const FT_Span*  spans,\n                  void*           user );\n\n#define FT_Raster_Span_Func  FT_SpanFunc\n</code></pre> <p>A function used as a call-back by the anti-aliased renderer in order to let client applications draw themselves the pixel spans on each scan line.</p> input y <p>The scanline's upward y\u00a0coordinate.</p> count <p>The number of spans to draw on this scanline.</p> spans <p>A table of <code>count</code> spans to draw on the scanline.</p> user <p>User-supplied data that is passed to the callback.</p> note <p>This callback allows client applications to directly render the spans of the anti-aliased bitmap to any kind of surfaces.</p> <p>This can be used to write anti-aliased outlines directly to a given background bitmap using alpha compositing. It can also be used for oversampling and averaging.</p>"},{"location":"ft2-raster.html#ft_raster_params","title":"FT_Raster_Params","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_Raster_Params_\n  {\n    const FT_Bitmap*        target;\n    const void*             source;\n    int                     flags;\n    FT_SpanFunc             gray_spans;\n    FT_SpanFunc             black_spans;  /* unused */\n    FT_Raster_BitTest_Func  bit_test;     /* unused */\n    FT_Raster_BitSet_Func   bit_set;      /* unused */\n    void*                   user;\n    FT_BBox                 clip_box;\n\n  } FT_Raster_Params;\n</code></pre> <p>A structure to hold the parameters used by a raster's render function, passed as an argument to <code>FT_Outline_Render</code>.</p> fields target <p>The target bitmap.</p> source <p>A pointer to the source glyph image (e.g., an <code>FT_Outline</code>).</p> flags <p>The rendering flags.</p> gray_spans <p>The gray span drawing callback.</p> black_spans <p>Unused.</p> bit_test <p>Unused.</p> bit_set <p>Unused.</p> user <p>User-supplied data that is passed to each drawing callback.</p> clip_box <p>An optional span clipping box expressed in integer pixels (not in 26.6 fixed-point units).</p> note <p>The <code>FT_RASTER_FLAG_AA</code> bit flag must be set in the <code>flags</code> to generate an anti-aliased glyph bitmap, otherwise a monochrome bitmap is generated. The <code>target</code> should have appropriate pixel mode and its dimensions define the clipping region.</p> <p>If both <code>FT_RASTER_FLAG_AA</code> and <code>FT_RASTER_FLAG_DIRECT</code> bit flags are set in <code>flags</code>, the raster calls an <code>FT_SpanFunc</code> callback <code>gray_spans</code> with <code>user</code> data as an argument ignoring <code>target</code>. This allows direct composition over a pre-existing user surface to perform the span drawing and composition. To optionally clip the spans, set the <code>FT_RASTER_FLAG_CLIP</code> flag and <code>clip_box</code>. The monochrome raster does not support the direct mode.</p> <p>The gray-level rasterizer always uses 256 gray levels. If you want fewer gray levels, you have to use <code>FT_RASTER_FLAG_DIRECT</code> and reduce the levels in the callback function.</p>"},{"location":"ft2-raster.html#ft_raster_flag_xxx","title":"FT_RASTER_FLAG_XXX","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>#define FT_RASTER_FLAG_DEFAULT  0x0\n#define FT_RASTER_FLAG_AA       0x1\n#define FT_RASTER_FLAG_DIRECT   0x2\n#define FT_RASTER_FLAG_CLIP     0x4\n#define FT_RASTER_FLAG_SDF      0x8\n\n  /* these constants are deprecated; use the corresponding */\n  /* `FT_RASTER_FLAG_XXX` values instead                   */\n#define ft_raster_flag_default  FT_RASTER_FLAG_DEFAULT\n#define ft_raster_flag_aa       FT_RASTER_FLAG_AA\n#define ft_raster_flag_direct   FT_RASTER_FLAG_DIRECT\n#define ft_raster_flag_clip     FT_RASTER_FLAG_CLIP\n</code></pre> <p>A list of bit flag constants as used in the <code>flags</code> field of a <code>FT_Raster_Params</code> structure.</p> values FT_RASTER_FLAG_DEFAULT <p>This value is 0.</p> FT_RASTER_FLAG_AA <p>This flag is set to indicate that an anti-aliased glyph image should be generated. Otherwise, it will be monochrome (1-bit).</p> FT_RASTER_FLAG_DIRECT <p>This flag is set to indicate direct rendering. In this mode, client applications must provide their own span callback. This lets them directly draw or compose over an existing bitmap. If this bit is not set, the target pixmap's buffer must be zeroed before rendering and the output will be clipped to its size.</p> <p>Direct rendering is only possible with anti-aliased glyphs.</p> FT_RASTER_FLAG_CLIP <p>This flag is only used in direct rendering mode. If set, the output will be clipped to a box specified in the <code>clip_box</code> field of the <code>FT_Raster_Params</code> structure. Otherwise, the <code>clip_box</code> is effectively set to the bounding box and all spans are generated.</p> FT_RASTER_FLAG_SDF <p>This flag is set to indicate that a signed distance field glyph image should be generated. This is only used while rendering with the <code>FT_RENDER_MODE_SDF</code> render mode.</p>"},{"location":"ft2-raster.html#ft_raster","title":"FT_Raster","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct FT_RasterRec_*  FT_Raster;\n</code></pre> <p>An opaque handle (pointer) to a raster object. Each object can be used independently to convert an outline into a bitmap or pixmap.</p> note <p>In FreeType 2, all rasters are now encapsulated within specific <code>FT_Renderer</code> modules and only used in their context.</p>"},{"location":"ft2-raster.html#ft_raster_newfunc","title":"FT_Raster_NewFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Raster_NewFunc)( void*       memory,\n                        FT_Raster*  raster );\n\n#define FT_Raster_New_Func  FT_Raster_NewFunc\n</code></pre> <p>A function used to create a new raster object.</p> input memory <p>A handle to the memory allocator.</p> output raster <p>A handle to the new raster object.</p> return <p>Error code. 0\u00a0means success.</p> note <p>The <code>memory</code> parameter is a typeless pointer in order to avoid un-wanted dependencies on the rest of the FreeType code. In practice, it is an <code>FT_Memory</code> object, i.e., a handle to the standard FreeType memory allocator. However, this field can be completely ignored by a given raster implementation.</p>"},{"location":"ft2-raster.html#ft_raster_donefunc","title":"FT_Raster_DoneFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef void\n  (*FT_Raster_DoneFunc)( FT_Raster  raster );\n\n#define FT_Raster_Done_Func  FT_Raster_DoneFunc\n</code></pre> <p>A function used to destroy a given raster object.</p> input raster <p>A handle to the raster object.</p>"},{"location":"ft2-raster.html#ft_raster_resetfunc","title":"FT_Raster_ResetFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef void\n  (*FT_Raster_ResetFunc)( FT_Raster       raster,\n                          unsigned char*  pool_base,\n                          unsigned long   pool_size );\n\n#define FT_Raster_Reset_Func  FT_Raster_ResetFunc\n</code></pre> <p>FreeType used to provide an area of memory called the \u2018render pool\u2019 available to all registered rasterizers. This was not thread safe, however, and now FreeType never allocates this pool.</p> <p>This function is called after a new raster object is created.</p> input raster <p>A handle to the new raster object.</p> pool_base <p>Previously, the address in memory of the render pool. Set this to <code>NULL</code>.</p> pool_size <p>Previously, the size in bytes of the render pool. Set this to 0.</p> note <p>Rasterizers should rely on dynamic or stack allocation if they want to (a handle to the memory allocator is passed to the rasterizer constructor).</p>"},{"location":"ft2-raster.html#ft_raster_setmodefunc","title":"FT_Raster_SetModeFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Raster_SetModeFunc)( FT_Raster      raster,\n                            unsigned long  mode,\n                            void*          args );\n\n#define FT_Raster_Set_Mode_Func  FT_Raster_SetModeFunc\n</code></pre> <p>This function is a generic facility to change modes or attributes in a given raster. This can be used for debugging purposes, or simply to allow implementation-specific \u2018features\u2019 in a given raster module.</p> input raster <p>A handle to the new raster object.</p> mode <p>A 4-byte tag used to name the mode or property.</p> args <p>A pointer to the new mode/property to use.</p>"},{"location":"ft2-raster.html#ft_raster_renderfunc","title":"FT_Raster_RenderFunc","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Raster_RenderFunc)( FT_Raster                raster,\n                           const FT_Raster_Params*  params );\n\n#define FT_Raster_Render_Func  FT_Raster_RenderFunc\n</code></pre> <p>Invoke a given raster to scan-convert a given glyph image into a target bitmap.</p> input raster <p>A handle to the raster object.</p> params <p>A pointer to an <code>FT_Raster_Params</code> structure used to store the rendering parameters.</p> return <p>Error code. 0\u00a0means success.</p> note <p>The exact format of the source image depends on the raster's glyph format defined in its <code>FT_Raster_Funcs</code> structure. It can be an <code>FT_Outline</code> or anything else in order to support a large array of glyph formats.</p> <p>Note also that the render function can fail and return a <code>FT_Err_Unimplemented_Feature</code> error code if the raster used does not support direct composition.</p>"},{"location":"ft2-raster.html#ft_raster_funcs","title":"FT_Raster_Funcs","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef struct  FT_Raster_Funcs_\n  {\n    FT_Glyph_Format        glyph_format;\n\n    FT_Raster_NewFunc      raster_new;\n    FT_Raster_ResetFunc    raster_reset;\n    FT_Raster_SetModeFunc  raster_set_mode;\n    FT_Raster_RenderFunc   raster_render;\n    FT_Raster_DoneFunc     raster_done;\n\n  } FT_Raster_Funcs;\n</code></pre> <p>A structure used to describe a given raster class to the library.</p> fields glyph_format <p>The supported glyph format for this raster.</p> raster_new <p>The raster constructor.</p> raster_reset <p>Used to reset the render pool within the raster.</p> raster_render <p>A function to render a glyph into a given bitmap.</p> raster_done <p>The raster destructor.</p>"},{"location":"ft2-raster.html#ft_raster_bittest_func","title":"FT_Raster_BitTest_Func","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef int\n  (*FT_Raster_BitTest_Func)( int    y,\n                             int    x,\n                             void*  user );\n</code></pre> <p>Deprecated, unimplemented.</p>"},{"location":"ft2-raster.html#ft_raster_bitset_func","title":"FT_Raster_BitSet_Func","text":"<p>Defined in FT_IMAGE_H (freetype/ftimage.h).</p> <pre><code>  typedef void\n  (*FT_Raster_BitSet_Func)( int    y,\n                            int    x,\n                            void*  user );\n</code></pre> <p>Deprecated, unimplemented.</p>"},{"location":"ft2-sfnt_names.html","title":"SFNT Names","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb SFNT Names</p>"},{"location":"ft2-sfnt_names.html#sfnt-names","title":"SFNT Names","text":""},{"location":"ft2-sfnt_names.html#synopsis","title":"Synopsis","text":"<p>The TrueType and OpenType specifications allow the inclusion of a special names table (\u2018name\u2019) in font files. This table contains textual (and internationalized) information regarding the font, like family name, copyright, version, etc.</p> <p>The definitions below are used to access them if available.</p> <p>Note that this has nothing to do with glyph names!</p>"},{"location":"ft2-sfnt_names.html#ft_sfntname","title":"FT_SfntName","text":"<p>Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).</p> <pre><code>  typedef struct  FT_SfntName_\n  {\n    FT_UShort  platform_id;\n    FT_UShort  encoding_id;\n    FT_UShort  language_id;\n    FT_UShort  name_id;\n\n    FT_Byte*   string;      /* this string is *not* null-terminated! */\n    FT_UInt    string_len;  /* in bytes                              */\n\n  } FT_SfntName;\n</code></pre> <p>A structure used to model an SFNT \u2018name\u2019 table entry.</p> fields platform_id <p>The platform ID for <code>string</code>. See <code>TT_PLATFORM_XXX</code> for possible values.</p> encoding_id <p>The encoding ID for <code>string</code>. See <code>TT_APPLE_ID_XXX</code>, <code>TT_MAC_ID_XXX</code>, <code>TT_ISO_ID_XXX</code>, <code>TT_MS_ID_XXX</code>, and <code>TT_ADOBE_ID_XXX</code> for possible values.</p> language_id <p>The language ID for <code>string</code>. See <code>TT_MAC_LANGID_XXX</code> and <code>TT_MS_LANGID_XXX</code> for possible values.</p> <p>Registered OpenType values for <code>language_id</code> are always smaller than 0x8000; values equal or larger than 0x8000 usually indicate a language tag string (introduced in OpenType version 1.6). Use function <code>FT_Get_Sfnt_LangTag</code> with <code>language_id</code> as its argument to retrieve the associated language tag.</p> name_id <p>An identifier for <code>string</code>. See <code>TT_NAME_ID_XXX</code> for possible values.</p> string <p>The \u2018name\u2019 string. Note that its format differs depending on the (platform,encoding) pair, being either a string of bytes (without a terminating <code>NULL</code> byte) or containing UTF-16BE entities.</p> string_len <p>The length of <code>string</code> in bytes.</p> note <p>Please refer to the TrueType or OpenType specification for more details.</p>"},{"location":"ft2-sfnt_names.html#ft_get_sfnt_name_count","title":"FT_Get_Sfnt_Name_Count","text":"<p>Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).</p> <pre><code>  FT_EXPORT( FT_UInt )\n  FT_Get_Sfnt_Name_Count( FT_Face  face );\n</code></pre> <p>Retrieve the number of name strings in the SFNT \u2018name\u2019 table.</p> input face <p>A handle to the source face.</p> return <p>The number of strings in the \u2018name\u2019 table.</p> note <p>This function always returns an error if the config macro <code>TT_CONFIG_OPTION_SFNT_NAMES</code> is not defined in <code>ftoption.h</code>.</p>"},{"location":"ft2-sfnt_names.html#ft_get_sfnt_name","title":"FT_Get_Sfnt_Name","text":"<p>Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Sfnt_Name( FT_Face       face,\n                    FT_UInt       idx,\n                    FT_SfntName  *aname );\n</code></pre> <p>Retrieve a string of the SFNT \u2018name\u2019 table for a given index.</p> input face <p>A handle to the source face.</p> idx <p>The index of the \u2018name\u2019 string.</p> output aname <p>The indexed <code>FT_SfntName</code> structure.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The <code>string</code> array returned in the <code>aname</code> structure is not null-terminated. Note that you don't have to deallocate <code>string</code> by yourself; FreeType takes care of it if you call <code>FT_Done_Face</code>.</p> <p>Use <code>FT_Get_Sfnt_Name_Count</code> to get the total number of available \u2018name\u2019 table entries, then do a loop until you get the right platform, encoding, and name ID.</p> <p>\u2018name\u2019 table format\u00a01 entries can use language tags also, see <code>FT_Get_Sfnt_LangTag</code>.</p> <p>This function always returns an error if the config macro <code>TT_CONFIG_OPTION_SFNT_NAMES</code> is not defined in <code>ftoption.h</code>.</p>"},{"location":"ft2-sfnt_names.html#ft_sfntlangtag","title":"FT_SfntLangTag","text":"<p>Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).</p> <pre><code>  typedef struct  FT_SfntLangTag_\n  {\n    FT_Byte*  string;      /* this string is *not* null-terminated! */\n    FT_UInt   string_len;  /* in bytes                              */\n\n  } FT_SfntLangTag;\n</code></pre> <p>A structure to model a language tag entry from an SFNT \u2018name\u2019 table.</p> fields string <p>The language tag string, encoded in UTF-16BE (without trailing <code>NULL</code> bytes).</p> string_len <p>The length of <code>string</code> in bytes.</p> note <p>Please refer to the TrueType or OpenType specification for more details.</p> since <p>2.8</p>"},{"location":"ft2-sfnt_names.html#ft_get_sfnt_langtag","title":"FT_Get_Sfnt_LangTag","text":"<p>Defined in FT_SFNT_NAMES_H (freetype/ftsnames.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_Sfnt_LangTag( FT_Face          face,\n                       FT_UInt          langID,\n                       FT_SfntLangTag  *alangTag );\n</code></pre> <p>Retrieve the language tag associated with a language ID of an SFNT \u2018name\u2019 table entry.</p> input face <p>A handle to the source face.</p> langID <p>The language ID, as returned by <code>FT_Get_Sfnt_Name</code>. This is always a value larger than 0x8000.</p> output alangTag <p>The language tag associated with the \u2018name\u2019 table entry's language ID.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The <code>string</code> array returned in the <code>alangTag</code> structure is not null-terminated. Note that you don't have to deallocate <code>string</code> by yourself; FreeType takes care of it if you call <code>FT_Done_Face</code>.</p> <p>Only \u2018name\u2019 table format\u00a01 supports language tags. For format\u00a00 tables, this function always returns FT_Err_Invalid_Table. For invalid format\u00a01 language ID values, FT_Err_Invalid_Argument is returned.</p> <p>This function always returns an error if the config macro <code>TT_CONFIG_OPTION_SFNT_NAMES</code> is not defined in <code>ftoption.h</code>.</p> since <p>2.8</p>"},{"location":"ft2-sizes_management.html","title":"Size Management","text":"<p>FreeType \u00bb Docs \u00bb Extended API \u00bb Size Management</p>"},{"location":"ft2-sizes_management.html#size-management","title":"Size Management","text":""},{"location":"ft2-sizes_management.html#synopsis","title":"Synopsis","text":"<p>When creating a new face object (e.g., with <code>FT_New_Face</code>), an <code>FT_Size</code> object is automatically created and used to store all pixel-size dependent information, available in the <code>face-&gt;size</code> field.</p> <p>It is however possible to create more sizes for a given face, mostly in order to manage several character pixel sizes of the same font family and style. See <code>FT_New_Size</code> and <code>FT_Done_Size</code>.</p> <p>Note that <code>FT_Set_Pixel_Sizes</code> and <code>FT_Set_Char_Size</code> only modify the contents of the current \u2018active\u2019 size; you thus need to use <code>FT_Activate_Size</code> to change it.</p> <p>99% of applications won't need the functions provided here, especially if they use the caching sub-system, so be cautious when using these.</p>"},{"location":"ft2-sizes_management.html#ft_new_size","title":"FT_New_Size","text":"<p>Defined in FT_SIZES_H (freetype/ftsizes.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_New_Size( FT_Face   face,\n               FT_Size*  size );\n</code></pre> <p>Create a new size object from a given face object.</p> input face <p>A handle to a parent face object.</p> output asize <p>A handle to a new size object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You need to call <code>FT_Activate_Size</code> in order to select the new size for upcoming calls to <code>FT_Set_Pixel_Sizes</code>, <code>FT_Set_Char_Size</code>, <code>FT_Load_Glyph</code>, <code>FT_Load_Char</code>, etc.</p>"},{"location":"ft2-sizes_management.html#ft_done_size","title":"FT_Done_Size","text":"<p>Defined in FT_SIZES_H (freetype/ftsizes.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Done_Size( FT_Size  size );\n</code></pre> <p>Discard a given size object. Note that <code>FT_Done_Face</code> automatically discards all size objects allocated with <code>FT_New_Size</code>.</p> input size <p>A handle to a target size object.</p> return <p>FreeType error code. 0\u00a0means success.</p>"},{"location":"ft2-sizes_management.html#ft_activate_size","title":"FT_Activate_Size","text":"<p>Defined in FT_SIZES_H (freetype/ftsizes.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Activate_Size( FT_Size  size );\n</code></pre> <p>Even though it is possible to create several size objects for a given face (see <code>FT_New_Size</code> for details), functions like <code>FT_Load_Glyph</code> or <code>FT_Load_Char</code> only use the one that has been activated last to determine the \u2018current character pixel size\u2019.</p> <p>This function can be used to \u2018activate\u2019 a previously created size object.</p> input size <p>A handle to a target size object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If <code>face</code> is the size's parent face object, this function changes the value of <code>face-&gt;size</code> to the input size handle.</p>"},{"location":"ft2-sizing_and_scaling.html","title":"Sizing and Scaling","text":"<p>FreeType \u00bb Docs \u00bb Core API \u00bb Sizing and Scaling</p>"},{"location":"ft2-sizing_and_scaling.html#sizing-and-scaling","title":"Sizing and Scaling","text":""},{"location":"ft2-sizing_and_scaling.html#synopsis","title":"Synopsis","text":"<p>The functions and structures collected in this section are related to selecting and manipulating the size of a font globally.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_size","title":"FT_Size","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_SizeRec_*  FT_Size;\n</code></pre> <p>A handle to an object that models a face scaled to a given character size.</p> note <p>An <code>FT_Face</code> has one active <code>FT_Size</code> object that is used by functions like <code>FT_Load_Glyph</code> to determine the scaling transformation that in turn is used to load and hint glyphs and metrics.</p> <p>A newly created <code>FT_Size</code> object contains only meaningless zero values. You must use <code>FT_Set_Char_Size</code>, <code>FT_Set_Pixel_Sizes</code>, <code>FT_Request_Size</code> or even <code>FT_Select_Size</code> to change the content (i.e., the scaling values) of the active <code>FT_Size</code>. Otherwise, the scaling and hinting will not be performed.</p> <p>You can use <code>FT_New_Size</code> to create additional size objects for a given <code>FT_Face</code>, but they won't be used by other functions until you activate it through <code>FT_Activate_Size</code>. Only one size can be activated at any given time per face.</p> also <p>See <code>FT_SizeRec</code> for the publicly accessible fields of a given size object.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_sizerec","title":"FT_SizeRec","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_SizeRec_\n  {\n    FT_Face           face;      /* parent face object              */\n    FT_Generic        generic;   /* generic pointer for client uses */\n    FT_Size_Metrics   metrics;   /* size metrics                    */\n    FT_Size_Internal  internal;\n\n  } FT_SizeRec;\n</code></pre> <p>FreeType root size class structure. A size object models a face object at a given size.</p> fields face <p>Handle to the parent face object.</p> generic <p>A typeless pointer, unused by the FreeType library or any of its drivers. It can be used by client applications to link their own data to each size object.</p> metrics <p>Metrics for this size object. This field is read-only.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_size_metrics","title":"FT_Size_Metrics","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_Size_Metrics_\n  {\n    FT_UShort  x_ppem;      /* horizontal pixels per EM               */\n    FT_UShort  y_ppem;      /* vertical pixels per EM                 */\n\n    FT_Fixed   x_scale;     /* scaling values used to convert font    */\n    FT_Fixed   y_scale;     /* units to 26.6 fractional pixels        */\n\n    FT_Pos     ascender;    /* ascender in 26.6 frac. pixels          */\n    FT_Pos     descender;   /* descender in 26.6 frac. pixels         */\n    FT_Pos     height;      /* text height in 26.6 frac. pixels       */\n    FT_Pos     max_advance; /* max horizontal advance, in 26.6 pixels */\n\n  } FT_Size_Metrics;\n</code></pre> <p>The size metrics structure gives the metrics of a size object.</p> fields x_ppem <p>The width of the scaled EM square in pixels, hence the term \u2018ppem\u2019 (pixels per EM). It is also referred to as \u2018nominal width\u2019.</p> y_ppem <p>The height of the scaled EM square in pixels, hence the term \u2018ppem\u2019 (pixels per EM). It is also referred to as \u2018nominal height\u2019.</p> x_scale <p>A 16.16 fractional scaling value to convert horizontal metrics from font units to 26.6 fractional pixels. Only relevant for scalable font formats.</p> y_scale <p>A 16.16 fractional scaling value to convert vertical metrics from font units to 26.6 fractional pixels. Only relevant for scalable font formats.</p> ascender <p>The ascender in 26.6 fractional pixels, rounded up to an integer value. See <code>FT_FaceRec</code> for the details.</p> descender <p>The descender in 26.6 fractional pixels, rounded down to an integer value. See <code>FT_FaceRec</code> for the details.</p> height <p>The height in 26.6 fractional pixels, rounded to an integer value. See <code>FT_FaceRec</code> for the details.</p> max_advance <p>The maximum advance width in 26.6 fractional pixels, rounded to an integer value. See <code>FT_FaceRec</code> for the details.</p> note <p>The scaling values, if relevant, are determined first during a size changing operation. The remaining fields are then set by the driver. For scalable formats, they are usually set to scaled values of the corresponding fields in <code>FT_FaceRec</code>. Some values like ascender or descender are rounded for historical reasons; more precise values (for outline fonts) can be derived by scaling the corresponding <code>FT_FaceRec</code> values manually, with code similar to the following. <pre><code>  scaled_ascender = FT_MulFix( face-&gt;ascender,\n                               size_metrics-&gt;y_scale );\n</code></pre></p> <p>Note that due to glyph hinting and the selected rendering mode these values are usually not exact; consequently, they must be treated as unreliable with an error margin of at least one pixel!</p> <p>Indeed, the only way to get the exact metrics is to render all glyphs. As this would be a definite performance hit, it is up to client applications to perform such computations.</p> <p>The <code>FT_Size_Metrics</code> structure is valid for bitmap fonts also.</p> <p>TrueType fonts with native bytecode hinting</p> <p>All applications that handle TrueType fonts with native hinting must be aware that TTFs expect different rounding of vertical font dimensions. The application has to cater for this, especially if it wants to rely on a TTF's vertical data (for example, to properly align box characters vertically).</p> <p>Only the application knows in advance that it is going to use native hinting for TTFs! FreeType, on the other hand, selects the hinting mode not at the time of creating an <code>FT_Size</code> object but much later, namely while calling <code>FT_Load_Glyph</code>.</p> <p>Here is some pseudo code that illustrates a possible solution. <pre><code>  font_format = FT_Get_Font_Format( face );\n\n  if ( !strcmp( font_format, \"TrueType\" ) &amp;&amp;\n       do_native_bytecode_hinting         )\n  {\n    ascender  = ROUND( FT_MulFix( face-&gt;ascender,\n                                  size_metrics-&gt;y_scale ) );\n    descender = ROUND( FT_MulFix( face-&gt;descender,\n                                  size_metrics-&gt;y_scale ) );\n  }\n  else\n  {\n    ascender  = size_metrics-&gt;ascender;\n    descender = size_metrics-&gt;descender;\n  }\n\n  height      = size_metrics-&gt;height;\n  max_advance = size_metrics-&gt;max_advance;\n</code></pre></p>"},{"location":"ft2-sizing_and_scaling.html#ft_bitmap_size","title":"FT_Bitmap_Size","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_Bitmap_Size_\n  {\n    FT_Short  height;\n    FT_Short  width;\n\n    FT_Pos    size;\n\n    FT_Pos    x_ppem;\n    FT_Pos    y_ppem;\n\n  } FT_Bitmap_Size;\n</code></pre> <p>This structure models the metrics of a bitmap strike (i.e., a set of glyphs for a given point size and resolution) in a bitmap font. It is used for the <code>available_sizes</code> field of <code>FT_Face</code>.</p> fields height <p>The vertical distance, in pixels, between two consecutive baselines. It is always positive.</p> width <p>The average width, in pixels, of all glyphs in the strike.</p> size <p>The nominal size of the strike in 26.6 fractional points. This field is not very useful.</p> x_ppem <p>The horizontal ppem (nominal width) in 26.6 fractional pixels.</p> y_ppem <p>The vertical ppem (nominal height) in 26.6 fractional pixels.</p> note <p>Windows FNT: The nominal size given in a FNT font is not reliable. If the driver finds it incorrect, it sets <code>size</code> to some calculated values, and <code>x_ppem</code> and <code>y_ppem</code> to the pixel width and height given in the font, respectively.</p> <p>TrueType embedded bitmaps: <code>size</code>, <code>width</code>, and <code>height</code> values are not contained in the bitmap strike itself. They are computed from the global font parameters.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_set_char_size","title":"FT_Set_Char_Size","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_Char_Size( FT_Face     face,\n                    FT_F26Dot6  char_width,\n                    FT_F26Dot6  char_height,\n                    FT_UInt     horz_resolution,\n                    FT_UInt     vert_resolution );\n</code></pre> <p>Call <code>FT_Request_Size</code> to request the nominal size (in points).</p> inout face <p>A handle to a target face object.</p> input char_width <p>The nominal width, in 26.6 fractional points.</p> char_height <p>The nominal height, in 26.6 fractional points.</p> horz_resolution <p>The horizontal resolution in dpi.</p> vert_resolution <p>The vertical resolution in dpi.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>While this function allows fractional points as input values, the resulting ppem value for the given resolution is always rounded to the nearest integer.</p> <p>If either the character width or height is zero, it is set equal to the other value.</p> <p>If either the horizontal or vertical resolution is zero, it is set equal to the other value.</p> <p>A character width or height smaller than 1pt is set to 1pt; if both resolution values are zero, they are set to 72dpi.</p> <p>Don't use this function if you are using the FreeType cache API.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_set_pixel_sizes","title":"FT_Set_Pixel_Sizes","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Set_Pixel_Sizes( FT_Face  face,\n                      FT_UInt  pixel_width,\n                      FT_UInt  pixel_height );\n</code></pre> <p>Call <code>FT_Request_Size</code> to request the nominal size (in pixels).</p> inout face <p>A handle to the target face object.</p> input pixel_width <p>The nominal width, in pixels.</p> pixel_height <p>The nominal height, in pixels.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>You should not rely on the resulting glyphs matching or being constrained to this pixel size. Refer to <code>FT_Request_Size</code> to understand how requested sizes relate to actual sizes.</p> <p>Don't use this function if you are using the FreeType cache API.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_request_size","title":"FT_Request_Size","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Request_Size( FT_Face          face,\n                   FT_Size_Request  req );\n</code></pre> <p>Resize the scale of the active <code>FT_Size</code> object in a face.</p> inout face <p>A handle to a target face object.</p> input req <p>A pointer to a <code>FT_Size_RequestRec</code>.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>Although drivers may select the bitmap strike matching the request, you should not rely on this if you intend to select a particular bitmap strike. Use <code>FT_Select_Size</code> instead in that case.</p> <p>The relation between the requested size and the resulting glyph size is dependent entirely on how the size is defined in the source face. The font designer chooses the final size of each glyph relative to this size. For more information refer to \u2018https://www.freetype.org/freetype2/docs/glyphs/glyphs-2.html\u2019.</p> <p>Contrary to <code>FT_Set_Char_Size</code>, this function doesn't have special code to normalize zero-valued widths, heights, or resolutions, which are treated as <code>FT_LOAD_NO_SCALE</code>.</p> <p>Don't use this function if you are using the FreeType cache API.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_select_size","title":"FT_Select_Size","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Select_Size( FT_Face  face,\n                  FT_Int   strike_index );\n</code></pre> <p>Select a bitmap strike. To be more precise, this function sets the scaling factors of the active <code>FT_Size</code> object in a face so that bitmaps from this particular strike are taken by <code>FT_Load_Glyph</code> and friends.</p> inout face <p>A handle to a target face object.</p> input strike_index <p>The index of the bitmap strike in the <code>available_sizes</code> field of <code>FT_FaceRec</code> structure.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>For bitmaps embedded in outline fonts it is common that only a subset of the available glyphs at a given ppem value is available. FreeType silently uses outlines if there is no bitmap for a given glyph index.</p> <p>For GX and OpenType variation fonts, a bitmap strike makes sense only if the default instance is active (that is, no glyph variation takes place); otherwise, FreeType simply ignores bitmap strikes. The same is true for all named instances that are different from the default instance.</p> <p>Don't use this function if you are using the FreeType cache API.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_size_request_type","title":"FT_Size_Request_Type","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef enum  FT_Size_Request_Type_\n  {\n    FT_SIZE_REQUEST_TYPE_NOMINAL,\n    FT_SIZE_REQUEST_TYPE_REAL_DIM,\n    FT_SIZE_REQUEST_TYPE_BBOX,\n    FT_SIZE_REQUEST_TYPE_CELL,\n    FT_SIZE_REQUEST_TYPE_SCALES,\n\n    FT_SIZE_REQUEST_TYPE_MAX\n\n  } FT_Size_Request_Type;\n</code></pre> <p>An enumeration type that lists the supported size request types, i.e., what input size (in font units) maps to the requested output size (in pixels, as computed from the arguments of <code>FT_Size_Request</code>).</p> values FT_SIZE_REQUEST_TYPE_NOMINAL <p>The nominal size. The <code>units_per_EM</code> field of <code>FT_FaceRec</code> is used to determine both scaling values.</p> <p>This is the standard scaling found in most applications. In particular, use this size request type for TrueType fonts if they provide optical scaling or something similar. Note, however, that <code>units_per_EM</code> is a rather abstract value which bears no relation to the actual size of the glyphs in a font.</p> FT_SIZE_REQUEST_TYPE_REAL_DIM <p>The real dimension. The sum of the <code>ascender</code> and (minus of) the <code>descender</code> fields of <code>FT_FaceRec</code> is used to determine both scaling values.</p> FT_SIZE_REQUEST_TYPE_BBOX <p>The font bounding box. The width and height of the <code>bbox</code> field of <code>FT_FaceRec</code> are used to determine the horizontal and vertical scaling value, respectively.</p> FT_SIZE_REQUEST_TYPE_CELL <p>The <code>max_advance_width</code> field of <code>FT_FaceRec</code> is used to determine the horizontal scaling value; the vertical scaling value is determined the same way as <code>FT_SIZE_REQUEST_TYPE_REAL_DIM</code> does. Finally, both scaling values are set to the smaller one. This type is useful if you want to specify the font size for, say, a window of a given dimension and 80x24 cells.</p> FT_SIZE_REQUEST_TYPE_SCALES <p>Specify the scaling values directly.</p> note <p>The above descriptions only apply to scalable formats. For bitmap formats, the behaviour is up to the driver.</p> <p>See the note section of <code>FT_Size_Metrics</code> if you wonder how size requesting relates to scaling values.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_size_requestrec","title":"FT_Size_RequestRec","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct  FT_Size_RequestRec_\n  {\n    FT_Size_Request_Type  type;\n    FT_Long               width;\n    FT_Long               height;\n    FT_UInt               horiResolution;\n    FT_UInt               vertResolution;\n\n  } FT_Size_RequestRec;\n</code></pre> <p>A structure to model a size request.</p> fields type <p>See <code>FT_Size_Request_Type</code>.</p> width <p>The desired width, given as a 26.6 fractional point value (with 72pt = 1in).</p> height <p>The desired height, given as a 26.6 fractional point value (with 72pt = 1in).</p> horiResolution <p>The horizontal resolution (dpi, i.e., pixels per inch). If set to zero, <code>width</code> is treated as a 26.6 fractional pixel value, which gets internally rounded to an integer.</p> vertResolution <p>The vertical resolution (dpi, i.e., pixels per inch). If set to zero, <code>height</code> is treated as a 26.6 fractional pixel value, which gets internally rounded to an integer.</p> note <p>If <code>width</code> is zero, the horizontal scaling value is set equal to the vertical scaling value, and vice versa.</p> <p>If <code>type</code> is <code>FT_SIZE_REQUEST_TYPE_SCALES</code>, <code>width</code> and <code>height</code> are interpreted directly as 16.16 fractional scaling values, without any further modification, and both <code>horiResolution</code> and <code>vertResolution</code> are ignored.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_size_request","title":"FT_Size_Request","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  typedef struct FT_Size_RequestRec_  *FT_Size_Request;\n</code></pre> <p>A handle to a size request structure.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_set_transform","title":"FT_Set_Transform","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Set_Transform( FT_Face     face,\n                    FT_Matrix*  matrix,\n                    FT_Vector*  delta );\n</code></pre> <p>Set the transformation that is applied to glyph images when they are loaded into a glyph slot through <code>FT_Load_Glyph</code>.</p> inout face <p>A handle to the source face object.</p> input matrix <p>A pointer to the transformation's 2x2 matrix. Use <code>NULL</code> for the identity matrix.</p> delta <p>A pointer to the translation vector. Use <code>NULL</code> for the null vector.</p> note <p>This function is provided as a convenience, but keep in mind that <code>FT_Matrix</code> coefficients are only 16.16 fixed-point values, which can limit the accuracy of the results. Using floating-point computations to perform the transform directly in client code instead will always yield better numbers.</p> <p>The transformation is only applied to scalable image formats after the glyph has been loaded. It means that hinting is unaltered by the transformation and is performed on the character size given in the last call to <code>FT_Set_Char_Size</code> or <code>FT_Set_Pixel_Sizes</code>.</p> <p>Note that this also transforms the <code>face.glyph.advance</code> field, but not the values in <code>face.glyph.metrics</code>.</p>"},{"location":"ft2-sizing_and_scaling.html#ft_get_transform","title":"FT_Get_Transform","text":"<p>Defined in FT_FREETYPE_H (freetype/freetype.h).</p> <pre><code>  FT_EXPORT( void )\n  FT_Get_Transform( FT_Face     face,\n                    FT_Matrix*  matrix,\n                    FT_Vector*  delta );\n</code></pre> <p>Return the transformation that is applied to glyph images when they are loaded into a glyph slot through <code>FT_Load_Glyph</code>. See <code>FT_Set_Transform</code> for more details.</p> input face <p>A handle to the source face object.</p> output matrix <p>A pointer to a transformation's 2x2 matrix. Set this to NULL if you are not interested in the value.</p> delta <p>A pointer to a translation vector. Set this to NULL if you are not interested in the value.</p> since <p>2.11</p>"},{"location":"ft2-svg_fonts.html","title":"OpenType SVG Fonts","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb OpenType SVG Fonts</p>"},{"location":"ft2-svg_fonts.html#opentype-svg-fonts","title":"OpenType SVG Fonts","text":""},{"location":"ft2-svg_fonts.html#synopsis","title":"Synopsis","text":"<p>This section describes the four hooks necessary to render SVG \u2018documents\u2019 that are contained in an OpenType font's \u2018SVG\u00a0\u2019 table.</p> <p>For more information on the implementation, see our standard hooks based on \u2018librsvg\u2019 in the FreeType Demo Programs repository.</p>"},{"location":"ft2-svg_fonts.html#svg_lib_init_func","title":"SVG_Lib_Init_Func","text":"<p>Defined in FT_OTSVG_H (freetype/otsvg.h).</p> <pre><code>  typedef FT_Error\n  (*SVG_Lib_Init_Func)( FT_Pointer  *data_pointer );\n</code></pre> <p>A callback that is called when the first OT-SVG glyph is rendered in the lifetime of an <code>FT_Library</code> object. In a typical implementation, one would want to allocate a structure and point the <code>data_pointer</code> to it and perform any library initializations that might be needed.</p> inout data_pointer <p>The SVG rendering module stores a pointer variable that can be used by clients to store any data that needs to be shared across different hooks. <code>data_pointer</code> is essentially a pointer to that pointer such that it can be written to as well as read from.</p> return <p>FreeType error code. 0 means success.</p> since <p>2.12</p>"},{"location":"ft2-svg_fonts.html#svg_lib_free_func","title":"SVG_Lib_Free_Func","text":"<p>Defined in FT_OTSVG_H (freetype/otsvg.h).</p> <pre><code>  typedef void\n  (*SVG_Lib_Free_Func)( FT_Pointer  *data_pointer );\n</code></pre> <p>A callback that is called when the <code>ot-svg</code> module is being freed. It is only called if the init hook was called earlier. This means that neither the init nor the free hook is called if no OT-SVG glyph is rendered.</p> <p>In a typical implementation, one would want to free any state structure that was allocated in the init hook and perform any library-related closure that might be needed.</p> inout data_pointer <p>The SVG rendering module stores a pointer variable that can be used by clients to store any data that needs to be shared across different hooks. <code>data_pointer</code> is essentially a pointer to that pointer such that it can be written to as well as read from.</p> since <p>2.12</p>"},{"location":"ft2-svg_fonts.html#svg_lib_render_func","title":"SVG_Lib_Render_Func","text":"<p>Defined in FT_OTSVG_H (freetype/otsvg.h).</p> <pre><code>  typedef FT_Error\n  (*SVG_Lib_Render_Func)( FT_GlyphSlot  slot,\n                          FT_Pointer   *data_pointer );\n</code></pre> <p>A callback that is called to render an OT-SVG glyph. This callback hook is called right after the preset hook <code>SVG_Lib_Preset_Slot_Func</code> has been called with <code>cache</code> set to <code>TRUE</code>. The data necessary to render is available through the handle <code>FT_SVG_Document</code>, which is set in the <code>other</code> field of <code>FT_GlyphSlotRec</code>.</p> <p>The render hook is expected to render the SVG glyph to the bitmap buffer that is allocated already at <code>slot-&gt;bitmap.buffer</code>. It also sets the <code>num_grays</code> value as well as <code>slot-&gt;format</code>.</p> input slot <p>The slot to render.</p> inout data_pointer <p>The SVG rendering module stores a pointer variable that can be used by clients to store any data that needs to be shared across different hooks. <code>data_pointer</code> is essentially a pointer to that pointer such that it can be written to as well as read from.</p> return <p>FreeType error code. 0 means success.</p> since <p>2.12</p>"},{"location":"ft2-svg_fonts.html#svg_lib_preset_slot_func","title":"SVG_Lib_Preset_Slot_Func","text":"<p>Defined in FT_OTSVG_H (freetype/otsvg.h).</p> <pre><code>  typedef FT_Error\n  (*SVG_Lib_Preset_Slot_Func)( FT_GlyphSlot  slot,\n                               FT_Bool       cache,\n                               FT_Pointer   *state );\n</code></pre> <p>A callback that is called to preset the glyph slot. It is called from two places.</p> <ol> <li> <p>When <code>FT_Load_Glyph</code> needs to preset the glyph slot.</p> </li> <li> <p>Right before the <code>svg</code> module calls the render callback hook.</p> </li> </ol> <p>When it is the former, the argument <code>cache</code> is set to <code>FALSE</code>. When it is the latter, the argument <code>cache</code> is set to <code>TRUE</code>. This distinction has been made because many calculations that are necessary for presetting a glyph slot are the same needed later for the render callback hook. Thus, if <code>cache</code> is <code>TRUE</code>, the hook can cache those calculations in a memory block referenced by the state pointer.</p> <p>This hook is expected to preset the slot by setting parameters such as <code>bitmap_left</code>, <code>bitmap_top</code>, <code>width</code>, <code>rows</code>, <code>pitch</code>, and <code>pixel_mode</code>. It is also expected to set all the metrics for the slot including the vertical advance if it is not already set. Typically, fonts have horizontal advances but not vertical ones. If those are available, they had already been set, otherwise they have to be estimated and set manually. The hook must take into account the transformations that have been set, and translate the transformation matrices into the SVG coordinate system, as the original matrix is intended for the TTF/CFF coordinate system.</p> input slot <p>The glyph slot that has the SVG document loaded.</p> cache <p>See description.</p> inout data_pointer <p>The SVG rendering module stores a pointer variable that can be used by clients to store any data that needs to be shared across different hooks. <code>data_pointer</code> is essentially a pointer to that pointer such that it can be written to as well as read from.</p> return <p>FreeType error code. 0 means success.</p> since <p>2.12</p>"},{"location":"ft2-svg_fonts.html#svg_rendererhooks","title":"SVG_RendererHooks","text":"<p>Defined in FT_OTSVG_H (freetype/otsvg.h).</p> <pre><code>  typedef struct SVG_RendererHooks_\n  {\n    SVG_Lib_Init_Func    init_svg;\n    SVG_Lib_Free_Func    free_svg;\n    SVG_Lib_Render_Func  render_svg;\n\n    SVG_Lib_Preset_Slot_Func  preset_slot;\n\n  } SVG_RendererHooks;\n</code></pre> <p>A structure that stores the four hooks needed to render OT-SVG glyphs properly. The structure is publicly used to set the hooks via the <code>svg-hooks</code> driver property.</p> <p>The behavior of each hook is described in its documentation. One thing to note is that the preset hook and the render hook often need to do the same operations; therefore, it's better to cache the intermediate data in a state structure to avoid calculating it twice. For example, in the preset hook one can draw the glyph on a recorder surface and later create a bitmap surface from it in the render hook.</p> <p>All four hooks must be non-NULL.</p> fields init_svg <p>The initialization hook.</p> free_svg <p>The cleanup hook.</p> render_hook <p>The render hook.</p> preset_slot <p>The preset hook.</p> since <p>2.12</p>"},{"location":"ft2-svg_fonts.html#ft_svg_documentrec","title":"FT_SVG_DocumentRec","text":"<p>Defined in FT_OTSVG_H (freetype/otsvg.h).</p> <pre><code>  typedef struct  FT_SVG_DocumentRec_\n  {\n    FT_Byte*  svg_document;\n    FT_ULong  svg_document_length;\n\n    FT_Size_Metrics  metrics;\n    FT_UShort        units_per_EM;\n\n    FT_UShort  start_glyph_id;\n    FT_UShort  end_glyph_id;\n\n    FT_Matrix  transform;\n    FT_Vector  delta;\n\n  } FT_SVG_DocumentRec;\n</code></pre> <p>A structure that models one SVG document.</p> fields svg_document <p>A pointer to the SVG document.</p> svg_document_length <p>The length of <code>svg_document</code>.</p> metrics <p>A metrics object storing the size information.</p> units_per_EM <p>The size of the EM square.</p> start_glyph_id <p>The first glyph ID in the glyph range covered by this document.</p> end_glyph_id <p>The last glyph ID in the glyph range covered by this document.</p> transform <p>A 2x2 transformation matrix to apply to the glyph while rendering it.</p> delta <p>The translation to apply to the glyph while rendering.</p> note <p>When an <code>FT_GlyphSlot</code> object <code>slot</code> is passed down to a renderer, the renderer can only access the <code>metrics</code> and <code>units_per_EM</code> fields via <code>slot-&gt;face</code>. However, when <code>FT_Glyph_To_Bitmap</code> sets up a dummy object, it has no way to set a <code>face</code> object. Thus, metrics information and <code>units_per_EM</code> (which is necessary for OT-SVG) has to be stored separately.</p> since <p>2.12</p>"},{"location":"ft2-svg_fonts.html#ft_svg_document","title":"FT_SVG_Document","text":"<p>Defined in FT_OTSVG_H (freetype/otsvg.h).</p> <pre><code>  typedef struct FT_SVG_DocumentRec_*  FT_SVG_Document;\n\n\nFT_END_HEADER\n\n#endif /* OTSVG_H_ */\n\n\n/* END */\n</code></pre> <p>A handle to an <code>FT_SVG_DocumentRec</code> object.</p> since <p>2.12</p>"},{"location":"ft2-system_interface.html","title":"System Interface","text":"<p>FreeType \u00bb Docs \u00bb Support API \u00bb System Interface</p>"},{"location":"ft2-system_interface.html#system-interface","title":"System Interface","text":""},{"location":"ft2-system_interface.html#synopsis","title":"Synopsis","text":"<p>This section contains various definitions related to memory management and i/o access. You need to understand this information if you want to use a custom memory manager or you own i/o streams.</p>"},{"location":"ft2-system_interface.html#ft_memory","title":"FT_Memory","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef struct FT_MemoryRec_*  FT_Memory;\n</code></pre> <p>A handle to a given memory manager object, defined with an <code>FT_MemoryRec</code> structure.</p>"},{"location":"ft2-system_interface.html#ft_alloc_func","title":"FT_Alloc_Func","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef void*\n  (*FT_Alloc_Func)( FT_Memory  memory,\n                    long       size );\n</code></pre> <p>A function used to allocate <code>size</code> bytes from <code>memory</code>.</p> input memory <p>A handle to the source memory manager.</p> size <p>The size in bytes to allocate.</p> return <p>Address of new memory block. 0\u00a0in case of failure.</p>"},{"location":"ft2-system_interface.html#ft_free_func","title":"FT_Free_Func","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef void\n  (*FT_Free_Func)( FT_Memory  memory,\n                   void*      block );\n</code></pre> <p>A function used to release a given block of memory.</p> input memory <p>A handle to the source memory manager.</p> block <p>The address of the target memory block.</p>"},{"location":"ft2-system_interface.html#ft_realloc_func","title":"FT_Realloc_Func","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef void*\n  (*FT_Realloc_Func)( FT_Memory  memory,\n                      long       cur_size,\n                      long       new_size,\n                      void*      block );\n</code></pre> <p>A function used to re-allocate a given block of memory.</p> input memory <p>A handle to the source memory manager.</p> cur_size <p>The block's current size in bytes.</p> new_size <p>The block's requested new size.</p> block <p>The block's current address.</p> return <p>New block address. 0\u00a0in case of memory shortage.</p> note <p>In case of error, the old block must still be available.</p>"},{"location":"ft2-system_interface.html#ft_memoryrec","title":"FT_MemoryRec","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  struct  FT_MemoryRec_\n  {\n    void*            user;\n    FT_Alloc_Func    alloc;\n    FT_Free_Func     free;\n    FT_Realloc_Func  realloc;\n  };\n</code></pre> <p>A structure used to describe a given memory manager to FreeType\u00a02.</p> fields user <p>A generic typeless pointer for user data.</p> alloc <p>A pointer type to an allocation function.</p> free <p>A pointer type to an memory freeing function.</p> realloc <p>A pointer type to a reallocation function.</p>"},{"location":"ft2-system_interface.html#ft_stream","title":"FT_Stream","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef struct FT_StreamRec_*  FT_Stream;\n</code></pre> <p>A handle to an input stream.</p> also <p>See <code>FT_StreamRec</code> for the publicly accessible fields of a given stream object.</p>"},{"location":"ft2-system_interface.html#ft_streamdesc","title":"FT_StreamDesc","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef union  FT_StreamDesc_\n  {\n    long   value;\n    void*  pointer;\n\n  } FT_StreamDesc;\n</code></pre> <p>A union type used to store either a long or a pointer. This is used to store a file descriptor or a <code>FILE*</code> in an input stream.</p>"},{"location":"ft2-system_interface.html#ft_stream_iofunc","title":"FT_Stream_IoFunc","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef unsigned long\n  (*FT_Stream_IoFunc)( FT_Stream       stream,\n                       unsigned long   offset,\n                       unsigned char*  buffer,\n                       unsigned long   count );\n</code></pre> <p>A function used to seek and read data from a given input stream.</p> input stream <p>A handle to the source stream.</p> offset <p>The offset from the start of the stream to seek to.</p> buffer <p>The address of the read buffer.</p> count <p>The number of bytes to read from the stream.</p> return <p>If count &gt;\u00a00, return the number of bytes effectively read by the stream (after seeking to <code>offset</code>). If count ==\u00a00, return the status of the seek operation (non-zero indicates an error).</p>"},{"location":"ft2-system_interface.html#ft_stream_closefunc","title":"FT_Stream_CloseFunc","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef void\n  (*FT_Stream_CloseFunc)( FT_Stream  stream );\n</code></pre> <p>A function used to close a given input stream.</p> input stream <p>A handle to the target stream.</p>"},{"location":"ft2-system_interface.html#ft_streamrec","title":"FT_StreamRec","text":"<p>Defined in FT_SYSTEM_H (freetype/ftsystem.h).</p> <pre><code>  typedef struct  FT_StreamRec_\n  {\n    unsigned char*       base;\n    unsigned long        size;\n    unsigned long        pos;\n\n    FT_StreamDesc        descriptor;\n    FT_StreamDesc        pathname;\n    FT_Stream_IoFunc     read;\n    FT_Stream_CloseFunc  close;\n\n    FT_Memory            memory;\n    unsigned char*       cursor;\n    unsigned char*       limit;\n\n  } FT_StreamRec;\n</code></pre> <p>A structure used to describe an input stream.</p> input base <p>For memory-based streams, this is the address of the first stream byte in memory. This field should always be set to <code>NULL</code> for disk-based streams.</p> size <p>The stream size in bytes.</p> <p>In case of compressed streams where the size is unknown before actually doing the decompression, the value is set to 0x7FFFFFFF. (Note that this size value can occur for normal streams also; it is thus just a hint.)</p> pos <p>The current position within the stream.</p> descriptor <p>This field is a union that can hold an integer or a pointer. It is used by stream implementations to store file descriptors or <code>FILE*</code> pointers.</p> pathname <p>This field is completely ignored by FreeType. However, it is often useful during debugging to use it to store the stream's filename (where available).</p> read <p>The stream's input function.</p> close <p>The stream's close function.</p> memory <p>The memory manager to use to preload frames. This is set internally by FreeType and shouldn't be touched by stream implementations.</p> cursor <p>This field is set and used internally by FreeType when parsing frames. In particular, the <code>FT_GET_XXX</code> macros use this instead of the <code>pos</code> field.</p> limit <p>This field is set and used internally by FreeType when parsing frames.</p>"},{"location":"ft2-t1_cid_driver.html","title":"The Type 1 and CID drivers","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb The Type 1 and CID drivers</p>"},{"location":"ft2-t1_cid_driver.html#the-type-1-and-cid-drivers","title":"The Type 1 and CID drivers","text":""},{"location":"ft2-t1_cid_driver.html#synopsis","title":"Synopsis","text":"<p>It is possible to control the behaviour of FreeType's Type\u00a01 and Type\u00a01 CID drivers with <code>FT_Property_Set</code> and <code>FT_Property_Get</code>.</p> <p>Behind the scenes, both drivers use the Adobe CFF engine for hinting; however, the used properties must be specified separately.</p> <p>The Type\u00a01 driver's module name is \u2018type1\u2019; the CID driver's module name is \u2018t1cid\u2019.</p> <p>Available properties are <code>hinting-engine</code>, <code>no-stem-darkening</code>, <code>darkening-parameters</code>, and <code>random-seed</code>, as documented in the \u2018Driver properties\u2019 section.</p> <p>Please see the \u2018The CFF driver\u2019 section for more details on the new hinting engine.</p>"},{"location":"ft2-truetype_engine.html","title":"The TrueType Engine","text":"<p>FreeType \u00bb Docs \u00bb Miscellaneous \u00bb The TrueType Engine</p>"},{"location":"ft2-truetype_engine.html#the-truetype-engine","title":"The TrueType Engine","text":""},{"location":"ft2-truetype_engine.html#synopsis","title":"Synopsis","text":"<p>This section contains a function used to query the level of TrueType bytecode support compiled in this version of the library.</p>"},{"location":"ft2-truetype_engine.html#ft_truetypeenginetype","title":"FT_TrueTypeEngineType","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  typedef enum  FT_TrueTypeEngineType_\n  {\n    FT_TRUETYPE_ENGINE_TYPE_NONE = 0,\n    FT_TRUETYPE_ENGINE_TYPE_UNPATENTED,\n    FT_TRUETYPE_ENGINE_TYPE_PATENTED\n\n  } FT_TrueTypeEngineType;\n</code></pre> <p>A list of values describing which kind of TrueType bytecode engine is implemented in a given FT_Library instance. It is used by the <code>FT_Get_TrueType_Engine_Type</code> function.</p> values FT_TRUETYPE_ENGINE_TYPE_NONE <p>The library doesn't implement any kind of bytecode interpreter.</p> FT_TRUETYPE_ENGINE_TYPE_UNPATENTED <p>Deprecated and removed.</p> FT_TRUETYPE_ENGINE_TYPE_PATENTED <p>The library implements a bytecode interpreter that covers the full instruction set of the TrueType virtual machine (this was governed by patents until May 2010, hence the name).</p> since <p>2.2</p>"},{"location":"ft2-truetype_engine.html#ft_get_truetype_engine_type","title":"FT_Get_TrueType_Engine_Type","text":"<p>Defined in FT_MODULE_H (freetype/ftmodapi.h).</p> <pre><code>  FT_EXPORT( FT_TrueTypeEngineType )\n  FT_Get_TrueType_Engine_Type( FT_Library  library );\n</code></pre> <p>Return an <code>FT_TrueTypeEngineType</code> value to indicate which level of the TrueType virtual machine a given library instance supports.</p> input library <p>A library instance.</p> return <p>A value indicating which level is supported.</p> since <p>2.2</p>"},{"location":"ft2-truetype_tables.html","title":"TrueType Tables","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb TrueType Tables</p>"},{"location":"ft2-truetype_tables.html#truetype-tables","title":"TrueType Tables","text":""},{"location":"ft2-truetype_tables.html#synopsis","title":"Synopsis","text":"<p>This section contains definitions of some basic tables specific to TrueType and OpenType as well as some routines used to access and process them.</p>"},{"location":"ft2-truetype_tables.html#tt_header","title":"TT_Header","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef struct  TT_Header_\n  {\n    FT_Fixed   Table_Version;\n    FT_Fixed   Font_Revision;\n\n    FT_Long    CheckSum_Adjust;\n    FT_Long    Magic_Number;\n\n    FT_UShort  Flags;\n    FT_UShort  Units_Per_EM;\n\n    FT_ULong   Created [2];\n    FT_ULong   Modified[2];\n\n    FT_Short   xMin;\n    FT_Short   yMin;\n    FT_Short   xMax;\n    FT_Short   yMax;\n\n    FT_UShort  Mac_Style;\n    FT_UShort  Lowest_Rec_PPEM;\n\n    FT_Short   Font_Direction;\n    FT_Short   Index_To_Loc_Format;\n    FT_Short   Glyph_Data_Format;\n\n  } TT_Header;\n</code></pre> <p>A structure to model a TrueType font header table. All fields follow the OpenType specification. The 64-bit timestamps are stored in two-element arrays <code>Created</code> and <code>Modified</code>, first the upper then the lower 32\u00a0bits.</p>"},{"location":"ft2-truetype_tables.html#tt_horiheader","title":"TT_HoriHeader","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef struct  TT_HoriHeader_\n  {\n    FT_Fixed   Version;\n    FT_Short   Ascender;\n    FT_Short   Descender;\n    FT_Short   Line_Gap;\n\n    FT_UShort  advance_Width_Max;      /* advance width maximum */\n\n    FT_Short   min_Left_Side_Bearing;  /* minimum left-sb       */\n    FT_Short   min_Right_Side_Bearing; /* minimum right-sb      */\n    FT_Short   xMax_Extent;            /* xmax extents          */\n    FT_Short   caret_Slope_Rise;\n    FT_Short   caret_Slope_Run;\n    FT_Short   caret_Offset;\n\n    FT_Short   Reserved[4];\n\n    FT_Short   metric_Data_Format;\n    FT_UShort  number_Of_HMetrics;\n\n    /* The following fields are not defined by the OpenType specification */\n    /* but they are used to connect the metrics header to the relevant    */\n    /* 'hmtx' table.                                                      */\n\n    void*      long_metrics;\n    void*      short_metrics;\n\n  } TT_HoriHeader;\n</code></pre> <p>A structure to model a TrueType horizontal header, the \u2018hhea\u2019 table, as well as the corresponding horizontal metrics table, \u2018hmtx\u2019.</p> fields Version <p>The table version.</p> Ascender <p>The font's ascender, i.e., the distance from the baseline to the top-most of all glyph points found in the font.</p> <p>This value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).</p> <p>You should use the <code>sTypoAscender</code> field of the \u2018OS/2\u2019 table instead if you want the correct one.</p> Descender <p>The font's descender, i.e., the distance from the baseline to the bottom-most of all glyph points found in the font. It is negative.</p> <p>This value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).</p> <p>You should use the <code>sTypoDescender</code> field of the \u2018OS/2\u2019 table instead if you want the correct one.</p> Line_Gap <p>The font's line gap, i.e., the distance to add to the ascender and descender to get the BTB, i.e., the baseline-to-baseline distance for the font.</p> advance_Width_Max <p>This field is the maximum of all advance widths found in the font. It can be used to compute the maximum width of an arbitrary string of text.</p> min_Left_Side_Bearing <p>The minimum left side bearing of all glyphs within the font.</p> min_Right_Side_Bearing <p>The minimum right side bearing of all glyphs within the font.</p> xMax_Extent <p>The maximum horizontal extent (i.e., the \u2018width\u2019 of a glyph's bounding box) for all glyphs in the font.</p> caret_Slope_Rise <p>The rise coefficient of the cursor's slope of the cursor (slope=rise/run).</p> caret_Slope_Run <p>The run coefficient of the cursor's slope.</p> caret_Offset <p>The cursor's offset for slanted fonts.</p> Reserved <p>8\u00a0reserved bytes.</p> metric_Data_Format <p>Always\u00a00.</p> number_Of_HMetrics <p>Number of HMetrics entries in the \u2018hmtx\u2019 table \u2013 this value can be smaller than the total number of glyphs in the font.</p> long_metrics <p>A pointer into the \u2018hmtx\u2019 table.</p> short_metrics <p>A pointer into the \u2018hmtx\u2019 table.</p> note <p>For an OpenType variation font, the values of the following fields can change after a call to <code>FT_Set_Var_Design_Coordinates</code> (and friends) if the font contains an \u2018MVAR\u2019 table: <code>caret_Slope_Rise</code>, <code>caret_Slope_Run</code>, and <code>caret_Offset</code>.</p>"},{"location":"ft2-truetype_tables.html#tt_vertheader","title":"TT_VertHeader","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef struct  TT_VertHeader_\n  {\n    FT_Fixed   Version;\n    FT_Short   Ascender;\n    FT_Short   Descender;\n    FT_Short   Line_Gap;\n\n    FT_UShort  advance_Height_Max;      /* advance height maximum */\n\n    FT_Short   min_Top_Side_Bearing;    /* minimum top-sb          */\n    FT_Short   min_Bottom_Side_Bearing; /* minimum bottom-sb       */\n    FT_Short   yMax_Extent;             /* ymax extents            */\n    FT_Short   caret_Slope_Rise;\n    FT_Short   caret_Slope_Run;\n    FT_Short   caret_Offset;\n\n    FT_Short   Reserved[4];\n\n    FT_Short   metric_Data_Format;\n    FT_UShort  number_Of_VMetrics;\n\n    /* The following fields are not defined by the OpenType specification */\n    /* but they are used to connect the metrics header to the relevant    */\n    /* 'vmtx' table.                                                      */\n\n    void*      long_metrics;\n    void*      short_metrics;\n\n  } TT_VertHeader;\n</code></pre> <p>A structure used to model a TrueType vertical header, the \u2018vhea\u2019 table, as well as the corresponding vertical metrics table, \u2018vmtx\u2019.</p> fields Version <p>The table version.</p> Ascender <p>The font's ascender, i.e., the distance from the baseline to the top-most of all glyph points found in the font.</p> <p>This value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).</p> <p>You should use the <code>sTypoAscender</code> field of the \u2018OS/2\u2019 table instead if you want the correct one.</p> Descender <p>The font's descender, i.e., the distance from the baseline to the bottom-most of all glyph points found in the font. It is negative.</p> <p>This value is invalid in many fonts, as it is usually set by the font designer, and often reflects only a portion of the glyphs found in the font (maybe ASCII).</p> <p>You should use the <code>sTypoDescender</code> field of the \u2018OS/2\u2019 table instead if you want the correct one.</p> Line_Gap <p>The font's line gap, i.e., the distance to add to the ascender and descender to get the BTB, i.e., the baseline-to-baseline distance for the font.</p> advance_Height_Max <p>This field is the maximum of all advance heights found in the font. It can be used to compute the maximum height of an arbitrary string of text.</p> min_Top_Side_Bearing <p>The minimum top side bearing of all glyphs within the font.</p> min_Bottom_Side_Bearing <p>The minimum bottom side bearing of all glyphs within the font.</p> yMax_Extent <p>The maximum vertical extent (i.e., the \u2018height\u2019 of a glyph's bounding box) for all glyphs in the font.</p> caret_Slope_Rise <p>The rise coefficient of the cursor's slope of the cursor (slope=rise/run).</p> caret_Slope_Run <p>The run coefficient of the cursor's slope.</p> caret_Offset <p>The cursor's offset for slanted fonts.</p> Reserved <p>8\u00a0reserved bytes.</p> metric_Data_Format <p>Always\u00a00.</p> number_Of_VMetrics <p>Number of VMetrics entries in the \u2018vmtx\u2019 table \u2013 this value can be smaller than the total number of glyphs in the font.</p> long_metrics <p>A pointer into the \u2018vmtx\u2019 table.</p> short_metrics <p>A pointer into the \u2018vmtx\u2019 table.</p> note <p>For an OpenType variation font, the values of the following fields can change after a call to <code>FT_Set_Var_Design_Coordinates</code> (and friends) if the font contains an \u2018MVAR\u2019 table: <code>Ascender</code>, <code>Descender</code>, <code>Line_Gap</code>, <code>caret_Slope_Rise</code>, <code>caret_Slope_Run</code>, and <code>caret_Offset</code>.</p>"},{"location":"ft2-truetype_tables.html#tt_os2","title":"TT_OS2","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef struct  TT_OS2_\n  {\n    FT_UShort  version;                /* 0x0001 - more or 0xFFFF */\n    FT_Short   xAvgCharWidth;\n    FT_UShort  usWeightClass;\n    FT_UShort  usWidthClass;\n    FT_UShort  fsType;\n    FT_Short   ySubscriptXSize;\n    FT_Short   ySubscriptYSize;\n    FT_Short   ySubscriptXOffset;\n    FT_Short   ySubscriptYOffset;\n    FT_Short   ySuperscriptXSize;\n    FT_Short   ySuperscriptYSize;\n    FT_Short   ySuperscriptXOffset;\n    FT_Short   ySuperscriptYOffset;\n    FT_Short   yStrikeoutSize;\n    FT_Short   yStrikeoutPosition;\n    FT_Short   sFamilyClass;\n\n    FT_Byte    panose[10];\n\n    FT_ULong   ulUnicodeRange1;        /* Bits 0-31   */\n    FT_ULong   ulUnicodeRange2;        /* Bits 32-63  */\n    FT_ULong   ulUnicodeRange3;        /* Bits 64-95  */\n    FT_ULong   ulUnicodeRange4;        /* Bits 96-127 */\n\n    FT_Char    achVendID[4];\n\n    FT_UShort  fsSelection;\n    FT_UShort  usFirstCharIndex;\n    FT_UShort  usLastCharIndex;\n    FT_Short   sTypoAscender;\n    FT_Short   sTypoDescender;\n    FT_Short   sTypoLineGap;\n    FT_UShort  usWinAscent;\n    FT_UShort  usWinDescent;\n\n    /* only version 1 and higher: */\n\n    FT_ULong   ulCodePageRange1;       /* Bits 0-31   */\n    FT_ULong   ulCodePageRange2;       /* Bits 32-63  */\n\n    /* only version 2 and higher: */\n\n    FT_Short   sxHeight;\n    FT_Short   sCapHeight;\n    FT_UShort  usDefaultChar;\n    FT_UShort  usBreakChar;\n    FT_UShort  usMaxContext;\n\n    /* only version 5 and higher: */\n\n    FT_UShort  usLowerOpticalPointSize;       /* in twips (1/20 points) */\n    FT_UShort  usUpperOpticalPointSize;       /* in twips (1/20 points) */\n\n  } TT_OS2;\n</code></pre> <p>A structure to model a TrueType \u2018OS/2\u2019 table. All fields comply to the OpenType specification.</p> <p>Note that we now support old Mac fonts that do not include an \u2018OS/2\u2019 table. In this case, the <code>version</code> field is always set to 0xFFFF.</p> note <p>For an OpenType variation font, the values of the following fields can change after a call to <code>FT_Set_Var_Design_Coordinates</code> (and friends) if the font contains an \u2018MVAR\u2019 table: <code>sCapHeight</code>, <code>sTypoAscender</code>, <code>sTypoDescender</code>, <code>sTypoLineGap</code>, <code>sxHeight</code>, <code>usWinAscent</code>, <code>usWinDescent</code>, <code>yStrikeoutPosition</code>, <code>yStrikeoutSize</code>, <code>ySubscriptXOffset</code>, <code>ySubScriptXSize</code>, <code>ySubscriptYOffset</code>, <code>ySubscriptYSize</code>, <code>ySuperscriptXOffset</code>, <code>ySuperscriptXSize</code>, <code>ySuperscriptYOffset</code>, and <code>ySuperscriptYSize</code>.</p> <p>Possible values for bits in the <code>ulUnicodeRangeX</code> fields are given by the <code>TT_UCR_XXX</code> macros.</p>"},{"location":"ft2-truetype_tables.html#tt_postscript","title":"TT_Postscript","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef struct  TT_Postscript_\n  {\n    FT_Fixed  FormatType;\n    FT_Fixed  italicAngle;\n    FT_Short  underlinePosition;\n    FT_Short  underlineThickness;\n    FT_ULong  isFixedPitch;\n    FT_ULong  minMemType42;\n    FT_ULong  maxMemType42;\n    FT_ULong  minMemType1;\n    FT_ULong  maxMemType1;\n\n    /* Glyph names follow in the 'post' table, but we don't */\n    /* load them by default.                                */\n\n  } TT_Postscript;\n</code></pre> <p>A structure to model a TrueType \u2018post\u2019 table. All fields comply to the OpenType specification. This structure does not reference a font's PostScript glyph names; use <code>FT_Get_Glyph_Name</code> to retrieve them.</p> note <p>For an OpenType variation font, the values of the following fields can change after a call to <code>FT_Set_Var_Design_Coordinates</code> (and friends) if the font contains an \u2018MVAR\u2019 table: <code>underlinePosition</code> and <code>underlineThickness</code>.</p>"},{"location":"ft2-truetype_tables.html#tt_pclt","title":"TT_PCLT","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef struct  TT_PCLT_\n  {\n    FT_Fixed   Version;\n    FT_ULong   FontNumber;\n    FT_UShort  Pitch;\n    FT_UShort  xHeight;\n    FT_UShort  Style;\n    FT_UShort  TypeFamily;\n    FT_UShort  CapHeight;\n    FT_UShort  SymbolSet;\n    FT_Char    TypeFace[16];\n    FT_Char    CharacterComplement[8];\n    FT_Char    FileName[6];\n    FT_Char    StrokeWeight;\n    FT_Char    WidthType;\n    FT_Byte    SerifStyle;\n    FT_Byte    Reserved;\n\n  } TT_PCLT;\n</code></pre> <p>A structure to model a TrueType \u2018PCLT\u2019 table. All fields comply to the OpenType specification.</p>"},{"location":"ft2-truetype_tables.html#tt_maxprofile","title":"TT_MaxProfile","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef struct  TT_MaxProfile_\n  {\n    FT_Fixed   version;\n    FT_UShort  numGlyphs;\n    FT_UShort  maxPoints;\n    FT_UShort  maxContours;\n    FT_UShort  maxCompositePoints;\n    FT_UShort  maxCompositeContours;\n    FT_UShort  maxZones;\n    FT_UShort  maxTwilightPoints;\n    FT_UShort  maxStorage;\n    FT_UShort  maxFunctionDefs;\n    FT_UShort  maxInstructionDefs;\n    FT_UShort  maxStackElements;\n    FT_UShort  maxSizeOfInstructions;\n    FT_UShort  maxComponentElements;\n    FT_UShort  maxComponentDepth;\n\n  } TT_MaxProfile;\n</code></pre> <p>The maximum profile (\u2018maxp\u2019) table contains many max values, which can be used to pre-allocate arrays for speeding up glyph loading and hinting.</p> fields version <p>The version number.</p> numGlyphs <p>The number of glyphs in this TrueType font.</p> maxPoints <p>The maximum number of points in a non-composite TrueType glyph. See also <code>maxCompositePoints</code>.</p> maxContours <p>The maximum number of contours in a non-composite TrueType glyph. See also <code>maxCompositeContours</code>.</p> maxCompositePoints <p>The maximum number of points in a composite TrueType glyph. See also <code>maxPoints</code>.</p> maxCompositeContours <p>The maximum number of contours in a composite TrueType glyph. See also <code>maxContours</code>.</p> maxZones <p>The maximum number of zones used for glyph hinting.</p> maxTwilightPoints <p>The maximum number of points in the twilight zone used for glyph hinting.</p> maxStorage <p>The maximum number of elements in the storage area used for glyph hinting.</p> maxFunctionDefs <p>The maximum number of function definitions in the TrueType bytecode for this font.</p> maxInstructionDefs <p>The maximum number of instruction definitions in the TrueType bytecode for this font.</p> maxStackElements <p>The maximum number of stack elements used during bytecode interpretation.</p> maxSizeOfInstructions <p>The maximum number of TrueType opcodes used for glyph hinting.</p> maxComponentElements <p>The maximum number of simple (i.e., non-composite) glyphs in a composite glyph.</p> maxComponentDepth <p>The maximum nesting depth of composite glyphs.</p> note <p>This structure is only used during font loading.</p>"},{"location":"ft2-truetype_tables.html#ft_sfnt_tag","title":"FT_Sfnt_Tag","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  typedef enum  FT_Sfnt_Tag_\n  {\n    FT_SFNT_HEAD,\n    FT_SFNT_MAXP,\n    FT_SFNT_OS2,\n    FT_SFNT_HHEA,\n    FT_SFNT_VHEA,\n    FT_SFNT_POST,\n    FT_SFNT_PCLT,\n\n    FT_SFNT_MAX\n\n  } FT_Sfnt_Tag;\n\n  /* these constants are deprecated; use the corresponding `FT_Sfnt_Tag` */\n  /* values instead                                                      */\n#define ft_sfnt_head  FT_SFNT_HEAD\n#define ft_sfnt_maxp  FT_SFNT_MAXP\n#define ft_sfnt_os2   FT_SFNT_OS2\n#define ft_sfnt_hhea  FT_SFNT_HHEA\n#define ft_sfnt_vhea  FT_SFNT_VHEA\n#define ft_sfnt_post  FT_SFNT_POST\n#define ft_sfnt_pclt  FT_SFNT_PCLT\n</code></pre> <p>An enumeration to specify indices of SFNT tables loaded and parsed by FreeType during initialization of an SFNT font. Used in the <code>FT_Get_Sfnt_Table</code> API function.</p> values FT_SFNT_HEAD <p>To access the font's <code>TT_Header</code> structure.</p> FT_SFNT_MAXP <p>To access the font's <code>TT_MaxProfile</code> structure.</p> FT_SFNT_OS2 <p>To access the font's <code>TT_OS2</code> structure.</p> FT_SFNT_HHEA <p>To access the font's <code>TT_HoriHeader</code> structure.</p> FT_SFNT_VHEA <p>To access the font's <code>TT_VertHeader</code> structure.</p> FT_SFNT_POST <p>To access the font's <code>TT_Postscript</code> structure.</p> FT_SFNT_PCLT <p>To access the font's <code>TT_PCLT</code> structure.</p>"},{"location":"ft2-truetype_tables.html#ft_get_sfnt_table","title":"FT_Get_Sfnt_Table","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  FT_EXPORT( void* )\n  FT_Get_Sfnt_Table( FT_Face      face,\n                     FT_Sfnt_Tag  tag );\n</code></pre> <p>Return a pointer to a given SFNT table stored within a face.</p> input face <p>A handle to the source.</p> tag <p>The index of the SFNT table.</p> return <p>A type-less pointer to the table. This will be <code>NULL</code> in case of error, or if the corresponding table was not found OR loaded from the file.</p> <p>Use a typecast according to <code>tag</code> to access the structure elements.</p> note <p>The table is owned by the face object and disappears with it.</p> <p>This function is only useful to access SFNT tables that are loaded by the sfnt, truetype, and opentype drivers. See <code>FT_Sfnt_Tag</code> for a list.</p> example <p>Here is an example demonstrating access to the \u2018vhea\u2019 table. <pre><code>  TT_VertHeader*  vert_header;\n\n\n  vert_header =\n    (TT_VertHeader*)FT_Get_Sfnt_Table( face, FT_SFNT_VHEA );\n</code></pre></p>"},{"location":"ft2-truetype_tables.html#ft_load_sfnt_table","title":"FT_Load_Sfnt_Table","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Load_Sfnt_Table( FT_Face    face,\n                      FT_ULong   tag,\n                      FT_Long    offset,\n                      FT_Byte*   buffer,\n                      FT_ULong*  length );\n</code></pre> <p>Load any SFNT font table into client memory.</p> input face <p>A handle to the source face.</p> tag <p>The four-byte tag of the table to load. Use value\u00a00 if you want to access the whole font file. Otherwise, you can use one of the definitions found in the <code>FT_TRUETYPE_TAGS_H</code> file, or forge a new one with <code>FT_MAKE_TAG</code>.</p> offset <p>The starting offset in the table (or file if tag\u00a0==\u00a00).</p> output buffer <p>The target buffer address. The client must ensure that the memory array is big enough to hold the data.</p> inout length <p>If the <code>length</code> parameter is <code>NULL</code>, try to load the whole table. Return an error code if it fails.</p> <p>Else, if <code>*length</code> is\u00a00, exit immediately while returning the table's (or file) full size in it.</p> <p>Else the number of bytes to read from the table or file, from the starting offset.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>If you need to determine the table's length you should first call this function with <code>*length</code> set to\u00a00, as in the following example: <pre><code>  FT_ULong  length = 0;\n\n\n  error = FT_Load_Sfnt_Table( face, tag, 0, NULL, &amp;length );\n  if ( error ) { ... table does not exist ... }\n\n  buffer = malloc( length );\n  if ( buffer == NULL ) { ... not enough memory ... }\n\n  error = FT_Load_Sfnt_Table( face, tag, 0, buffer, &amp;length );\n  if ( error ) { ... could not load table ... }\n</code></pre></p> <p>Note that structures like <code>TT_Header</code> or <code>TT_OS2</code> can't be used with this function; they are limited to <code>FT_Get_Sfnt_Table</code>. Reason is that those structures depend on the processor architecture, with varying size (e.g. 32bit vs. 64bit) or order (big endian vs. little endian).</p>"},{"location":"ft2-truetype_tables.html#ft_sfnt_table_info","title":"FT_Sfnt_Table_Info","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Sfnt_Table_Info( FT_Face    face,\n                      FT_UInt    table_index,\n                      FT_ULong  *tag,\n                      FT_ULong  *length );\n</code></pre> <p>Return information on an SFNT table.</p> input face <p>A handle to the source face.</p> table_index <p>The index of an SFNT table. The function returns FT_Err_Table_Missing for an invalid value.</p> inout tag <p>The name tag of the SFNT table. If the value is <code>NULL</code>, <code>table_index</code> is ignored, and <code>length</code> returns the number of SFNT tables in the font.</p> output length <p>The length of the SFNT table (or the number of SFNT tables, depending on <code>tag</code>).</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>While parsing fonts, FreeType handles SFNT tables with length zero as missing.</p>"},{"location":"ft2-truetype_tables.html#ft_get_cmap_language_id","title":"FT_Get_CMap_Language_ID","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  FT_EXPORT( FT_ULong )\n  FT_Get_CMap_Language_ID( FT_CharMap  charmap );\n</code></pre> <p>Return cmap language ID as specified in the OpenType standard. Definitions of language ID values are in file <code>FT_TRUETYPE_IDS_H</code>.</p> input charmap <p>The target charmap.</p> return <p>The language ID of <code>charmap</code>. If <code>charmap</code> doesn't belong to an SFNT face, just return\u00a00 as the default value.</p> <p>For a format\u00a014 cmap (to access Unicode IVS), the return value is 0xFFFFFFFF.</p>"},{"location":"ft2-truetype_tables.html#ft_get_cmap_format","title":"FT_Get_CMap_Format","text":"<p>Defined in FT_TRUETYPE_TABLES_H (freetype/tttables.h).</p> <pre><code>  FT_EXPORT( FT_Long )\n  FT_Get_CMap_Format( FT_CharMap  charmap );\n</code></pre> <p>Return the format of an SFNT \u2018cmap\u2019 table.</p> input charmap <p>The target charmap.</p> return <p>The format of <code>charmap</code>. If <code>charmap</code> doesn't belong to an SFNT face (including the synthetic Unicode charmap sometimes created by FreeType), return -1.</p>"},{"location":"ft2-truetype_tables.html#ft_param_tag_unpatented_hinting","title":"FT_PARAM_TAG_UNPATENTED_HINTING","text":"<pre><code>#define FT_PARAM_TAG_UNPATENTED_HINTING \\\n          FT_MAKE_TAG( 'u', 'n', 'p', 'a' )\n</code></pre> <p>Deprecated, no effect.</p> <p>Previously: A constant used as the tag of an <code>FT_Parameter</code> structure to indicate that unpatented methods only should be used by the TrueType bytecode interpreter for a typeface opened by <code>FT_Open_Face</code>.</p>"},{"location":"ft2-truetype_tables.html#tt_platform_xxx","title":"TT_PLATFORM_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_PLATFORM_APPLE_UNICODE  0\n#define TT_PLATFORM_MACINTOSH      1\n#define TT_PLATFORM_ISO            2 /* deprecated */\n#define TT_PLATFORM_MICROSOFT      3\n#define TT_PLATFORM_CUSTOM         4\n#define TT_PLATFORM_ADOBE          7 /* artificial */\n</code></pre> <p>A list of valid values for the <code>platform_id</code> identifier code in <code>FT_CharMapRec</code> and <code>FT_SfntName</code> structures.</p> values TT_PLATFORM_APPLE_UNICODE <p>Used by Apple to indicate a Unicode character map and/or name entry. See <code>TT_APPLE_ID_XXX</code> for corresponding <code>encoding_id</code> values. Note that name entries in this format are coded as big-endian UCS-2 character codes only.</p> TT_PLATFORM_MACINTOSH <p>Used by Apple to indicate a MacOS-specific charmap and/or name entry. See <code>TT_MAC_ID_XXX</code> for corresponding <code>encoding_id</code> values. Note that most TrueType fonts contain an Apple roman charmap to be usable on MacOS systems (even if they contain a Microsoft charmap as well).</p> TT_PLATFORM_ISO <p>This value was used to specify ISO/IEC 10646 charmaps. It is however now deprecated. See <code>TT_ISO_ID_XXX</code> for a list of corresponding <code>encoding_id</code> values.</p> TT_PLATFORM_MICROSOFT <p>Used by Microsoft to indicate Windows-specific charmaps. See <code>TT_MS_ID_XXX</code> for a list of corresponding <code>encoding_id</code> values. Note that most fonts contain a Unicode charmap using (<code>TT_PLATFORM_MICROSOFT</code>, <code>TT_MS_ID_UNICODE_CS</code>).</p> TT_PLATFORM_CUSTOM <p>Used to indicate application-specific charmaps.</p> TT_PLATFORM_ADOBE <p>This value isn't part of any font format specification, but is used by FreeType to report Adobe-specific charmaps in an <code>FT_CharMapRec</code> structure. See <code>TT_ADOBE_ID_XXX</code>.</p>"},{"location":"ft2-truetype_tables.html#tt_apple_id_xxx","title":"TT_APPLE_ID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_APPLE_ID_DEFAULT           0 /* Unicode 1.0                   */\n#define TT_APPLE_ID_UNICODE_1_1       1 /* specify Hangul at U+34xx      */\n#define TT_APPLE_ID_ISO_10646         2 /* deprecated                    */\n#define TT_APPLE_ID_UNICODE_2_0       3 /* or later                      */\n#define TT_APPLE_ID_UNICODE_32        4 /* 2.0 or later, full repertoire */\n#define TT_APPLE_ID_VARIANT_SELECTOR  5 /* variation selector data       */\n#define TT_APPLE_ID_FULL_UNICODE      6 /* used with type 13 cmaps       */\n</code></pre> <p>A list of valid values for the <code>encoding_id</code> for <code>TT_PLATFORM_APPLE_UNICODE</code> charmaps and name entries.</p> values TT_APPLE_ID_DEFAULT <p>Unicode version 1.0.</p> TT_APPLE_ID_UNICODE_1_1 <p>Unicode 1.1; specifies Hangul characters starting at U+34xx.</p> TT_APPLE_ID_ISO_10646 <p>Deprecated (identical to preceding).</p> TT_APPLE_ID_UNICODE_2_0 <p>Unicode 2.0 and beyond (UTF-16 BMP only).</p> TT_APPLE_ID_UNICODE_32 <p>Unicode 3.1 and beyond, using UTF-32.</p> TT_APPLE_ID_VARIANT_SELECTOR <p>From Adobe, not Apple. Not a normal cmap. Specifies variations on a real cmap.</p> TT_APPLE_ID_FULL_UNICODE <p>Used for fallback fonts that provide complete Unicode coverage with a type\u00a013 cmap.</p>"},{"location":"ft2-truetype_tables.html#tt_mac_id_xxx","title":"TT_MAC_ID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_MAC_ID_ROMAN                 0\n#define TT_MAC_ID_JAPANESE              1\n#define TT_MAC_ID_TRADITIONAL_CHINESE   2\n#define TT_MAC_ID_KOREAN                3\n#define TT_MAC_ID_ARABIC                4\n#define TT_MAC_ID_HEBREW                5\n#define TT_MAC_ID_GREEK                 6\n#define TT_MAC_ID_RUSSIAN               7\n#define TT_MAC_ID_RSYMBOL               8\n#define TT_MAC_ID_DEVANAGARI            9\n#define TT_MAC_ID_GURMUKHI             10\n#define TT_MAC_ID_GUJARATI             11\n#define TT_MAC_ID_ORIYA                12\n#define TT_MAC_ID_BENGALI              13\n#define TT_MAC_ID_TAMIL                14\n#define TT_MAC_ID_TELUGU               15\n#define TT_MAC_ID_KANNADA              16\n#define TT_MAC_ID_MALAYALAM            17\n#define TT_MAC_ID_SINHALESE            18\n#define TT_MAC_ID_BURMESE              19\n#define TT_MAC_ID_KHMER                20\n#define TT_MAC_ID_THAI                 21\n#define TT_MAC_ID_LAOTIAN              22\n#define TT_MAC_ID_GEORGIAN             23\n#define TT_MAC_ID_ARMENIAN             24\n#define TT_MAC_ID_MALDIVIAN            25\n#define TT_MAC_ID_SIMPLIFIED_CHINESE   25\n#define TT_MAC_ID_TIBETAN              26\n#define TT_MAC_ID_MONGOLIAN            27\n#define TT_MAC_ID_GEEZ                 28\n#define TT_MAC_ID_SLAVIC               29\n#define TT_MAC_ID_VIETNAMESE           30\n#define TT_MAC_ID_SINDHI               31\n#define TT_MAC_ID_UNINTERP             32\n</code></pre> <p>A list of valid values for the <code>encoding_id</code> for <code>TT_PLATFORM_MACINTOSH</code> charmaps and name entries.</p>"},{"location":"ft2-truetype_tables.html#tt_iso_id_xxx","title":"TT_ISO_ID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_ISO_ID_7BIT_ASCII  0\n#define TT_ISO_ID_10646       1\n#define TT_ISO_ID_8859_1      2\n</code></pre> <p>A list of valid values for the <code>encoding_id</code> for <code>TT_PLATFORM_ISO</code> charmaps and name entries.</p> <p>Their use is now deprecated.</p> values TT_ISO_ID_7BIT_ASCII <p>ASCII.</p> TT_ISO_ID_10646 <p>ISO/10646.</p> TT_ISO_ID_8859_1 <p>Also known as Latin-1.</p>"},{"location":"ft2-truetype_tables.html#tt_ms_id_xxx","title":"TT_MS_ID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_MS_ID_SYMBOL_CS    0\n#define TT_MS_ID_UNICODE_CS   1\n#define TT_MS_ID_SJIS         2\n#define TT_MS_ID_PRC          3\n#define TT_MS_ID_BIG_5        4\n#define TT_MS_ID_WANSUNG      5\n#define TT_MS_ID_JOHAB        6\n#define TT_MS_ID_UCS_4       10\n\n  /* this value is deprecated */\n#define TT_MS_ID_GB2312  TT_MS_ID_PRC\n</code></pre> <p>A list of valid values for the <code>encoding_id</code> for <code>TT_PLATFORM_MICROSOFT</code> charmaps and name entries.</p> values TT_MS_ID_SYMBOL_CS <p>Microsoft symbol encoding. See <code>FT_ENCODING_MS_SYMBOL</code>.</p> TT_MS_ID_UNICODE_CS <p>Microsoft WGL4 charmap, matching Unicode. See <code>FT_ENCODING_UNICODE</code>.</p> TT_MS_ID_SJIS <p>Shift JIS Japanese encoding. See <code>FT_ENCODING_SJIS</code>.</p> TT_MS_ID_PRC <p>Chinese encodings as used in the People's Republic of China (PRC). This means the encodings GB\u00a02312 and its supersets GBK and GB\u00a018030. See <code>FT_ENCODING_PRC</code>.</p> TT_MS_ID_BIG_5 <p>Traditional Chinese as used in Taiwan and Hong Kong. See <code>FT_ENCODING_BIG5</code>.</p> TT_MS_ID_WANSUNG <p>Korean Extended Wansung encoding. See <code>FT_ENCODING_WANSUNG</code>.</p> TT_MS_ID_JOHAB <p>Korean Johab encoding. See <code>FT_ENCODING_JOHAB</code>.</p> TT_MS_ID_UCS_4 <p>UCS-4 or UTF-32 charmaps. This has been added to the OpenType specification version 1.4 (mid-2001).</p>"},{"location":"ft2-truetype_tables.html#tt_adobe_id_xxx","title":"TT_ADOBE_ID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_ADOBE_ID_STANDARD  0\n#define TT_ADOBE_ID_EXPERT    1\n#define TT_ADOBE_ID_CUSTOM    2\n#define TT_ADOBE_ID_LATIN_1   3\n</code></pre> <p>A list of valid values for the <code>encoding_id</code> for <code>TT_PLATFORM_ADOBE</code> charmaps. This is a FreeType-specific extension!</p> values TT_ADOBE_ID_STANDARD <p>Adobe standard encoding.</p> TT_ADOBE_ID_EXPERT <p>Adobe expert encoding.</p> TT_ADOBE_ID_CUSTOM <p>Adobe custom encoding.</p> TT_ADOBE_ID_LATIN_1 <p>Adobe Latin\u00a01 encoding.</p>"},{"location":"ft2-truetype_tables.html#tt_mac_langid_xxx","title":"TT_MAC_LANGID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_MAC_LANGID_ENGLISH                       0\n#define TT_MAC_LANGID_FRENCH                        1\n#define TT_MAC_LANGID_GERMAN                        2\n#define TT_MAC_LANGID_ITALIAN                       3\n#define TT_MAC_LANGID_DUTCH                         4\n#define TT_MAC_LANGID_SWEDISH                       5\n#define TT_MAC_LANGID_SPANISH                       6\n#define TT_MAC_LANGID_DANISH                        7\n#define TT_MAC_LANGID_PORTUGUESE                    8\n#define TT_MAC_LANGID_NORWEGIAN                     9\n#define TT_MAC_LANGID_HEBREW                       10\n#define TT_MAC_LANGID_JAPANESE                     11\n#define TT_MAC_LANGID_ARABIC                       12\n#define TT_MAC_LANGID_FINNISH                      13\n#define TT_MAC_LANGID_GREEK                        14\n#define TT_MAC_LANGID_ICELANDIC                    15\n#define TT_MAC_LANGID_MALTESE                      16\n#define TT_MAC_LANGID_TURKISH                      17\n#define TT_MAC_LANGID_CROATIAN                     18\n#define TT_MAC_LANGID_CHINESE_TRADITIONAL          19\n#define TT_MAC_LANGID_URDU                         20\n#define TT_MAC_LANGID_HINDI                        21\n#define TT_MAC_LANGID_THAI                         22\n#define TT_MAC_LANGID_KOREAN                       23\n#define TT_MAC_LANGID_LITHUANIAN                   24\n#define TT_MAC_LANGID_POLISH                       25\n#define TT_MAC_LANGID_HUNGARIAN                    26\n#define TT_MAC_LANGID_ESTONIAN                     27\n#define TT_MAC_LANGID_LETTISH                      28\n#define TT_MAC_LANGID_SAAMISK                      29\n#define TT_MAC_LANGID_FAEROESE                     30\n#define TT_MAC_LANGID_FARSI                        31\n#define TT_MAC_LANGID_RUSSIAN                      32\n#define TT_MAC_LANGID_CHINESE_SIMPLIFIED           33\n#define TT_MAC_LANGID_FLEMISH                      34\n#define TT_MAC_LANGID_IRISH                        35\n#define TT_MAC_LANGID_ALBANIAN                     36\n#define TT_MAC_LANGID_ROMANIAN                     37\n#define TT_MAC_LANGID_CZECH                        38\n#define TT_MAC_LANGID_SLOVAK                       39\n#define TT_MAC_LANGID_SLOVENIAN                    40\n#define TT_MAC_LANGID_YIDDISH                      41\n#define TT_MAC_LANGID_SERBIAN                      42\n#define TT_MAC_LANGID_MACEDONIAN                   43\n#define TT_MAC_LANGID_BULGARIAN                    44\n#define TT_MAC_LANGID_UKRAINIAN                    45\n#define TT_MAC_LANGID_BYELORUSSIAN                 46\n#define TT_MAC_LANGID_UZBEK                        47\n#define TT_MAC_LANGID_KAZAKH                       48\n#define TT_MAC_LANGID_AZERBAIJANI                  49\n#define TT_MAC_LANGID_AZERBAIJANI_CYRILLIC_SCRIPT  49\n#define TT_MAC_LANGID_AZERBAIJANI_ARABIC_SCRIPT    50\n#define TT_MAC_LANGID_ARMENIAN                     51\n#define TT_MAC_LANGID_GEORGIAN                     52\n#define TT_MAC_LANGID_MOLDAVIAN                    53\n#define TT_MAC_LANGID_KIRGHIZ                      54\n#define TT_MAC_LANGID_TAJIKI                       55\n#define TT_MAC_LANGID_TURKMEN                      56\n#define TT_MAC_LANGID_MONGOLIAN                    57\n#define TT_MAC_LANGID_MONGOLIAN_MONGOLIAN_SCRIPT   57\n#define TT_MAC_LANGID_MONGOLIAN_CYRILLIC_SCRIPT    58\n#define TT_MAC_LANGID_PASHTO                       59\n#define TT_MAC_LANGID_KURDISH                      60\n#define TT_MAC_LANGID_KASHMIRI                     61\n#define TT_MAC_LANGID_SINDHI                       62\n#define TT_MAC_LANGID_TIBETAN                      63\n#define TT_MAC_LANGID_NEPALI                       64\n#define TT_MAC_LANGID_SANSKRIT                     65\n#define TT_MAC_LANGID_MARATHI                      66\n#define TT_MAC_LANGID_BENGALI                      67\n#define TT_MAC_LANGID_ASSAMESE                     68\n#define TT_MAC_LANGID_GUJARATI                     69\n#define TT_MAC_LANGID_PUNJABI                      70\n#define TT_MAC_LANGID_ORIYA                        71\n#define TT_MAC_LANGID_MALAYALAM                    72\n#define TT_MAC_LANGID_KANNADA                      73\n#define TT_MAC_LANGID_TAMIL                        74\n#define TT_MAC_LANGID_TELUGU                       75\n#define TT_MAC_LANGID_SINHALESE                    76\n#define TT_MAC_LANGID_BURMESE                      77\n#define TT_MAC_LANGID_KHMER                        78\n#define TT_MAC_LANGID_LAO                          79\n#define TT_MAC_LANGID_VIETNAMESE                   80\n#define TT_MAC_LANGID_INDONESIAN                   81\n#define TT_MAC_LANGID_TAGALOG                      82\n#define TT_MAC_LANGID_MALAY_ROMAN_SCRIPT           83\n#define TT_MAC_LANGID_MALAY_ARABIC_SCRIPT          84\n#define TT_MAC_LANGID_AMHARIC                      85\n#define TT_MAC_LANGID_TIGRINYA                     86\n#define TT_MAC_LANGID_GALLA                        87\n#define TT_MAC_LANGID_SOMALI                       88\n#define TT_MAC_LANGID_SWAHILI                      89\n#define TT_MAC_LANGID_RUANDA                       90\n#define TT_MAC_LANGID_RUNDI                        91\n#define TT_MAC_LANGID_CHEWA                        92\n#define TT_MAC_LANGID_MALAGASY                     93\n#define TT_MAC_LANGID_ESPERANTO                    94\n#define TT_MAC_LANGID_WELSH                       128\n#define TT_MAC_LANGID_BASQUE                      129\n#define TT_MAC_LANGID_CATALAN                     130\n#define TT_MAC_LANGID_LATIN                       131\n#define TT_MAC_LANGID_QUECHUA                     132\n#define TT_MAC_LANGID_GUARANI                     133\n#define TT_MAC_LANGID_AYMARA                      134\n#define TT_MAC_LANGID_TATAR                       135\n#define TT_MAC_LANGID_UIGHUR                      136\n#define TT_MAC_LANGID_DZONGKHA                    137\n#define TT_MAC_LANGID_JAVANESE                    138\n#define TT_MAC_LANGID_SUNDANESE                   139\n\n  /* The following codes are new as of 2000-03-10 */\n#define TT_MAC_LANGID_GALICIAN                    140\n#define TT_MAC_LANGID_AFRIKAANS                   141\n#define TT_MAC_LANGID_BRETON                      142\n#define TT_MAC_LANGID_INUKTITUT                   143\n#define TT_MAC_LANGID_SCOTTISH_GAELIC             144\n#define TT_MAC_LANGID_MANX_GAELIC                 145\n#define TT_MAC_LANGID_IRISH_GAELIC                146\n#define TT_MAC_LANGID_TONGAN                      147\n#define TT_MAC_LANGID_GREEK_POLYTONIC             148\n#define TT_MAC_LANGID_GREELANDIC                  149\n#define TT_MAC_LANGID_AZERBAIJANI_ROMAN_SCRIPT    150\n</code></pre> <p>Possible values of the language identifier field in the name records of the SFNT \u2018name\u2019 table if the \u2018platform\u2019 identifier code is <code>TT_PLATFORM_MACINTOSH</code>. These values are also used as return values for function <code>FT_Get_CMap_Language_ID</code>.</p> <p>The canonical source for Apple's IDs is</p> <p>https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html</p>"},{"location":"ft2-truetype_tables.html#tt_ms_langid_xxx","title":"TT_MS_LANGID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_MS_LANGID_ARABIC_SAUDI_ARABIA               0x0401\n#define TT_MS_LANGID_ARABIC_IRAQ                       0x0801\n#define TT_MS_LANGID_ARABIC_EGYPT                      0x0C01\n#define TT_MS_LANGID_ARABIC_LIBYA                      0x1001\n#define TT_MS_LANGID_ARABIC_ALGERIA                    0x1401\n#define TT_MS_LANGID_ARABIC_MOROCCO                    0x1801\n#define TT_MS_LANGID_ARABIC_TUNISIA                    0x1C01\n#define TT_MS_LANGID_ARABIC_OMAN                       0x2001\n#define TT_MS_LANGID_ARABIC_YEMEN                      0x2401\n#define TT_MS_LANGID_ARABIC_SYRIA                      0x2801\n#define TT_MS_LANGID_ARABIC_JORDAN                     0x2C01\n#define TT_MS_LANGID_ARABIC_LEBANON                    0x3001\n#define TT_MS_LANGID_ARABIC_KUWAIT                     0x3401\n#define TT_MS_LANGID_ARABIC_UAE                        0x3801\n#define TT_MS_LANGID_ARABIC_BAHRAIN                    0x3C01\n#define TT_MS_LANGID_ARABIC_QATAR                      0x4001\n#define TT_MS_LANGID_BULGARIAN_BULGARIA                0x0402\n#define TT_MS_LANGID_CATALAN_CATALAN                   0x0403\n#define TT_MS_LANGID_CHINESE_TAIWAN                    0x0404\n#define TT_MS_LANGID_CHINESE_PRC                       0x0804\n#define TT_MS_LANGID_CHINESE_HONG_KONG                 0x0C04\n#define TT_MS_LANGID_CHINESE_SINGAPORE                 0x1004\n#define TT_MS_LANGID_CHINESE_MACAO                     0x1404\n#define TT_MS_LANGID_CZECH_CZECH_REPUBLIC              0x0405\n#define TT_MS_LANGID_DANISH_DENMARK                    0x0406\n#define TT_MS_LANGID_GERMAN_GERMANY                    0x0407\n#define TT_MS_LANGID_GERMAN_SWITZERLAND                0x0807\n#define TT_MS_LANGID_GERMAN_AUSTRIA                    0x0C07\n#define TT_MS_LANGID_GERMAN_LUXEMBOURG                 0x1007\n#define TT_MS_LANGID_GERMAN_LIECHTENSTEIN              0x1407\n#define TT_MS_LANGID_GREEK_GREECE                      0x0408\n#define TT_MS_LANGID_ENGLISH_UNITED_STATES             0x0409\n#define TT_MS_LANGID_ENGLISH_UNITED_KINGDOM            0x0809\n#define TT_MS_LANGID_ENGLISH_AUSTRALIA                 0x0C09\n#define TT_MS_LANGID_ENGLISH_CANADA                    0x1009\n#define TT_MS_LANGID_ENGLISH_NEW_ZEALAND               0x1409\n#define TT_MS_LANGID_ENGLISH_IRELAND                   0x1809\n#define TT_MS_LANGID_ENGLISH_SOUTH_AFRICA              0x1C09\n#define TT_MS_LANGID_ENGLISH_JAMAICA                   0x2009\n#define TT_MS_LANGID_ENGLISH_CARIBBEAN                 0x2409\n#define TT_MS_LANGID_ENGLISH_BELIZE                    0x2809\n#define TT_MS_LANGID_ENGLISH_TRINIDAD                  0x2C09\n#define TT_MS_LANGID_ENGLISH_ZIMBABWE                  0x3009\n#define TT_MS_LANGID_ENGLISH_PHILIPPINES               0x3409\n#define TT_MS_LANGID_ENGLISH_INDIA                     0x4009\n#define TT_MS_LANGID_ENGLISH_MALAYSIA                  0x4409\n#define TT_MS_LANGID_ENGLISH_SINGAPORE                 0x4809\n#define TT_MS_LANGID_SPANISH_SPAIN_TRADITIONAL_SORT    0x040A\n#define TT_MS_LANGID_SPANISH_MEXICO                    0x080A\n#define TT_MS_LANGID_SPANISH_SPAIN_MODERN_SORT         0x0C0A\n#define TT_MS_LANGID_SPANISH_GUATEMALA                 0x100A\n#define TT_MS_LANGID_SPANISH_COSTA_RICA                0x140A\n#define TT_MS_LANGID_SPANISH_PANAMA                    0x180A\n#define TT_MS_LANGID_SPANISH_DOMINICAN_REPUBLIC        0x1C0A\n#define TT_MS_LANGID_SPANISH_VENEZUELA                 0x200A\n#define TT_MS_LANGID_SPANISH_COLOMBIA                  0x240A\n#define TT_MS_LANGID_SPANISH_PERU                      0x280A\n#define TT_MS_LANGID_SPANISH_ARGENTINA                 0x2C0A\n#define TT_MS_LANGID_SPANISH_ECUADOR                   0x300A\n#define TT_MS_LANGID_SPANISH_CHILE                     0x340A\n#define TT_MS_LANGID_SPANISH_URUGUAY                   0x380A\n#define TT_MS_LANGID_SPANISH_PARAGUAY                  0x3C0A\n#define TT_MS_LANGID_SPANISH_BOLIVIA                   0x400A\n#define TT_MS_LANGID_SPANISH_EL_SALVADOR               0x440A\n#define TT_MS_LANGID_SPANISH_HONDURAS                  0x480A\n#define TT_MS_LANGID_SPANISH_NICARAGUA                 0x4C0A\n#define TT_MS_LANGID_SPANISH_PUERTO_RICO               0x500A\n#define TT_MS_LANGID_SPANISH_UNITED_STATES             0x540A\n#define TT_MS_LANGID_FINNISH_FINLAND                   0x040B\n#define TT_MS_LANGID_FRENCH_FRANCE                     0x040C\n#define TT_MS_LANGID_FRENCH_BELGIUM                    0x080C\n#define TT_MS_LANGID_FRENCH_CANADA                     0x0C0C\n#define TT_MS_LANGID_FRENCH_SWITZERLAND                0x100C\n#define TT_MS_LANGID_FRENCH_LUXEMBOURG                 0x140C\n#define TT_MS_LANGID_FRENCH_MONACO                     0x180C\n#define TT_MS_LANGID_HEBREW_ISRAEL                     0x040D\n#define TT_MS_LANGID_HUNGARIAN_HUNGARY                 0x040E\n#define TT_MS_LANGID_ICELANDIC_ICELAND                 0x040F\n#define TT_MS_LANGID_ITALIAN_ITALY                     0x0410\n#define TT_MS_LANGID_ITALIAN_SWITZERLAND               0x0810\n#define TT_MS_LANGID_JAPANESE_JAPAN                    0x0411\n#define TT_MS_LANGID_KOREAN_KOREA                      0x0412\n#define TT_MS_LANGID_DUTCH_NETHERLANDS                 0x0413\n#define TT_MS_LANGID_DUTCH_BELGIUM                     0x0813\n#define TT_MS_LANGID_NORWEGIAN_NORWAY_BOKMAL           0x0414\n#define TT_MS_LANGID_NORWEGIAN_NORWAY_NYNORSK          0x0814\n#define TT_MS_LANGID_POLISH_POLAND                     0x0415\n#define TT_MS_LANGID_PORTUGUESE_BRAZIL                 0x0416\n#define TT_MS_LANGID_PORTUGUESE_PORTUGAL               0x0816\n#define TT_MS_LANGID_ROMANSH_SWITZERLAND               0x0417\n#define TT_MS_LANGID_ROMANIAN_ROMANIA                  0x0418\n#define TT_MS_LANGID_RUSSIAN_RUSSIA                    0x0419\n#define TT_MS_LANGID_CROATIAN_CROATIA                  0x041A\n#define TT_MS_LANGID_SERBIAN_SERBIA_LATIN              0x081A\n#define TT_MS_LANGID_SERBIAN_SERBIA_CYRILLIC           0x0C1A\n#define TT_MS_LANGID_CROATIAN_BOSNIA_HERZEGOVINA       0x101A\n#define TT_MS_LANGID_BOSNIAN_BOSNIA_HERZEGOVINA        0x141A\n#define TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_LATIN         0x181A\n#define TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_CYRILLIC      0x1C1A\n#define TT_MS_LANGID_BOSNIAN_BOSNIA_HERZ_CYRILLIC      0x201A\n#define TT_MS_LANGID_SLOVAK_SLOVAKIA                   0x041B\n#define TT_MS_LANGID_ALBANIAN_ALBANIA                  0x041C\n#define TT_MS_LANGID_SWEDISH_SWEDEN                    0x041D\n#define TT_MS_LANGID_SWEDISH_FINLAND                   0x081D\n#define TT_MS_LANGID_THAI_THAILAND                     0x041E\n#define TT_MS_LANGID_TURKISH_TURKEY                    0x041F\n#define TT_MS_LANGID_URDU_PAKISTAN                     0x0420\n#define TT_MS_LANGID_INDONESIAN_INDONESIA              0x0421\n#define TT_MS_LANGID_UKRAINIAN_UKRAINE                 0x0422\n#define TT_MS_LANGID_BELARUSIAN_BELARUS                0x0423\n#define TT_MS_LANGID_SLOVENIAN_SLOVENIA                0x0424\n#define TT_MS_LANGID_ESTONIAN_ESTONIA                  0x0425\n#define TT_MS_LANGID_LATVIAN_LATVIA                    0x0426\n#define TT_MS_LANGID_LITHUANIAN_LITHUANIA              0x0427\n#define TT_MS_LANGID_TAJIK_TAJIKISTAN                  0x0428\n#define TT_MS_LANGID_VIETNAMESE_VIET_NAM               0x042A\n#define TT_MS_LANGID_ARMENIAN_ARMENIA                  0x042B\n#define TT_MS_LANGID_AZERI_AZERBAIJAN_LATIN            0x042C\n#define TT_MS_LANGID_AZERI_AZERBAIJAN_CYRILLIC         0x082C\n#define TT_MS_LANGID_BASQUE_BASQUE                     0x042D\n#define TT_MS_LANGID_UPPER_SORBIAN_GERMANY             0x042E\n#define TT_MS_LANGID_LOWER_SORBIAN_GERMANY             0x082E\n#define TT_MS_LANGID_MACEDONIAN_MACEDONIA              0x042F\n#define TT_MS_LANGID_SETSWANA_SOUTH_AFRICA             0x0432\n#define TT_MS_LANGID_ISIXHOSA_SOUTH_AFRICA             0x0434\n#define TT_MS_LANGID_ISIZULU_SOUTH_AFRICA              0x0435\n#define TT_MS_LANGID_AFRIKAANS_SOUTH_AFRICA            0x0436\n#define TT_MS_LANGID_GEORGIAN_GEORGIA                  0x0437\n#define TT_MS_LANGID_FAEROESE_FAEROE_ISLANDS           0x0438\n#define TT_MS_LANGID_HINDI_INDIA                       0x0439\n#define TT_MS_LANGID_MALTESE_MALTA                     0x043A\n#define TT_MS_LANGID_SAMI_NORTHERN_NORWAY              0x043B\n#define TT_MS_LANGID_SAMI_NORTHERN_SWEDEN              0x083B\n#define TT_MS_LANGID_SAMI_NORTHERN_FINLAND             0x0C3B\n#define TT_MS_LANGID_SAMI_LULE_NORWAY                  0x103B\n#define TT_MS_LANGID_SAMI_LULE_SWEDEN                  0x143B\n#define TT_MS_LANGID_SAMI_SOUTHERN_NORWAY              0x183B\n#define TT_MS_LANGID_SAMI_SOUTHERN_SWEDEN              0x1C3B\n#define TT_MS_LANGID_SAMI_SKOLT_FINLAND                0x203B\n#define TT_MS_LANGID_SAMI_INARI_FINLAND                0x243B\n#define TT_MS_LANGID_IRISH_IRELAND                     0x083C\n#define TT_MS_LANGID_MALAY_MALAYSIA                    0x043E\n#define TT_MS_LANGID_MALAY_BRUNEI_DARUSSALAM           0x083E\n#define TT_MS_LANGID_KAZAKH_KAZAKHSTAN                 0x043F\n#define TT_MS_LANGID_KYRGYZ_KYRGYZSTAN /* Cyrillic */  0x0440\n#define TT_MS_LANGID_KISWAHILI_KENYA                   0x0441\n#define TT_MS_LANGID_TURKMEN_TURKMENISTAN              0x0442\n#define TT_MS_LANGID_UZBEK_UZBEKISTAN_LATIN            0x0443\n#define TT_MS_LANGID_UZBEK_UZBEKISTAN_CYRILLIC         0x0843\n#define TT_MS_LANGID_TATAR_RUSSIA                      0x0444\n#define TT_MS_LANGID_BENGALI_INDIA                     0x0445\n#define TT_MS_LANGID_BENGALI_BANGLADESH                0x0845\n#define TT_MS_LANGID_PUNJABI_INDIA                     0x0446\n#define TT_MS_LANGID_GUJARATI_INDIA                    0x0447\n#define TT_MS_LANGID_ODIA_INDIA                        0x0448\n#define TT_MS_LANGID_TAMIL_INDIA                       0x0449\n#define TT_MS_LANGID_TELUGU_INDIA                      0x044A\n#define TT_MS_LANGID_KANNADA_INDIA                     0x044B\n#define TT_MS_LANGID_MALAYALAM_INDIA                   0x044C\n#define TT_MS_LANGID_ASSAMESE_INDIA                    0x044D\n#define TT_MS_LANGID_MARATHI_INDIA                     0x044E\n#define TT_MS_LANGID_SANSKRIT_INDIA                    0x044F\n#define TT_MS_LANGID_MONGOLIAN_MONGOLIA /* Cyrillic */ 0x0450\n#define TT_MS_LANGID_MONGOLIAN_PRC                     0x0850\n#define TT_MS_LANGID_TIBETAN_PRC                       0x0451\n#define TT_MS_LANGID_WELSH_UNITED_KINGDOM              0x0452\n#define TT_MS_LANGID_KHMER_CAMBODIA                    0x0453\n#define TT_MS_LANGID_LAO_LAOS                          0x0454\n#define TT_MS_LANGID_GALICIAN_GALICIAN                 0x0456\n#define TT_MS_LANGID_KONKANI_INDIA                     0x0457\n#define TT_MS_LANGID_SYRIAC_SYRIA                      0x045A\n#define TT_MS_LANGID_SINHALA_SRI_LANKA                 0x045B\n#define TT_MS_LANGID_INUKTITUT_CANADA                  0x045D\n#define TT_MS_LANGID_INUKTITUT_CANADA_LATIN            0x085D\n#define TT_MS_LANGID_AMHARIC_ETHIOPIA                  0x045E\n#define TT_MS_LANGID_TAMAZIGHT_ALGERIA                 0x085F\n#define TT_MS_LANGID_NEPALI_NEPAL                      0x0461\n#define TT_MS_LANGID_FRISIAN_NETHERLANDS               0x0462\n#define TT_MS_LANGID_PASHTO_AFGHANISTAN                0x0463\n#define TT_MS_LANGID_FILIPINO_PHILIPPINES              0x0464\n#define TT_MS_LANGID_DHIVEHI_MALDIVES                  0x0465\n#define TT_MS_LANGID_HAUSA_NIGERIA                     0x0468\n#define TT_MS_LANGID_YORUBA_NIGERIA                    0x046A\n#define TT_MS_LANGID_QUECHUA_BOLIVIA                   0x046B\n#define TT_MS_LANGID_QUECHUA_ECUADOR                   0x086B\n#define TT_MS_LANGID_QUECHUA_PERU                      0x0C6B\n#define TT_MS_LANGID_SESOTHO_SA_LEBOA_SOUTH_AFRICA     0x046C\n#define TT_MS_LANGID_BASHKIR_RUSSIA                    0x046D\n#define TT_MS_LANGID_LUXEMBOURGISH_LUXEMBOURG          0x046E\n#define TT_MS_LANGID_GREENLANDIC_GREENLAND             0x046F\n#define TT_MS_LANGID_IGBO_NIGERIA                      0x0470\n#define TT_MS_LANGID_YI_PRC                            0x0478\n#define TT_MS_LANGID_MAPUDUNGUN_CHILE                  0x047A\n#define TT_MS_LANGID_MOHAWK_MOHAWK                     0x047C\n#define TT_MS_LANGID_BRETON_FRANCE                     0x047E\n#define TT_MS_LANGID_UIGHUR_PRC                        0x0480\n#define TT_MS_LANGID_MAORI_NEW_ZEALAND                 0x0481\n#define TT_MS_LANGID_OCCITAN_FRANCE                    0x0482\n#define TT_MS_LANGID_CORSICAN_FRANCE                   0x0483\n#define TT_MS_LANGID_ALSATIAN_FRANCE                   0x0484\n#define TT_MS_LANGID_YAKUT_RUSSIA                      0x0485\n#define TT_MS_LANGID_KICHE_GUATEMALA                   0x0486\n#define TT_MS_LANGID_KINYARWANDA_RWANDA                0x0487\n#define TT_MS_LANGID_WOLOF_SENEGAL                     0x0488\n#define TT_MS_LANGID_DARI_AFGHANISTAN                  0x048C\n</code></pre> <p>Possible values of the language identifier field in the name records of the SFNT \u2018name\u2019 table if the \u2018platform\u2019 identifier code is <code>TT_PLATFORM_MICROSOFT</code>. These values are also used as return values for function <code>FT_Get_CMap_Language_ID</code>.</p> <p>The canonical source for Microsoft's IDs is</p> <p>https://docs.microsoft.com/en-us/windows/desktop/Intl/language-identifier-constants-and-strings ,</p> <p>however, we only provide macros for language identifiers present in the OpenType specification: Microsoft has abandoned the concept of LCIDs (language code identifiers), and format\u00a01 of the \u2018name\u2019 table provides a better mechanism for languages not covered here.</p> <p>More legacy values not listed in the reference can be found in the <code>FT_TRUETYPE_IDS_H</code> header file.</p>"},{"location":"ft2-truetype_tables.html#tt_name_id_xxx","title":"TT_NAME_ID_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>#define TT_NAME_ID_COPYRIGHT              0\n#define TT_NAME_ID_FONT_FAMILY            1\n#define TT_NAME_ID_FONT_SUBFAMILY         2\n#define TT_NAME_ID_UNIQUE_ID              3\n#define TT_NAME_ID_FULL_NAME              4\n#define TT_NAME_ID_VERSION_STRING         5\n#define TT_NAME_ID_PS_NAME                6\n#define TT_NAME_ID_TRADEMARK              7\n\n  /* the following values are from the OpenType spec */\n#define TT_NAME_ID_MANUFACTURER           8\n#define TT_NAME_ID_DESIGNER               9\n#define TT_NAME_ID_DESCRIPTION            10\n#define TT_NAME_ID_VENDOR_URL             11\n#define TT_NAME_ID_DESIGNER_URL           12\n#define TT_NAME_ID_LICENSE                13\n#define TT_NAME_ID_LICENSE_URL            14\n  /* number 15 is reserved */\n#define TT_NAME_ID_TYPOGRAPHIC_FAMILY     16\n#define TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY  17\n#define TT_NAME_ID_MAC_FULL_NAME          18\n\n  /* The following code is new as of 2000-01-21 */\n#define TT_NAME_ID_SAMPLE_TEXT            19\n\n  /* This is new in OpenType 1.3 */\n#define TT_NAME_ID_CID_FINDFONT_NAME      20\n\n  /* This is new in OpenType 1.5 */\n#define TT_NAME_ID_WWS_FAMILY             21\n#define TT_NAME_ID_WWS_SUBFAMILY          22\n\n  /* This is new in OpenType 1.7 */\n#define TT_NAME_ID_LIGHT_BACKGROUND       23\n#define TT_NAME_ID_DARK_BACKGROUND        24\n\n  /* This is new in OpenType 1.8 */\n#define TT_NAME_ID_VARIATIONS_PREFIX      25\n\n  /* these two values are deprecated */\n#define TT_NAME_ID_PREFERRED_FAMILY     TT_NAME_ID_TYPOGRAPHIC_FAMILY\n#define TT_NAME_ID_PREFERRED_SUBFAMILY  TT_NAME_ID_TYPOGRAPHIC_SUBFAMILY\n</code></pre> <p>Possible values of the \u2018name\u2019 identifier field in the name records of an SFNT \u2018name\u2019 table. These values are platform independent.</p>"},{"location":"ft2-truetype_tables.html#tt_ucr_xxx","title":"TT_UCR_XXX","text":"<p>Defined in FT_TRUETYPE_IDS_H (freetype/ttnameid.h).</p> <pre><code>  /* ulUnicodeRange1 */\n  /* --------------- */\n\n  /* Bit  0   Basic Latin */\n#define TT_UCR_BASIC_LATIN                     (1L &lt;&lt;  0) /* U+0020-U+007E */\n  /* Bit  1   C1 Controls and Latin-1 Supplement */\n#define TT_UCR_LATIN1_SUPPLEMENT               (1L &lt;&lt;  1) /* U+0080-U+00FF */\n  /* Bit  2   Latin Extended-A */\n#define TT_UCR_LATIN_EXTENDED_A                (1L &lt;&lt;  2) /* U+0100-U+017F */\n  /* Bit  3   Latin Extended-B */\n#define TT_UCR_LATIN_EXTENDED_B                (1L &lt;&lt;  3) /* U+0180-U+024F */\n  /* Bit  4   IPA Extensions                 */\n  /*          Phonetic Extensions            */\n  /*          Phonetic Extensions Supplement */\n#define TT_UCR_IPA_EXTENSIONS                  (1L &lt;&lt;  4) /* U+0250-U+02AF */\n                                                          /* U+1D00-U+1D7F */\n                                                          /* U+1D80-U+1DBF */\n  /* Bit  5   Spacing Modifier Letters */\n  /*          Modifier Tone Letters    */\n#define TT_UCR_SPACING_MODIFIER                (1L &lt;&lt;  5) /* U+02B0-U+02FF */\n                                                          /* U+A700-U+A71F */\n  /* Bit  6   Combining Diacritical Marks            */\n  /*          Combining Diacritical Marks Supplement */\n#define TT_UCR_COMBINING_DIACRITICAL_MARKS     (1L &lt;&lt;  6) /* U+0300-U+036F */\n                                                          /* U+1DC0-U+1DFF */\n  /* Bit  7   Greek and Coptic */\n#define TT_UCR_GREEK                           (1L &lt;&lt;  7) /* U+0370-U+03FF */\n  /* Bit  8   Coptic */\n#define TT_UCR_COPTIC                          (1L &lt;&lt;  8) /* U+2C80-U+2CFF */\n  /* Bit  9   Cyrillic            */\n  /*          Cyrillic Supplement */\n  /*          Cyrillic Extended-A */\n  /*          Cyrillic Extended-B */\n#define TT_UCR_CYRILLIC                        (1L &lt;&lt;  9) /* U+0400-U+04FF */\n                                                          /* U+0500-U+052F */\n                                                          /* U+2DE0-U+2DFF */\n                                                          /* U+A640-U+A69F */\n  /* Bit 10   Armenian */\n#define TT_UCR_ARMENIAN                        (1L &lt;&lt; 10) /* U+0530-U+058F */\n  /* Bit 11   Hebrew */\n#define TT_UCR_HEBREW                          (1L &lt;&lt; 11) /* U+0590-U+05FF */\n  /* Bit 12   Vai */\n#define TT_UCR_VAI                             (1L &lt;&lt; 12) /* U+A500-U+A63F */\n  /* Bit 13   Arabic            */\n  /*          Arabic Supplement */\n#define TT_UCR_ARABIC                          (1L &lt;&lt; 13) /* U+0600-U+06FF */\n                                                          /* U+0750-U+077F */\n  /* Bit 14   NKo */\n#define TT_UCR_NKO                             (1L &lt;&lt; 14) /* U+07C0-U+07FF */\n  /* Bit 15   Devanagari */\n#define TT_UCR_DEVANAGARI                      (1L &lt;&lt; 15) /* U+0900-U+097F */\n  /* Bit 16   Bengali */\n#define TT_UCR_BENGALI                         (1L &lt;&lt; 16) /* U+0980-U+09FF */\n  /* Bit 17   Gurmukhi */\n#define TT_UCR_GURMUKHI                        (1L &lt;&lt; 17) /* U+0A00-U+0A7F */\n  /* Bit 18   Gujarati */\n#define TT_UCR_GUJARATI                        (1L &lt;&lt; 18) /* U+0A80-U+0AFF */\n  /* Bit 19   Oriya */\n#define TT_UCR_ORIYA                           (1L &lt;&lt; 19) /* U+0B00-U+0B7F */\n  /* Bit 20   Tamil */\n#define TT_UCR_TAMIL                           (1L &lt;&lt; 20) /* U+0B80-U+0BFF */\n  /* Bit 21   Telugu */\n#define TT_UCR_TELUGU                          (1L &lt;&lt; 21) /* U+0C00-U+0C7F */\n  /* Bit 22   Kannada */\n#define TT_UCR_KANNADA                         (1L &lt;&lt; 22) /* U+0C80-U+0CFF */\n  /* Bit 23   Malayalam */\n#define TT_UCR_MALAYALAM                       (1L &lt;&lt; 23) /* U+0D00-U+0D7F */\n  /* Bit 24   Thai */\n#define TT_UCR_THAI                            (1L &lt;&lt; 24) /* U+0E00-U+0E7F */\n  /* Bit 25   Lao */\n#define TT_UCR_LAO                             (1L &lt;&lt; 25) /* U+0E80-U+0EFF */\n  /* Bit 26   Georgian            */\n  /*          Georgian Supplement */\n#define TT_UCR_GEORGIAN                        (1L &lt;&lt; 26) /* U+10A0-U+10FF */\n                                                          /* U+2D00-U+2D2F */\n  /* Bit 27   Balinese */\n#define TT_UCR_BALINESE                        (1L &lt;&lt; 27) /* U+1B00-U+1B7F */\n  /* Bit 28   Hangul Jamo */\n#define TT_UCR_HANGUL_JAMO                     (1L &lt;&lt; 28) /* U+1100-U+11FF */\n  /* Bit 29   Latin Extended Additional */\n  /*          Latin Extended-C          */\n  /*          Latin Extended-D          */\n#define TT_UCR_LATIN_EXTENDED_ADDITIONAL       (1L &lt;&lt; 29) /* U+1E00-U+1EFF */\n                                                          /* U+2C60-U+2C7F */\n                                                          /* U+A720-U+A7FF */\n  /* Bit 30   Greek Extended */\n#define TT_UCR_GREEK_EXTENDED                  (1L &lt;&lt; 30) /* U+1F00-U+1FFF */\n  /* Bit 31   General Punctuation      */\n  /*          Supplemental Punctuation */\n#define TT_UCR_GENERAL_PUNCTUATION             (1L &lt;&lt; 31) /* U+2000-U+206F */\n                                                          /* U+2E00-U+2E7F */\n\n  /* ulUnicodeRange2 */\n  /* --------------- */\n\n  /* Bit 32   Superscripts And Subscripts */\n#define TT_UCR_SUPERSCRIPTS_SUBSCRIPTS         (1L &lt;&lt;  0) /* U+2070-U+209F */\n  /* Bit 33   Currency Symbols */\n#define TT_UCR_CURRENCY_SYMBOLS                (1L &lt;&lt;  1) /* U+20A0-U+20CF */\n  /* Bit 34   Combining Diacritical Marks For Symbols */\n#define TT_UCR_COMBINING_DIACRITICAL_MARKS_SYMB \\\n                                               (1L &lt;&lt;  2) /* U+20D0-U+20FF */\n  /* Bit 35   Letterlike Symbols */\n#define TT_UCR_LETTERLIKE_SYMBOLS              (1L &lt;&lt;  3) /* U+2100-U+214F */\n  /* Bit 36   Number Forms */\n#define TT_UCR_NUMBER_FORMS                    (1L &lt;&lt;  4) /* U+2150-U+218F */\n  /* Bit 37   Arrows                           */\n  /*          Supplemental Arrows-A            */\n  /*          Supplemental Arrows-B            */\n  /*          Miscellaneous Symbols and Arrows */\n#define TT_UCR_ARROWS                          (1L &lt;&lt;  5) /* U+2190-U+21FF */\n                                                          /* U+27F0-U+27FF */\n                                                          /* U+2900-U+297F */\n                                                          /* U+2B00-U+2BFF */\n  /* Bit 38   Mathematical Operators               */\n  /*          Supplemental Mathematical Operators  */\n  /*          Miscellaneous Mathematical Symbols-A */\n  /*          Miscellaneous Mathematical Symbols-B */\n#define TT_UCR_MATHEMATICAL_OPERATORS          (1L &lt;&lt;  6) /* U+2200-U+22FF */\n                                                          /* U+2A00-U+2AFF */\n                                                          /* U+27C0-U+27EF */\n                                                          /* U+2980-U+29FF */\n  /* Bit 39 Miscellaneous Technical */\n#define TT_UCR_MISCELLANEOUS_TECHNICAL         (1L &lt;&lt;  7) /* U+2300-U+23FF */\n  /* Bit 40   Control Pictures */\n#define TT_UCR_CONTROL_PICTURES                (1L &lt;&lt;  8) /* U+2400-U+243F */\n  /* Bit 41   Optical Character Recognition */\n#define TT_UCR_OCR                             (1L &lt;&lt;  9) /* U+2440-U+245F */\n  /* Bit 42   Enclosed Alphanumerics */\n#define TT_UCR_ENCLOSED_ALPHANUMERICS          (1L &lt;&lt; 10) /* U+2460-U+24FF */\n  /* Bit 43   Box Drawing */\n#define TT_UCR_BOX_DRAWING                     (1L &lt;&lt; 11) /* U+2500-U+257F */\n  /* Bit 44   Block Elements */\n#define TT_UCR_BLOCK_ELEMENTS                  (1L &lt;&lt; 12) /* U+2580-U+259F */\n  /* Bit 45   Geometric Shapes */\n#define TT_UCR_GEOMETRIC_SHAPES                (1L &lt;&lt; 13) /* U+25A0-U+25FF */\n  /* Bit 46   Miscellaneous Symbols */\n#define TT_UCR_MISCELLANEOUS_SYMBOLS           (1L &lt;&lt; 14) /* U+2600-U+26FF */\n  /* Bit 47   Dingbats */\n#define TT_UCR_DINGBATS                        (1L &lt;&lt; 15) /* U+2700-U+27BF */\n  /* Bit 48   CJK Symbols and Punctuation */\n#define TT_UCR_CJK_SYMBOLS                     (1L &lt;&lt; 16) /* U+3000-U+303F */\n  /* Bit 49   Hiragana */\n#define TT_UCR_HIRAGANA                        (1L &lt;&lt; 17) /* U+3040-U+309F */\n  /* Bit 50   Katakana                     */\n  /*          Katakana Phonetic Extensions */\n#define TT_UCR_KATAKANA                        (1L &lt;&lt; 18) /* U+30A0-U+30FF */\n                                                          /* U+31F0-U+31FF */\n  /* Bit 51   Bopomofo          */\n  /*          Bopomofo Extended */\n#define TT_UCR_BOPOMOFO                        (1L &lt;&lt; 19) /* U+3100-U+312F */\n                                                          /* U+31A0-U+31BF */\n  /* Bit 52   Hangul Compatibility Jamo */\n#define TT_UCR_HANGUL_COMPATIBILITY_JAMO       (1L &lt;&lt; 20) /* U+3130-U+318F */\n  /* Bit 53   Phags-Pa */\n#define TT_UCR_CJK_MISC                        (1L &lt;&lt; 21) /* U+A840-U+A87F */\n#define TT_UCR_KANBUN  TT_UCR_CJK_MISC /* deprecated */\n#define TT_UCR_PHAGSPA\n  /* Bit 54   Enclosed CJK Letters and Months */\n#define TT_UCR_ENCLOSED_CJK_LETTERS_MONTHS     (1L &lt;&lt; 22) /* U+3200-U+32FF */\n  /* Bit 55   CJK Compatibility */\n#define TT_UCR_CJK_COMPATIBILITY               (1L &lt;&lt; 23) /* U+3300-U+33FF */\n  /* Bit 56   Hangul Syllables */\n#define TT_UCR_HANGUL                          (1L &lt;&lt; 24) /* U+AC00-U+D7A3 */\n  /* Bit 57   High Surrogates              */\n  /*          High Private Use Surrogates  */\n  /*          Low Surrogates               */\n\n  /* According to OpenType specs v.1.3+,   */\n  /* setting bit 57 implies that there is  */\n  /* at least one codepoint beyond the     */\n  /* Basic Multilingual Plane that is      */\n  /* supported by this font.  So it really */\n  /* means &gt;= U+10000.                     */\n#define TT_UCR_SURROGATES                      (1L &lt;&lt; 25) /* U+D800-U+DB7F */\n                                                          /* U+DB80-U+DBFF */\n                                                          /* U+DC00-U+DFFF */\n#define TT_UCR_NON_PLANE_0  TT_UCR_SURROGATES\n  /* Bit 58  Phoenician */\n#define TT_UCR_PHOENICIAN                      (1L &lt;&lt; 26) /*U+10900-U+1091F*/\n  /* Bit 59   CJK Unified Ideographs             */\n  /*          CJK Radicals Supplement            */\n  /*          Kangxi Radicals                    */\n  /*          Ideographic Description Characters */\n  /*          CJK Unified Ideographs Extension A */\n  /*          CJK Unified Ideographs Extension B */\n  /*          Kanbun                             */\n#define TT_UCR_CJK_UNIFIED_IDEOGRAPHS          (1L &lt;&lt; 27) /* U+4E00-U+9FFF */\n                                                          /* U+2E80-U+2EFF */\n                                                          /* U+2F00-U+2FDF */\n                                                          /* U+2FF0-U+2FFF */\n                                                          /* U+3400-U+4DB5 */\n                                                          /*U+20000-U+2A6DF*/\n                                                          /* U+3190-U+319F */\n  /* Bit 60   Private Use */\n#define TT_UCR_PRIVATE_USE                     (1L &lt;&lt; 28) /* U+E000-U+F8FF */\n  /* Bit 61   CJK Strokes                             */\n  /*          CJK Compatibility Ideographs            */\n  /*          CJK Compatibility Ideographs Supplement */\n#define TT_UCR_CJK_COMPATIBILITY_IDEOGRAPHS    (1L &lt;&lt; 29) /* U+31C0-U+31EF */\n                                                          /* U+F900-U+FAFF */\n                                                          /*U+2F800-U+2FA1F*/\n  /* Bit 62   Alphabetic Presentation Forms */\n#define TT_UCR_ALPHABETIC_PRESENTATION_FORMS   (1L &lt;&lt; 30) /* U+FB00-U+FB4F */\n  /* Bit 63   Arabic Presentation Forms-A */\n#define TT_UCR_ARABIC_PRESENTATION_FORMS_A     (1L &lt;&lt; 31) /* U+FB50-U+FDFF */\n\n  /* ulUnicodeRange3 */\n  /* --------------- */\n\n  /* Bit 64   Combining Half Marks */\n#define TT_UCR_COMBINING_HALF_MARKS            (1L &lt;&lt;  0) /* U+FE20-U+FE2F */\n  /* Bit 65   Vertical forms          */\n  /*          CJK Compatibility Forms */\n#define TT_UCR_CJK_COMPATIBILITY_FORMS         (1L &lt;&lt;  1) /* U+FE10-U+FE1F */\n                                                          /* U+FE30-U+FE4F */\n  /* Bit 66   Small Form Variants */\n#define TT_UCR_SMALL_FORM_VARIANTS             (1L &lt;&lt;  2) /* U+FE50-U+FE6F */\n  /* Bit 67   Arabic Presentation Forms-B */\n#define TT_UCR_ARABIC_PRESENTATION_FORMS_B     (1L &lt;&lt;  3) /* U+FE70-U+FEFE */\n  /* Bit 68   Halfwidth and Fullwidth Forms */\n#define TT_UCR_HALFWIDTH_FULLWIDTH_FORMS       (1L &lt;&lt;  4) /* U+FF00-U+FFEF */\n  /* Bit 69   Specials */\n#define TT_UCR_SPECIALS                        (1L &lt;&lt;  5) /* U+FFF0-U+FFFD */\n  /* Bit 70   Tibetan */\n#define TT_UCR_TIBETAN                         (1L &lt;&lt;  6) /* U+0F00-U+0FFF */\n  /* Bit 71   Syriac */\n#define TT_UCR_SYRIAC                          (1L &lt;&lt;  7) /* U+0700-U+074F */\n  /* Bit 72   Thaana */\n#define TT_UCR_THAANA                          (1L &lt;&lt;  8) /* U+0780-U+07BF */\n  /* Bit 73   Sinhala */\n#define TT_UCR_SINHALA                         (1L &lt;&lt;  9) /* U+0D80-U+0DFF */\n  /* Bit 74   Myanmar */\n#define TT_UCR_MYANMAR                         (1L &lt;&lt; 10) /* U+1000-U+109F */\n  /* Bit 75   Ethiopic            */\n  /*          Ethiopic Supplement */\n  /*          Ethiopic Extended   */\n#define TT_UCR_ETHIOPIC                        (1L &lt;&lt; 11) /* U+1200-U+137F */\n                                                          /* U+1380-U+139F */\n                                                          /* U+2D80-U+2DDF */\n  /* Bit 76   Cherokee */\n#define TT_UCR_CHEROKEE                        (1L &lt;&lt; 12) /* U+13A0-U+13FF */\n  /* Bit 77   Unified Canadian Aboriginal Syllabics */\n#define TT_UCR_CANADIAN_ABORIGINAL_SYLLABICS   (1L &lt;&lt; 13) /* U+1400-U+167F */\n  /* Bit 78   Ogham */\n#define TT_UCR_OGHAM                           (1L &lt;&lt; 14) /* U+1680-U+169F */\n  /* Bit 79   Runic */\n#define TT_UCR_RUNIC                           (1L &lt;&lt; 15) /* U+16A0-U+16FF */\n  /* Bit 80   Khmer         */\n  /*          Khmer Symbols */\n#define TT_UCR_KHMER                           (1L &lt;&lt; 16) /* U+1780-U+17FF */\n                                                          /* U+19E0-U+19FF */\n  /* Bit 81   Mongolian */\n#define TT_UCR_MONGOLIAN                       (1L &lt;&lt; 17) /* U+1800-U+18AF */\n  /* Bit 82   Braille Patterns */\n#define TT_UCR_BRAILLE                         (1L &lt;&lt; 18) /* U+2800-U+28FF */\n  /* Bit 83   Yi Syllables */\n  /*          Yi Radicals  */\n#define TT_UCR_YI                              (1L &lt;&lt; 19) /* U+A000-U+A48F */\n                                                          /* U+A490-U+A4CF */\n  /* Bit 84   Tagalog  */\n  /*          Hanunoo  */\n  /*          Buhid    */\n  /*          Tagbanwa */\n#define TT_UCR_PHILIPPINE                      (1L &lt;&lt; 20) /* U+1700-U+171F */\n                                                          /* U+1720-U+173F */\n                                                          /* U+1740-U+175F */\n                                                          /* U+1760-U+177F */\n  /* Bit 85   Old Italic */\n#define TT_UCR_OLD_ITALIC                      (1L &lt;&lt; 21) /*U+10300-U+1032F*/\n  /* Bit 86   Gothic */\n#define TT_UCR_GOTHIC                          (1L &lt;&lt; 22) /*U+10330-U+1034F*/\n  /* Bit 87   Deseret */\n#define TT_UCR_DESERET                         (1L &lt;&lt; 23) /*U+10400-U+1044F*/\n  /* Bit 88   Byzantine Musical Symbols      */\n  /*          Musical Symbols                */\n  /*          Ancient Greek Musical Notation */\n#define TT_UCR_MUSICAL_SYMBOLS                 (1L &lt;&lt; 24) /*U+1D000-U+1D0FF*/\n                                                          /*U+1D100-U+1D1FF*/\n                                                          /*U+1D200-U+1D24F*/\n  /* Bit 89   Mathematical Alphanumeric Symbols */\n#define TT_UCR_MATH_ALPHANUMERIC_SYMBOLS       (1L &lt;&lt; 25) /*U+1D400-U+1D7FF*/\n  /* Bit 90   Private Use (plane 15) */\n  /*          Private Use (plane 16) */\n#define TT_UCR_PRIVATE_USE_SUPPLEMENTARY       (1L &lt;&lt; 26) /*U+F0000-U+FFFFD*/\n                                                        /*U+100000-U+10FFFD*/\n  /* Bit 91   Variation Selectors            */\n  /*          Variation Selectors Supplement */\n#define TT_UCR_VARIATION_SELECTORS             (1L &lt;&lt; 27) /* U+FE00-U+FE0F */\n                                                          /*U+E0100-U+E01EF*/\n  /* Bit 92   Tags */\n#define TT_UCR_TAGS                            (1L &lt;&lt; 28) /*U+E0000-U+E007F*/\n  /* Bit 93   Limbu */\n#define TT_UCR_LIMBU                           (1L &lt;&lt; 29) /* U+1900-U+194F */\n  /* Bit 94   Tai Le */\n#define TT_UCR_TAI_LE                          (1L &lt;&lt; 30) /* U+1950-U+197F */\n  /* Bit 95   New Tai Lue */\n#define TT_UCR_NEW_TAI_LUE                     (1L &lt;&lt; 31) /* U+1980-U+19DF */\n\n  /* ulUnicodeRange4 */\n  /* --------------- */\n\n  /* Bit 96   Buginese */\n#define TT_UCR_BUGINESE                        (1L &lt;&lt;  0) /* U+1A00-U+1A1F */\n  /* Bit 97   Glagolitic */\n#define TT_UCR_GLAGOLITIC                      (1L &lt;&lt;  1) /* U+2C00-U+2C5F */\n  /* Bit 98   Tifinagh */\n#define TT_UCR_TIFINAGH                        (1L &lt;&lt;  2) /* U+2D30-U+2D7F */\n  /* Bit 99   Yijing Hexagram Symbols */\n#define TT_UCR_YIJING                          (1L &lt;&lt;  3) /* U+4DC0-U+4DFF */\n  /* Bit 100  Syloti Nagri */\n#define TT_UCR_SYLOTI_NAGRI                    (1L &lt;&lt;  4) /* U+A800-U+A82F */\n  /* Bit 101  Linear B Syllabary */\n  /*          Linear B Ideograms */\n  /*          Aegean Numbers     */\n#define TT_UCR_LINEAR_B                        (1L &lt;&lt;  5) /*U+10000-U+1007F*/\n                                                          /*U+10080-U+100FF*/\n                                                          /*U+10100-U+1013F*/\n  /* Bit 102  Ancient Greek Numbers */\n#define TT_UCR_ANCIENT_GREEK_NUMBERS           (1L &lt;&lt;  6) /*U+10140-U+1018F*/\n  /* Bit 103  Ugaritic */\n#define TT_UCR_UGARITIC                        (1L &lt;&lt;  7) /*U+10380-U+1039F*/\n  /* Bit 104  Old Persian */\n#define TT_UCR_OLD_PERSIAN                     (1L &lt;&lt;  8) /*U+103A0-U+103DF*/\n  /* Bit 105  Shavian */\n#define TT_UCR_SHAVIAN                         (1L &lt;&lt;  9) /*U+10450-U+1047F*/\n  /* Bit 106  Osmanya */\n#define TT_UCR_OSMANYA                         (1L &lt;&lt; 10) /*U+10480-U+104AF*/\n  /* Bit 107  Cypriot Syllabary */\n#define TT_UCR_CYPRIOT_SYLLABARY               (1L &lt;&lt; 11) /*U+10800-U+1083F*/\n  /* Bit 108  Kharoshthi */\n#define TT_UCR_KHAROSHTHI                      (1L &lt;&lt; 12) /*U+10A00-U+10A5F*/\n  /* Bit 109  Tai Xuan Jing Symbols */\n#define TT_UCR_TAI_XUAN_JING                   (1L &lt;&lt; 13) /*U+1D300-U+1D35F*/\n  /* Bit 110  Cuneiform                         */\n  /*          Cuneiform Numbers and Punctuation */\n#define TT_UCR_CUNEIFORM                       (1L &lt;&lt; 14) /*U+12000-U+123FF*/\n                                                          /*U+12400-U+1247F*/\n  /* Bit 111  Counting Rod Numerals */\n#define TT_UCR_COUNTING_ROD_NUMERALS           (1L &lt;&lt; 15) /*U+1D360-U+1D37F*/\n  /* Bit 112  Sundanese */\n#define TT_UCR_SUNDANESE                       (1L &lt;&lt; 16) /* U+1B80-U+1BBF */\n  /* Bit 113  Lepcha */\n#define TT_UCR_LEPCHA                          (1L &lt;&lt; 17) /* U+1C00-U+1C4F */\n  /* Bit 114  Ol Chiki */\n#define TT_UCR_OL_CHIKI                        (1L &lt;&lt; 18) /* U+1C50-U+1C7F */\n  /* Bit 115  Saurashtra */\n#define TT_UCR_SAURASHTRA                      (1L &lt;&lt; 19) /* U+A880-U+A8DF */\n  /* Bit 116  Kayah Li */\n#define TT_UCR_KAYAH_LI                        (1L &lt;&lt; 20) /* U+A900-U+A92F */\n  /* Bit 117  Rejang */\n#define TT_UCR_REJANG                          (1L &lt;&lt; 21) /* U+A930-U+A95F */\n  /* Bit 118  Cham */\n#define TT_UCR_CHAM                            (1L &lt;&lt; 22) /* U+AA00-U+AA5F */\n  /* Bit 119  Ancient Symbols */\n#define TT_UCR_ANCIENT_SYMBOLS                 (1L &lt;&lt; 23) /*U+10190-U+101CF*/\n  /* Bit 120  Phaistos Disc */\n#define TT_UCR_PHAISTOS_DISC                   (1L &lt;&lt; 24) /*U+101D0-U+101FF*/\n  /* Bit 121  Carian */\n  /*          Lycian */\n  /*          Lydian */\n#define TT_UCR_OLD_ANATOLIAN                   (1L &lt;&lt; 25) /*U+102A0-U+102DF*/\n                                                          /*U+10280-U+1029F*/\n                                                          /*U+10920-U+1093F*/\n  /* Bit 122  Domino Tiles  */\n  /*          Mahjong Tiles */\n#define TT_UCR_GAME_TILES                      (1L &lt;&lt; 26) /*U+1F030-U+1F09F*/\n                                                          /*U+1F000-U+1F02F*/\n  /* Bit 123-127 Reserved for process-internal usage */\n</code></pre> <p>Possible bit mask values for the <code>ulUnicodeRangeX</code> fields in an SFNT \u2018OS/2\u2019 table.</p>"},{"location":"ft2-tt_driver.html","title":"The TrueType driver","text":"<p>FreeType \u00bb Docs \u00bb Controlling FreeType Modules \u00bb The TrueType driver</p>"},{"location":"ft2-tt_driver.html#the-truetype-driver","title":"The TrueType driver","text":""},{"location":"ft2-tt_driver.html#synopsis","title":"Synopsis","text":"<p>While FreeType's TrueType driver doesn't expose API functions by itself, it is possible to control its behaviour with <code>FT_Property_Set</code> and <code>FT_Property_Get</code>.</p> <p>The TrueType driver's module name is \u2018truetype\u2019; a single property <code>interpreter-version</code> is available, as documented in the \u2018Driver properties\u2019 section.</p> <p>To help understand the differences between interpreter versions, we introduce a list of definitions, kindly provided by Greg Hitchcock.</p> <p>Bi-Level Rendering</p> <p>Monochromatic rendering, exclusively used in the early days of TrueType by both Apple and Microsoft. Microsoft's GDI interface supported hinting of the right-side bearing point, such that the advance width could be non-linear. Most often this was done to achieve some level of glyph symmetry. To enable reasonable performance (e.g., not having to run hinting on all glyphs just to get the widths) there was a bit in the head table indicating if the side bearing was hinted, and additional tables, \u2018hdmx\u2019 and \u2018LTSH\u2019, to cache hinting widths across multiple sizes and device aspect ratios.</p> <p>Font Smoothing</p> <p>Microsoft's GDI implementation of anti-aliasing. Not traditional anti-aliasing as the outlines were hinted before the sampling. The widths matched the bi-level rendering.</p> <p>ClearType Rendering</p> <p>Technique that uses physical subpixels to improve rendering on LCD (and other) displays. Because of the higher resolution, many methods of improving symmetry in glyphs through hinting the right-side bearing were no longer necessary. This lead to what GDI calls \u2018natural widths\u2019 ClearType, see http://rastertragedy.com/RTRCh4.htm#Sec21. Since hinting has extra resolution, most non-linearity went away, but it is still possible for hints to change the advance widths in this mode.</p> <p>ClearType Compatible Widths</p> <p>One of the earliest challenges with ClearType was allowing the implementation in GDI to be selected without requiring all UI and documents to reflow. To address this, a compatible method of rendering ClearType was added where the font hints are executed once to determine the width in bi-level rendering, and then re-run in ClearType, with the difference in widths being absorbed in the font hints for ClearType (mostly in the white space of hints); see http://rastertragedy.com/RTRCh4.htm#Sec20. Somewhat by definition, compatible width ClearType allows for non-linear widths, but only when the bi-level version has non-linear widths.</p> <p>ClearType Subpixel Positioning</p> <p>One of the nice benefits of ClearType is the ability to more crisply display fractional widths; unfortunately, the GDI model of integer bitmaps did not support this. However, the WPF and Direct Write frameworks do support fractional widths. DWrite calls this \u2018natural mode\u2019, not to be confused with GDI's \u2018natural widths\u2019. Subpixel positioning, in the current implementation of Direct Write, unfortunately does not support hinted advance widths, see http://rastertragedy.com/RTRCh4.htm#Sec22. Note that the TrueType interpreter fully allows the advance width to be adjusted in this mode, just the DWrite client will ignore those changes.</p> <p>ClearType Backward Compatibility</p> <p>This is a set of exceptions made in the TrueType interpreter to minimize hinting techniques that were problematic with the extra resolution of ClearType; see http://rastertragedy.com/RTRCh4.htm#Sec1 and https://www.microsoft.com/typography/cleartype/truetypecleartype.aspx. This technique is not to be confused with ClearType compatible widths. ClearType backward compatibility has no direct impact on changing advance widths, but there might be an indirect impact on disabling some deltas. This could be worked around in backward compatibility mode.</p> <p>Native ClearType Mode</p> <p>(Not to be confused with \u2018natural widths\u2019.) This mode removes all the exceptions in the TrueType interpreter when running with ClearType. Any issues on widths would still apply, though.</p>"},{"location":"ft2-type1_tables.html","title":"Type 1 Tables","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb Type 1 Tables</p>"},{"location":"ft2-type1_tables.html#type-1-tables","title":"Type 1 Tables","text":""},{"location":"ft2-type1_tables.html#synopsis","title":"Synopsis","text":"<p>This section contains the definition of Type\u00a01-specific tables, including structures related to other PostScript font formats.</p>"},{"location":"ft2-type1_tables.html#ps_fontinforec","title":"PS_FontInfoRec","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct  PS_FontInfoRec_\n  {\n    FT_String*  version;\n    FT_String*  notice;\n    FT_String*  full_name;\n    FT_String*  family_name;\n    FT_String*  weight;\n    FT_Long     italic_angle;\n    FT_Bool     is_fixed_pitch;\n    FT_Short    underline_position;\n    FT_UShort   underline_thickness;\n\n  } PS_FontInfoRec;\n</code></pre> <p>A structure used to model a Type\u00a01 or Type\u00a02 FontInfo dictionary. Note that for Multiple Master fonts, each instance has its own FontInfo dictionary.</p>"},{"location":"ft2-type1_tables.html#ps_fontinfo","title":"PS_FontInfo","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct PS_FontInfoRec_*  PS_FontInfo;\n</code></pre> <p>A handle to a <code>PS_FontInfoRec</code> structure.</p>"},{"location":"ft2-type1_tables.html#ps_privaterec","title":"PS_PrivateRec","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct  PS_PrivateRec_\n  {\n    FT_Int     unique_id;\n    FT_Int     lenIV;\n\n    FT_Byte    num_blue_values;\n    FT_Byte    num_other_blues;\n    FT_Byte    num_family_blues;\n    FT_Byte    num_family_other_blues;\n\n    FT_Short   blue_values[14];\n    FT_Short   other_blues[10];\n\n    FT_Short   family_blues      [14];\n    FT_Short   family_other_blues[10];\n\n    FT_Fixed   blue_scale;\n    FT_Int     blue_shift;\n    FT_Int     blue_fuzz;\n\n    FT_UShort  standard_width[1];\n    FT_UShort  standard_height[1];\n\n    FT_Byte    num_snap_widths;\n    FT_Byte    num_snap_heights;\n    FT_Bool    force_bold;\n    FT_Bool    round_stem_up;\n\n    FT_Short   snap_widths [13];  /* including std width  */\n    FT_Short   snap_heights[13];  /* including std height */\n\n    FT_Fixed   expansion_factor;\n\n    FT_Long    language_group;\n    FT_Long    password;\n\n    FT_Short   min_feature[2];\n\n  } PS_PrivateRec;\n</code></pre> <p>A structure used to model a Type\u00a01 or Type\u00a02 private dictionary. Note that for Multiple Master fonts, each instance has its own Private dictionary.</p>"},{"location":"ft2-type1_tables.html#ps_private","title":"PS_Private","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct PS_PrivateRec_*  PS_Private;\n</code></pre> <p>A handle to a <code>PS_PrivateRec</code> structure.</p>"},{"location":"ft2-type1_tables.html#cid_facedictrec","title":"CID_FaceDictRec","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct  CID_FaceDictRec_\n  {\n    PS_PrivateRec  private_dict;\n\n    FT_UInt        len_buildchar;\n    FT_Fixed       forcebold_threshold;\n    FT_Pos         stroke_width;\n    FT_Fixed       expansion_factor;   /* this is a duplicate of           */\n                                       /* `private_dict-&gt;expansion_factor' */\n    FT_Byte        paint_type;\n    FT_Byte        font_type;\n    FT_Matrix      font_matrix;\n    FT_Vector      font_offset;\n\n    FT_UInt        num_subrs;\n    FT_ULong       subrmap_offset;\n    FT_UInt        sd_bytes;\n\n  } CID_FaceDictRec;\n</code></pre> <p>A structure used to represent data in a CID top-level dictionary. In most cases, they are part of the font's \u2018/FDArray\u2019 array. Within a CID font file, such (internal) subfont dictionaries are enclosed by \u2018%ADOBeginFontDict\u2019 and \u2018%ADOEndFontDict\u2019 comments.</p> <p>Note that <code>CID_FaceDictRec</code> misses a field for the \u2018/FontName\u2019 keyword, specifying the subfont's name (the top-level font name is given by the \u2018/CIDFontName\u2019 keyword). This is an oversight, but it doesn't limit the \u2018cid\u2019 font module's functionality because FreeType neither needs this entry nor gives access to CID subfonts.</p>"},{"location":"ft2-type1_tables.html#cid_facedict","title":"CID_FaceDict","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct CID_FaceDictRec_*  CID_FaceDict;\n</code></pre> <p>A handle to a <code>CID_FaceDictRec</code> structure.</p>"},{"location":"ft2-type1_tables.html#cid_faceinforec","title":"CID_FaceInfoRec","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct  CID_FaceInfoRec_\n  {\n    FT_String*      cid_font_name;\n    FT_Fixed        cid_version;\n    FT_Int          cid_font_type;\n\n    FT_String*      registry;\n    FT_String*      ordering;\n    FT_Int          supplement;\n\n    PS_FontInfoRec  font_info;\n    FT_BBox         font_bbox;\n    FT_ULong        uid_base;\n\n    FT_Int          num_xuid;\n    FT_ULong        xuid[16];\n\n    FT_ULong        cidmap_offset;\n    FT_UInt         fd_bytes;\n    FT_UInt         gd_bytes;\n    FT_ULong        cid_count;\n\n    FT_UInt         num_dicts;\n    CID_FaceDict    font_dicts;\n\n    FT_ULong        data_offset;\n\n  } CID_FaceInfoRec;\n</code></pre> <p>A structure used to represent CID Face information.</p>"},{"location":"ft2-type1_tables.html#cid_faceinfo","title":"CID_FaceInfo","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef struct CID_FaceInfoRec_*  CID_FaceInfo;\n</code></pre> <p>A handle to a <code>CID_FaceInfoRec</code> structure.</p>"},{"location":"ft2-type1_tables.html#ft_has_ps_glyph_names","title":"FT_Has_PS_Glyph_Names","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  FT_EXPORT( FT_Int )\n  FT_Has_PS_Glyph_Names( FT_Face  face );\n</code></pre> <p>Return true if a given face provides reliable PostScript glyph names. This is similar to using the <code>FT_HAS_GLYPH_NAMES</code> macro, except that certain fonts (mostly TrueType) contain incorrect glyph name tables.</p> <p>When this function returns true, the caller is sure that the glyph names returned by <code>FT_Get_Glyph_Name</code> are reliable.</p> input face <p>face handle</p> return <p>Boolean. True if glyph names are reliable.</p>"},{"location":"ft2-type1_tables.html#ft_get_ps_font_info","title":"FT_Get_PS_Font_Info","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_PS_Font_Info( FT_Face      face,\n                       PS_FontInfo  afont_info );\n</code></pre> <p>Retrieve the <code>PS_FontInfoRec</code> structure corresponding to a given PostScript font.</p> input face <p>PostScript face handle.</p> output afont_info <p>A pointer to a <code>PS_FontInfoRec</code> object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>String pointers within the <code>PS_FontInfoRec</code> structure are owned by the face and don't need to be freed by the caller. Missing entries in the font's FontInfo dictionary are represented by <code>NULL</code> pointers.</p> <p>The following font formats support this feature: \u2018Type\u00a01\u2019, \u2018Type\u00a042\u2019, \u2018CFF\u2019, \u2018CID\u00a0Type\u00a01\u2019. For other font formats this function returns the <code>FT_Err_Invalid_Argument</code> error code.</p> example <pre><code>  PS_FontInfoRec  font_info;\n\n\n  error = FT_Get_PS_Font_Info( face, &amp;font_info );\n  ...\n</code></pre>"},{"location":"ft2-type1_tables.html#ft_get_ps_font_private","title":"FT_Get_PS_Font_Private","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_PS_Font_Private( FT_Face     face,\n                          PS_Private  afont_private );\n</code></pre> <p>Retrieve the <code>PS_PrivateRec</code> structure corresponding to a given PostScript font.</p> input face <p>PostScript face handle.</p> output afont_private <p>A pointer to a <code>PS_PrivateRec</code> object.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>The string pointers within the <code>PS_PrivateRec</code> structure are owned by the face and don't need to be freed by the caller.</p> <p>Only the \u2018Type\u00a01\u2019 font format supports this feature. For other font formats this function returns the <code>FT_Err_Invalid_Argument</code> error code.</p> example <pre><code>  PS_PrivateRec  font_private;\n\n\n  error = FT_Get_PS_Font_Private( face, &amp;font_private );\n  ...\n</code></pre>"},{"location":"ft2-type1_tables.html#ft_get_ps_font_value","title":"FT_Get_PS_Font_Value","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  FT_EXPORT( FT_Long )\n  FT_Get_PS_Font_Value( FT_Face       face,\n                        PS_Dict_Keys  key,\n                        FT_UInt       idx,\n                        void         *value,\n                        FT_Long       value_len );\n</code></pre> <p>Retrieve the value for the supplied key from a PostScript font.</p> input face <p>PostScript face handle.</p> key <p>An enumeration value representing the dictionary key to retrieve.</p> idx <p>For array values, this specifies the index to be returned.</p> value <p>A pointer to memory into which to write the value.</p> valen_len <p>The size, in bytes, of the memory supplied for the value.</p> output value <p>The value matching the above key, if it exists.</p> return <p>The amount of memory (in bytes) required to hold the requested value (if it exists, -1 otherwise).</p> note <p>The values returned are not pointers into the internal structures of the face, but are \u2018fresh\u2019 copies, so that the memory containing them belongs to the calling application. This also enforces the \u2018read-only\u2019 nature of these values, i.e., this function cannot be used to manipulate the face.</p> <p><code>value</code> is a void pointer because the values returned can be of various types.</p> <p>If either <code>value</code> is <code>NULL</code> or <code>value_len</code> is too small, just the required memory size for the requested entry is returned.</p> <p>The <code>idx</code> parameter is used, not only to retrieve elements of, for example, the FontMatrix or FontBBox, but also to retrieve name keys from the CharStrings dictionary, and the charstrings themselves. It is ignored for atomic values.</p> <p><code>PS_DICT_BLUE_SCALE</code> returns a value that is scaled up by 1000. To get the value as in the font stream, you need to divide by 65536000.0 (to remove the FT_Fixed scale, and the x1000 scale).</p> <p>IMPORTANT: Only key/value pairs read by the FreeType interpreter can be retrieved. So, for example, PostScript procedures such as NP, ND, and RD are not available. Arbitrary keys are, obviously, not be available either.</p> <p>If the font's format is not PostScript-based, this function returns the <code>FT_Err_Invalid_Argument</code> error code.</p> since <p>2.4.8</p>"},{"location":"ft2-type1_tables.html#t1_blend_flags","title":"T1_Blend_Flags","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef enum  T1_Blend_Flags_\n  {\n    /* required fields in a FontInfo blend dictionary */\n    T1_BLEND_UNDERLINE_POSITION = 0,\n    T1_BLEND_UNDERLINE_THICKNESS,\n    T1_BLEND_ITALIC_ANGLE,\n\n    /* required fields in a Private blend dictionary */\n    T1_BLEND_BLUE_VALUES,\n    T1_BLEND_OTHER_BLUES,\n    T1_BLEND_STANDARD_WIDTH,\n    T1_BLEND_STANDARD_HEIGHT,\n    T1_BLEND_STEM_SNAP_WIDTHS,\n    T1_BLEND_STEM_SNAP_HEIGHTS,\n    T1_BLEND_BLUE_SCALE,\n    T1_BLEND_BLUE_SHIFT,\n    T1_BLEND_FAMILY_BLUES,\n    T1_BLEND_FAMILY_OTHER_BLUES,\n    T1_BLEND_FORCE_BOLD,\n\n    T1_BLEND_MAX    /* do not remove */\n\n  } T1_Blend_Flags;\n\n\n  /* these constants are deprecated; use the corresponding */\n  /* `T1_Blend_Flags` values instead                       */\n#define t1_blend_underline_position   T1_BLEND_UNDERLINE_POSITION\n#define t1_blend_underline_thickness  T1_BLEND_UNDERLINE_THICKNESS\n#define t1_blend_italic_angle         T1_BLEND_ITALIC_ANGLE\n#define t1_blend_blue_values          T1_BLEND_BLUE_VALUES\n#define t1_blend_other_blues          T1_BLEND_OTHER_BLUES\n#define t1_blend_standard_widths      T1_BLEND_STANDARD_WIDTH\n#define t1_blend_standard_height      T1_BLEND_STANDARD_HEIGHT\n#define t1_blend_stem_snap_widths     T1_BLEND_STEM_SNAP_WIDTHS\n#define t1_blend_stem_snap_heights    T1_BLEND_STEM_SNAP_HEIGHTS\n#define t1_blend_blue_scale           T1_BLEND_BLUE_SCALE\n#define t1_blend_blue_shift           T1_BLEND_BLUE_SHIFT\n#define t1_blend_family_blues         T1_BLEND_FAMILY_BLUES\n#define t1_blend_family_other_blues   T1_BLEND_FAMILY_OTHER_BLUES\n#define t1_blend_force_bold           T1_BLEND_FORCE_BOLD\n#define t1_blend_max                  T1_BLEND_MAX\n</code></pre> <p>A set of flags used to indicate which fields are present in a given blend dictionary (font info or private). Used to support Multiple Masters fonts.</p> values T1_BLEND_UNDERLINE_POSITION T1_BLEND_UNDERLINE_THICKNESS T1_BLEND_ITALIC_ANGLE T1_BLEND_BLUE_VALUES T1_BLEND_OTHER_BLUES T1_BLEND_STANDARD_WIDTH T1_BLEND_STANDARD_HEIGHT T1_BLEND_STEM_SNAP_WIDTHS T1_BLEND_STEM_SNAP_HEIGHTS T1_BLEND_BLUE_SCALE T1_BLEND_BLUE_SHIFT T1_BLEND_FAMILY_BLUES T1_BLEND_FAMILY_OTHER_BLUES T1_BLEND_FORCE_BOLD"},{"location":"ft2-type1_tables.html#t1_encodingtype","title":"T1_EncodingType","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef enum  T1_EncodingType_\n  {\n    T1_ENCODING_TYPE_NONE = 0,\n    T1_ENCODING_TYPE_ARRAY,\n    T1_ENCODING_TYPE_STANDARD,\n    T1_ENCODING_TYPE_ISOLATIN1,\n    T1_ENCODING_TYPE_EXPERT\n\n  } T1_EncodingType;\n</code></pre> <p>An enumeration describing the \u2018Encoding\u2019 entry in a Type 1 dictionary.</p> values T1_ENCODING_TYPE_NONE T1_ENCODING_TYPE_ARRAY T1_ENCODING_TYPE_STANDARD T1_ENCODING_TYPE_ISOLATIN1 T1_ENCODING_TYPE_EXPERT since <p>2.4.8</p>"},{"location":"ft2-type1_tables.html#ps_dict_keys","title":"PS_Dict_Keys","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef enum  PS_Dict_Keys_\n  {\n    /* conventionally in the font dictionary */\n    PS_DICT_FONT_TYPE,              /* FT_Byte         */\n    PS_DICT_FONT_MATRIX,            /* FT_Fixed        */\n    PS_DICT_FONT_BBOX,              /* FT_Fixed        */\n    PS_DICT_PAINT_TYPE,             /* FT_Byte         */\n    PS_DICT_FONT_NAME,              /* FT_String*      */\n    PS_DICT_UNIQUE_ID,              /* FT_Int          */\n    PS_DICT_NUM_CHAR_STRINGS,       /* FT_Int          */\n    PS_DICT_CHAR_STRING_KEY,        /* FT_String*      */\n    PS_DICT_CHAR_STRING,            /* FT_String*      */\n    PS_DICT_ENCODING_TYPE,          /* T1_EncodingType */\n    PS_DICT_ENCODING_ENTRY,         /* FT_String*      */\n\n    /* conventionally in the font Private dictionary */\n    PS_DICT_NUM_SUBRS,              /* FT_Int     */\n    PS_DICT_SUBR,                   /* FT_String* */\n    PS_DICT_STD_HW,                 /* FT_UShort  */\n    PS_DICT_STD_VW,                 /* FT_UShort  */\n    PS_DICT_NUM_BLUE_VALUES,        /* FT_Byte    */\n    PS_DICT_BLUE_VALUE,             /* FT_Short   */\n    PS_DICT_BLUE_FUZZ,              /* FT_Int     */\n    PS_DICT_NUM_OTHER_BLUES,        /* FT_Byte    */\n    PS_DICT_OTHER_BLUE,             /* FT_Short   */\n    PS_DICT_NUM_FAMILY_BLUES,       /* FT_Byte    */\n    PS_DICT_FAMILY_BLUE,            /* FT_Short   */\n    PS_DICT_NUM_FAMILY_OTHER_BLUES, /* FT_Byte    */\n    PS_DICT_FAMILY_OTHER_BLUE,      /* FT_Short   */\n    PS_DICT_BLUE_SCALE,             /* FT_Fixed   */\n    PS_DICT_BLUE_SHIFT,             /* FT_Int     */\n    PS_DICT_NUM_STEM_SNAP_H,        /* FT_Byte    */\n    PS_DICT_STEM_SNAP_H,            /* FT_Short   */\n    PS_DICT_NUM_STEM_SNAP_V,        /* FT_Byte    */\n    PS_DICT_STEM_SNAP_V,            /* FT_Short   */\n    PS_DICT_FORCE_BOLD,             /* FT_Bool    */\n    PS_DICT_RND_STEM_UP,            /* FT_Bool    */\n    PS_DICT_MIN_FEATURE,            /* FT_Short   */\n    PS_DICT_LEN_IV,                 /* FT_Int     */\n    PS_DICT_PASSWORD,               /* FT_Long    */\n    PS_DICT_LANGUAGE_GROUP,         /* FT_Long    */\n\n    /* conventionally in the font FontInfo dictionary */\n    PS_DICT_VERSION,                /* FT_String* */\n    PS_DICT_NOTICE,                 /* FT_String* */\n    PS_DICT_FULL_NAME,              /* FT_String* */\n    PS_DICT_FAMILY_NAME,            /* FT_String* */\n    PS_DICT_WEIGHT,                 /* FT_String* */\n    PS_DICT_IS_FIXED_PITCH,         /* FT_Bool    */\n    PS_DICT_UNDERLINE_POSITION,     /* FT_Short   */\n    PS_DICT_UNDERLINE_THICKNESS,    /* FT_UShort  */\n    PS_DICT_FS_TYPE,                /* FT_UShort  */\n    PS_DICT_ITALIC_ANGLE,           /* FT_Long    */\n\n    PS_DICT_MAX = PS_DICT_ITALIC_ANGLE\n\n  } PS_Dict_Keys;\n</code></pre> <p>An enumeration used in calls to <code>FT_Get_PS_Font_Value</code> to identify the Type\u00a01 dictionary entry to retrieve.</p> values PS_DICT_FONT_TYPE PS_DICT_FONT_MATRIX PS_DICT_FONT_BBOX PS_DICT_PAINT_TYPE PS_DICT_FONT_NAME PS_DICT_UNIQUE_ID PS_DICT_NUM_CHAR_STRINGS PS_DICT_CHAR_STRING_KEY PS_DICT_CHAR_STRING PS_DICT_ENCODING_TYPE PS_DICT_ENCODING_ENTRY PS_DICT_NUM_SUBRS PS_DICT_SUBR PS_DICT_STD_HW PS_DICT_STD_VW PS_DICT_NUM_BLUE_VALUES PS_DICT_BLUE_VALUE PS_DICT_BLUE_FUZZ PS_DICT_NUM_OTHER_BLUES PS_DICT_OTHER_BLUE PS_DICT_NUM_FAMILY_BLUES PS_DICT_FAMILY_BLUE PS_DICT_NUM_FAMILY_OTHER_BLUES PS_DICT_FAMILY_OTHER_BLUE PS_DICT_BLUE_SCALE PS_DICT_BLUE_SHIFT PS_DICT_NUM_STEM_SNAP_H PS_DICT_STEM_SNAP_H PS_DICT_NUM_STEM_SNAP_V PS_DICT_STEM_SNAP_V PS_DICT_FORCE_BOLD PS_DICT_RND_STEM_UP PS_DICT_MIN_FEATURE PS_DICT_LEN_IV PS_DICT_PASSWORD PS_DICT_LANGUAGE_GROUP PS_DICT_VERSION PS_DICT_NOTICE PS_DICT_FULL_NAME PS_DICT_FAMILY_NAME PS_DICT_WEIGHT PS_DICT_IS_FIXED_PITCH PS_DICT_UNDERLINE_POSITION PS_DICT_UNDERLINE_THICKNESS PS_DICT_FS_TYPE PS_DICT_ITALIC_ANGLE since <p>2.4.8</p>"},{"location":"ft2-type1_tables.html#t1_fontinfo","title":"T1_FontInfo","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef PS_FontInfoRec  T1_FontInfo;\n</code></pre> <p>This type is equivalent to <code>PS_FontInfoRec</code>. It is deprecated but kept to maintain source compatibility between various versions of FreeType.</p>"},{"location":"ft2-type1_tables.html#t1_private","title":"T1_Private","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef PS_PrivateRec  T1_Private;\n</code></pre> <p>This type is equivalent to <code>PS_PrivateRec</code>. It is deprecated but kept to maintain source compatibility between various versions of FreeType.</p>"},{"location":"ft2-type1_tables.html#cid_fontdict","title":"CID_FontDict","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef CID_FaceDictRec  CID_FontDict;\n</code></pre> <p>This type is equivalent to <code>CID_FaceDictRec</code>. It is deprecated but kept to maintain source compatibility between various versions of FreeType.</p>"},{"location":"ft2-type1_tables.html#cid_info","title":"CID_Info","text":"<p>Defined in FT_TYPE1_TABLES_H (freetype/t1tables.h).</p> <pre><code>  typedef CID_FaceInfoRec  CID_Info;\n</code></pre> <p>This type is equivalent to <code>CID_FaceInfoRec</code>. It is deprecated but kept to maintain source compatibility between various versions of FreeType.</p>"},{"location":"ft2-user_allocation.html","title":"User allocation","text":"<p>FreeType \u00bb Docs \u00bb General Remarks \u00bb User allocation</p>"},{"location":"ft2-user_allocation.html#user-allocation","title":"User allocation","text":""},{"location":"ft2-user_allocation.html#synopsis","title":"Synopsis","text":"<p>FreeType assumes that structures allocated by the user and passed as arguments are zeroed out except for the actual data. In other words, it is recommended to use <code>calloc</code> (or variants of it) instead of <code>malloc</code> for allocation.</p>"},{"location":"ft2-winfnt_fonts.html","title":"Window FNT Files","text":"<p>FreeType \u00bb Docs \u00bb Format-Specific API \u00bb Window FNT Files</p>"},{"location":"ft2-winfnt_fonts.html#window-fnt-files","title":"Window FNT Files","text":""},{"location":"ft2-winfnt_fonts.html#synopsis","title":"Synopsis","text":"<p>This section contains the declaration of Windows FNT-specific functions.</p>"},{"location":"ft2-winfnt_fonts.html#ft_winfnt_id_xxx","title":"FT_WinFNT_ID_XXX","text":"<p>Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).</p> <pre><code>#define FT_WinFNT_ID_CP1252    0\n#define FT_WinFNT_ID_DEFAULT   1\n#define FT_WinFNT_ID_SYMBOL    2\n#define FT_WinFNT_ID_MAC      77\n#define FT_WinFNT_ID_CP932   128\n#define FT_WinFNT_ID_CP949   129\n#define FT_WinFNT_ID_CP1361  130\n#define FT_WinFNT_ID_CP936   134\n#define FT_WinFNT_ID_CP950   136\n#define FT_WinFNT_ID_CP1253  161\n#define FT_WinFNT_ID_CP1254  162\n#define FT_WinFNT_ID_CP1258  163\n#define FT_WinFNT_ID_CP1255  177\n#define FT_WinFNT_ID_CP1256  178\n#define FT_WinFNT_ID_CP1257  186\n#define FT_WinFNT_ID_CP1251  204\n#define FT_WinFNT_ID_CP874   222\n#define FT_WinFNT_ID_CP1250  238\n#define FT_WinFNT_ID_OEM     255\n</code></pre> <p>A list of valid values for the <code>charset</code> byte in <code>FT_WinFNT_HeaderRec</code>. Exact mapping tables for the various \u2018cpXXXX\u2019 encodings (except for \u2018cp1361\u2019) can be found at \u2018ftp://ftp.unicode.org/Public/\u2019 in the <code>MAPPINGS/VENDORS/MICSFT/WINDOWS</code> subdirectory. \u2018cp1361\u2019 is roughly a superset of <code>MAPPINGS/OBSOLETE/EASTASIA/KSC/JOHAB.TXT</code>.</p> values FT_WinFNT_ID_DEFAULT <p>This is used for font enumeration and font creation as a \u2018don't care\u2019 value. Valid font files don't contain this value. When querying for information about the character set of the font that is currently selected into a specified device context, this return value (of the related Windows API) simply denotes failure.</p> FT_WinFNT_ID_SYMBOL <p>There is no known mapping table available.</p> FT_WinFNT_ID_MAC <p>Mac Roman encoding.</p> FT_WinFNT_ID_OEM <p>From Michael Poettgen &lt;michael@poettgen.de&gt;:</p> <p>The \u2018Windows Font Mapping\u2019 article says that <code>FT_WinFNT_ID_OEM</code> is used for the charset of vector fonts, like <code>modern.fon</code>, <code>roman.fon</code>, and <code>script.fon</code> on Windows.</p> <p>The \u2018CreateFont\u2019 documentation says: The <code>FT_WinFNT_ID_OEM</code> value specifies a character set that is operating-system dependent.</p> <p>The \u2018IFIMETRICS\u2019 documentation from the \u2018Windows Driver Development Kit\u2019 says: This font supports an OEM-specific character set. The OEM character set is system dependent.</p> <p>In general OEM, as opposed to ANSI (i.e., \u2018cp1252\u2019), denotes the second default codepage that most international versions of Windows have. It is one of the OEM codepages from</p> <p>https://docs.microsoft.com/en-us/windows/desktop/intl/code-page-identifiers ,</p> <p>and is used for the \u2018DOS boxes\u2019, to support legacy applications. A German Windows version for example usually uses ANSI codepage 1252 and OEM codepage 850.</p> FT_WinFNT_ID_CP874 <p>A superset of Thai TIS 620 and ISO 8859-11.</p> FT_WinFNT_ID_CP932 <p>A superset of Japanese Shift-JIS (with minor deviations).</p> FT_WinFNT_ID_CP936 <p>A superset of simplified Chinese GB 2312-1980 (with different ordering and minor deviations).</p> FT_WinFNT_ID_CP949 <p>A superset of Korean Hangul KS\u00a0C 5601-1987 (with different ordering and minor deviations).</p> FT_WinFNT_ID_CP950 <p>A superset of traditional Chinese Big\u00a05 ETen (with different ordering and minor deviations).</p> FT_WinFNT_ID_CP1250 <p>A superset of East European ISO 8859-2 (with slightly different ordering).</p> FT_WinFNT_ID_CP1251 <p>A superset of Russian ISO 8859-5 (with different ordering).</p> FT_WinFNT_ID_CP1252 <p>ANSI encoding. A superset of ISO 8859-1.</p> FT_WinFNT_ID_CP1253 <p>A superset of Greek ISO 8859-7 (with minor modifications).</p> FT_WinFNT_ID_CP1254 <p>A superset of Turkish ISO 8859-9.</p> FT_WinFNT_ID_CP1255 <p>A superset of Hebrew ISO 8859-8 (with some modifications).</p> FT_WinFNT_ID_CP1256 <p>A superset of Arabic ISO 8859-6 (with different ordering).</p> FT_WinFNT_ID_CP1257 <p>A superset of Baltic ISO 8859-13 (with some deviations).</p> FT_WinFNT_ID_CP1258 <p>For Vietnamese. This encoding doesn't cover all necessary characters.</p> FT_WinFNT_ID_CP1361 <p>Korean (Johab).</p>"},{"location":"ft2-winfnt_fonts.html#ft_winfnt_headerrec","title":"FT_WinFNT_HeaderRec","text":"<p>Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).</p> <pre><code>  typedef struct  FT_WinFNT_HeaderRec_\n  {\n    FT_UShort  version;\n    FT_ULong   file_size;\n    FT_Byte    copyright[60];\n    FT_UShort  file_type;\n    FT_UShort  nominal_point_size;\n    FT_UShort  vertical_resolution;\n    FT_UShort  horizontal_resolution;\n    FT_UShort  ascent;\n    FT_UShort  internal_leading;\n    FT_UShort  external_leading;\n    FT_Byte    italic;\n    FT_Byte    underline;\n    FT_Byte    strike_out;\n    FT_UShort  weight;\n    FT_Byte    charset;\n    FT_UShort  pixel_width;\n    FT_UShort  pixel_height;\n    FT_Byte    pitch_and_family;\n    FT_UShort  avg_width;\n    FT_UShort  max_width;\n    FT_Byte    first_char;\n    FT_Byte    last_char;\n    FT_Byte    default_char;\n    FT_Byte    break_char;\n    FT_UShort  bytes_per_row;\n    FT_ULong   device_offset;\n    FT_ULong   face_name_offset;\n    FT_ULong   bits_pointer;\n    FT_ULong   bits_offset;\n    FT_Byte    reserved;\n    FT_ULong   flags;\n    FT_UShort  A_space;\n    FT_UShort  B_space;\n    FT_UShort  C_space;\n    FT_UShort  color_table_offset;\n    FT_ULong   reserved1[4];\n\n  } FT_WinFNT_HeaderRec;\n</code></pre> <p>Windows FNT Header info.</p>"},{"location":"ft2-winfnt_fonts.html#ft_winfnt_header","title":"FT_WinFNT_Header","text":"<p>Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).</p> <pre><code>  typedef struct FT_WinFNT_HeaderRec_*  FT_WinFNT_Header;\n</code></pre> <p>A handle to an <code>FT_WinFNT_HeaderRec</code> structure.</p>"},{"location":"ft2-winfnt_fonts.html#ft_get_winfnt_header","title":"FT_Get_WinFNT_Header","text":"<p>Defined in FT_WINFONTS_H (freetype/ftwinfnt.h).</p> <pre><code>  FT_EXPORT( FT_Error )\n  FT_Get_WinFNT_Header( FT_Face               face,\n                        FT_WinFNT_HeaderRec  *aheader );\n</code></pre> <p>Retrieve a Windows FNT font info header.</p> input face <p>A handle to the input face.</p> output aheader <p>The WinFNT header.</p> return <p>FreeType error code. 0\u00a0means success.</p> note <p>This function only works with Windows FNT faces, returning an error otherwise.</p>"}]}